<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This file is run automatically when the project is built. 
       https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019
  -->

  <!-- Utility task to replace text in a file copied from:
       https://stackoverflow.com/questions/7837644/how-to-replace-string-in-file-using-msbuild 
  -->
  <UsingTask TaskName="ReplaceFileText" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
      <MatchExpression ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            File.WriteAllText(
                OutputFilename,
                Regex.Replace(File.ReadAllText(InputFilename), MatchExpression, ReplacementText)
                );
          ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Copy files from NuGet packages that are needed to run -->
  <Target Name="StoolballCopyFilesFromNuGetPackages" BeforeTargets="WebCompile">
    <XmlPeek XmlInputPath="packages.config" Query="packages/package[@id='UmbracoCms']/@version">
      <Output TaskParameter="Result" ItemName="UmbracoVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="packages.config" Query="packages/package[@id='UmbracoForms']/@version">
      <Output TaskParameter="Result" ItemName="UmbracoFormsVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="packages.config" Query="packages/package[@id='uSync']/@version">
      <Output TaskParameter="Result" ItemName="USyncVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="packages.config" Query="packages/package[@id='bootstrap.sass']/@version">
      <Output TaskParameter="Result" ItemName="BootstrapVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="packages.config" Query="packages/package[@id='jQuery']/@version">
      <Output TaskParameter="Result" ItemName="JQueryVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="packages.config" Query="packages/package[@id='jQuery.Validation']/@version">
      <Output TaskParameter="Result" ItemName="JQueryValidationVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="packages.config" Query="packages/package[@id='Microsoft.jQuery.Unobtrusive.Validation']/@version">
      <Output TaskParameter="Result" ItemName="JQueryUnobtrusiveValidationVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="packages.config" Query="packages/package[@id='popper.js']/@version">
      <Output TaskParameter="Result" ItemName="PopperVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="packages.config" Query="packages/package[@id='Skybrud.Umbraco.Redirects']/@version">
      <Output TaskParameter="Result" ItemName="SkybrudRedirectsVersion" />
    </XmlPeek>
    
    <PropertyGroup>
      <UmbracoVersion>@(UmbracoVersion)</UmbracoVersion>
      <UmbracoFormsVersion>@(UmbracoFormsVersion)</UmbracoFormsVersion>
      <USyncVersion>@(USyncVersion)</USyncVersion>
      <BootstrapVersion>@(BootstrapVersion)</BootstrapVersion>
      <JQueryVersion>@(JQueryVersion)</JQueryVersion>
      <JQueryValidationVersion>@(JQueryValidationVersion)</JQueryValidationVersion>
      <JQueryUnobtrusiveValidationVersion>@(JQueryUnobtrusiveValidationVersion)</JQueryUnobtrusiveValidationVersion>
      <PopperVersion>@(PopperVersion)</PopperVersion>
      <SkybrudRedirectsVersion>@(SkybrudRedirectsVersion)</SkybrudRedirectsVersion>
    </PropertyGroup>

    <Error Text="UmbracoCms NuGet package v$(UmbracoVersion) not found." Condition="!Exists('$(SolutionDir)packages\UmbracoCms.$(UmbracoVersion)\')" />
    <Error Text="UmbracoForms NuGet package v$(UmbracoFormsVersion) not found." Condition="!Exists('$(SolutionDir)packages\UmbracoForms.$(UmbracoFormsVersion)\')" />
    <Error Text="uSync NuGet package v$(USyncVersion) not found." Condition="!Exists('$(SolutionDir)packages\uSync.$(USyncVersion)\')" />
    <Error Text="bootstrap.sass NuGet package v$(BootstrapVersion) not found." Condition="!Exists('$(SolutionDir)packages\bootstrap.sass.$(BootstrapVersion)\')" />
    <Error Text="jQuery NuGet package v$(JQueryVersion) not found." Condition="!Exists('$(SolutionDir)packages\jQuery.$(JQueryVersion)\')" />
    <Error Text="jQuery.Validation NuGet package v$(JQueryValidationVersion) not found." Condition="!Exists('$(SolutionDir)packages\jQuery.Validation.$(JQueryValidationVersion)\')" />
    <Error Text="Microsoft.jQuery.Unobtrusive.Validation NuGet package v$(JQueryUnobtrusiveValidationVersion) not found." Condition="!Exists('$(SolutionDir)packages\Microsoft.jQuery.Unobtrusive.Validation.$(JQueryUnobtrusiveValidationVersion)\')" />
    <Error Text="popper.js NuGet package v$(PopperVersion) not found." Condition="!Exists('$(SolutionDir)packages\popper.js.$(PopperVersion)\')" />
    <Error Text="Skybrud.Umbraco.Redirects NuGet package v$(SkybrudRedirectsVersion) not found." Condition="!Exists('$(SolutionDir)packages\Skybrud.Umbraco.Redirects.$(SkybrudRedirectsVersion)\')" />

    <ItemGroup>
      <FilesFromUmbracoPackage Include="$(SolutionDir)packages\UmbracoCms.$(UmbracoVersion)\Content\Views\Partials\**" />
      <FilesFromUmbracoFormsPackage Include="$(SolutionDir)packages\UmbracoForms.$(UmbracoFormsVersion)\Content\**" />
      <FilesFromUSyncPackage Include="$(SolutionDir)packages\uSync.$(USyncVersion)\Content\App_Plugins\**" />
      <FilesFromBootstrapPackage Include="$(SolutionDir)packages\bootstrap.sass.$(BootstrapVersion)\content\**" />
      <FilesFromJQueryPackage Include="$(SolutionDir)packages\jQuery.$(JQueryVersion)\Content\**" />
      <FilesFromJQueryValidationPackage Include="$(SolutionDir)packages\jQuery.Validation.$(JQueryValidationVersion)\Content\**" />
      <FilesFromJQueryUnobtrusiveValidationPackage Include="$(SolutionDir)packages\Microsoft.jQuery.Unobtrusive.Validation.$(JQueryUnobtrusiveValidationVersion)\Content\**" />
      <FilesFromPopperPackage Include="$(SolutionDir)packages\popper.js.$(PopperVersion)\Content\**" />
      <FilesFromSkybrudRedirectsPackage Include="$(SolutionDir)packages\Skybrud.Umbraco.Redirects.$(SkybrudRedirectsVersion)\contentFiles\any\net472\App_Plugins\**" />
      <UmbracoConfigFiles Include="$(SolutionDir)packages\UmbracoCms.$(UmbracoVersion)\Content\config\*.config" />
    </ItemGroup>

    <!-- Copy files that are missing because they're not restored by NuGet restore -->
    <Copy SourceFiles="@(FilesFromUmbracoPackage)"
          DestinationFiles="$(ProjectDir)Views\Partials\%(RecursiveDir)%(Filename)%(Extension)"
          Condition="!Exists('$(ProjectDir)Views\Partials\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(FilesFromUmbracoFormsPackage)"
          DestinationFiles="$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)"
          Condition="!Exists('$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(FilesFromUSyncPackage)"
          DestinationFiles="$(ProjectDir)App_Plugins\%(RecursiveDir)%(Filename)%(Extension)"
          Condition="!Exists('$(ProjectDir)App_Plugins\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(FilesFromBootstrapPackage)"
          DestinationFiles="$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)"
          Condition="!Exists('$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(FilesFromJQueryPackage)"
          DestinationFiles="$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)"
          Condition="!Exists('$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(FilesFromJQueryValidationPackage)"
          DestinationFiles="$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)"
          Condition="!Exists('$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(FilesFromJQueryUnobtrusiveValidationPackage)"
          DestinationFiles="$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)"
          Condition="!Exists('$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(FilesFromPopperPackage)"
          DestinationFiles="$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)"
          Condition="!Exists('$(ProjectDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(FilesFromSkybrudRedirectsPackage)"
          DestinationFiles="$(ProjectDir)App_Plugins\%(RecursiveDir)%(Filename)%(Extension)"
          Condition="!Exists('$(ProjectDir)App_Plugins\%(RecursiveDir)%(Filename)%(Extension)')" />

    <!-- Always overwrite these files with the version from NuGet to ensure a consistent starting version before transforms -->
    <Copy SourceFiles="@(UmbracoConfigFiles)"
      DestinationFiles="$(ProjectDir)config\%(Filename)%(Extension)" />
  </Target>

  <Target Name="StoolballCopyFilesFromUmbracoCloud" BeforeTargets="AfterBuild">
    <!-- Copy files from the Umbraco Cloud repo to the Stoolball.Web project
         (Mostly secrets and Umbraco Deploy, which is not available on NuGet yet.) -->
    <Error Text="Before building this project, clone an Umbraco Cloud git repository into a folder called .UmbracoCloud inside the root folder of this repository. This can be an Umbraco Cloud trial account." Condition="!Exists('$(SolutionDir)\.UmbracoCloud\')" />

    <ItemGroup>
      <UmbracoCloudUsers Include="$(SolutionDir).UmbracoCloud\data\backoffice\**" />
      <UmbracoLanguageConfig Include="$(SolutionDir).UmbracoCloud\umbraco\Config\Lang\**" />
      <UmbracoLicences Include="$(SolutionDir).UmbracoCloud\App_Plugins\UmbracoLicenses\**" />
      <UmbracoDeploy Include="$(SolutionDir).UmbracoCloud\App_Plugins\Deploy\**" />
      <UmbracoDeployDLLs Include="$(SolutionDir).UmbracoCloud\bin\Umbraco.Deploy.*" />
      <UmbracoDeployConfig Include="$(SolutionDir).UmbracoCloud\Config\UmbracoDeploy.*" />
      <UmbracoConfigFolderSecrets Include="$(SolutionDir).UmbracoCloud\Config\Secret-*.xdt.config" />
      <UmbracoCloudWebConfig Include="$(SolutionDir).UmbracoCloud\Web.config" />
      <UmbracoCloudWebConfigSecrets Include="$(SolutionDir).UmbracoCloud\Secret-*.xdt.config" />
    </ItemGroup>

    <!-- Copy these files if they don't already exist -->
    <Copy SourceFiles="@(UmbracoCloudUsers)"
      DestinationFiles="$(ProjectDir)data\backoffice\%(RecursiveDir)%(Filename)%(Extension)"
      Condition="!Exists('$(ProjectDir)data\backoffice\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(UmbracoLanguageConfig)"
      DestinationFiles="$(ProjectDir)umbraco\Config\Lang\%(RecursiveDir)%(Filename)%(Extension)"
      Condition="!Exists('$(ProjectDir)umbraco\Config\Lang\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(UmbracoLicences)"
      DestinationFiles="$(ProjectDir)App_Plugins\UmbracoLicenses\%(RecursiveDir)%(Filename)%(Extension)"
      Condition="!Exists('$(ProjectDir)App_Plugins\UmbracoLicenses\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(UmbracoConfigFolderSecrets)"
      DestinationFiles="$(ProjectDir)config\%(Filename)%(Extension)"
      Condition="!Exists('$(ProjectDir)config\%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(UmbracoCloudWebConfigSecrets)"
      DestinationFiles="$(ProjectDir)%(Filename)%(Extension)"
      Condition="!Exists('$(ProjectDir)%(Filename)%(Extension)')" />

    <!-- Always overwrite these files with the version from Umbraco Cloud -->
    <Copy SourceFiles="@(UmbracoDeploy)"
      DestinationFiles="$(ProjectDir)App_Plugins\Deploy\%(RecursiveDir)%(Filename)%(Extension)" />
    <Copy SourceFiles="@(UmbracoDeployDLLs)"
      DestinationFiles="$(ProjectDir)bin\%(Filename)%(Extension)" />
    <Copy SourceFiles="@(UmbracoDeployConfig)"
      DestinationFiles="$(ProjectDir)config\%(Filename)%(Extension)" />
    <Copy SourceFiles="@(UmbracoCloudWebConfig)"
      DestinationFiles="$(ProjectDir)%(Filename)%(Extension)" />
  </Target>

  <Target Name="StoolballTriggerUmbracoDeploySync" BeforeTargets="AfterBuild" Condition="!Exists('$(ProjectDir)data/deploy')">
    <!-- Create a 0-byte file that Umbraco Deploy looks for to trigger a sync of 
         the *.uda files on disk into the Umbraco database -->
    <Touch Files="$(ProjectDir)data/deploy" AlwaysCreate="true">
      <Output
          TaskParameter="TouchedFiles"
          ItemName="FilesTouched"/>
    </Touch>
  </Target>

  <Target Name="StoolballTransformuSynconfig" AfterTargets="StoolballCopyFilesFromUmbracoCloud">
    <!-- Applies changes to uSync8.config on build from XDT transforms so that the unaltered uSync8.config 
         can always be copied from the uSync package. -->
    <PropertyGroup>
      <OriginaluSyncConfig>$(ProjectDir)\config\uSync8.config</OriginaluSyncConfig>
      <TempuSyncConfig>$(ProjectDir)\config\uSync8.temp.config</TempuSyncConfig>
    </PropertyGroup>
    <Copy SourceFiles="$(OriginaluSyncConfig)" DestinationFiles="$(TempuSyncConfig)" />
    <TransformXml Source="$(TempuSyncConfig)" Transform="$(ProjectDir)\config\uSync8.local.xdt.config" Destination="$(OriginaluSyncConfig)" StackTrace="true" />
    <Delete Files="$(TempuSyncConfig)" />
  </Target>

  <Target Name="StoolballTransformUmbracoSettingsConfig" AfterTargets="StoolballCopyFilesFromUmbracoCloud">
    <!-- Applies changes to umbracoSettings.config on build from XDT transforms so that the unaltered umbracoSettings.config 
         can always be copied from the UmbracoCms package. -->
    <PropertyGroup>
      <OriginalUmbracoSettingsConfig>$(ProjectDir)\config\umbracoSettings.config</OriginalUmbracoSettingsConfig>
      <TempUmbracoSettingsConfig>$(ProjectDir)\config\umbracoSettings.temp.config</TempUmbracoSettingsConfig>
    </PropertyGroup>
    <Copy SourceFiles="$(OriginalUmbracoSettingsConfig)" DestinationFiles="$(TempUmbracoSettingsConfig)" />
    <TransformXml Source="$(TempUmbracoSettingsConfig)" Transform="$(ProjectDir)\config\umbracoSettings.local.xdt.config" Destination="$(OriginalUmbracoSettingsConfig)" StackTrace="true" />
    <Delete Files="$(TempUmbracoSettingsConfig)" />
  </Target>

  <Target Name="StoolballTransformTinyMCEConfig" AfterTargets="StoolballCopyFilesFromUmbracoCloud">
    <!-- Applies changes to tinyMceConfig.config on build from XDT transforms so that the unaltered tinyMceConfig.config 
         can always be copied from the UmbracoCms package. -->
    <PropertyGroup>
      <OriginalTinyMceConfig>$(ProjectDir)\config\tinyMceConfig.config</OriginalTinyMceConfig>
      <TempTinyMceConfig>$(ProjectDir)\config\tinyMceConfig.temp.config</TempTinyMceConfig>
    </PropertyGroup>
    <Copy SourceFiles="$(OriginalTinyMceConfig)" DestinationFiles="$(TempTinyMceConfig)" />
    <TransformXml Source="$(TempTinyMceConfig)" Transform="$(ProjectDir)\config\tinyMceConfig.local.xdt.config" Destination="$(OriginalTinyMceConfig)" StackTrace="true" />
    <Delete Files="$(TempTinyMceConfig)" />
  </Target>

  <Target Name="StoolballUmbracoFormsConfig" AfterTargets="StoolballCopyFilesFromUmbracoCloud">
    <!-- Applies changes to UmbracoForms.config on build from XDT transforms so that the unaltered UmbracoForms.config 
         can always be copied from the UmbracoForms package. -->
    <PropertyGroup>
      <OriginalUmbracoFormsConfig>$(ProjectDir)\App_Plugins\UmbracoForms\UmbracoForms.config</OriginalUmbracoFormsConfig>
      <TempUmbracoFormsConfig>$(ProjectDir)\App_Plugins\UmbracoForms\UmbracoForms.temp.config</TempUmbracoFormsConfig>
    </PropertyGroup>
    <Copy SourceFiles="$(OriginalUmbracoFormsConfig)" DestinationFiles="$(TempUmbracoFormsConfig)" />
    <TransformXml Source="$(TempUmbracoFormsConfig)" Transform="$(ProjectDir)\Forms\UmbracoForms.local.xdt.config" Destination="$(OriginalUmbracoFormsConfig)" StackTrace="true" />
    <Delete Files="$(TempUmbracoFormsConfig)" />
  </Target>

  <Target Name="StoolballTransformWebConfig" AfterTargets="StoolballCopyFilesFromUmbracoCloud">
    <!-- Applies changes to Web.config on build from XDT transforms so that the unaltered Web.config 
         can always be copied from the Umbraco Cloud repository. -->
    <PropertyGroup>
      <OriginalWebConfig>$(ProjectDir)Web.config</OriginalWebConfig>
      <TempWebConfig>$(ProjectDir)Web.temp.config</TempWebConfig>
      <TemplateProductionTransform>$(ProjectDir)Web.live.xdt.template.config</TemplateProductionTransform>
      <ActualProductionTransform>$(ProjectDir)Web.live.xdt.config</ActualProductionTransform>
      <PermissionsPolicy>accelerometer=(),ambient-light-sensor=(),autoplay=(),battery=(),camera=(),cross-origin-isolated=(),display-capture=(),document-domain=(),encrypted-media=(),execution-while-not-rendered=(),execution-while-out-of-viewport=(),fullscreen=(),geolocation=(),gyroscope=(),magnetometer=(),microphone=(),midi=(),navigation-override=(),payment=(),picture-in-picture=(),publickey-credentials-get=(),screen-wake-lock=(),sync-xhr=(),usb=(),web-share=(),xr-spatial-tracking=()</PermissionsPolicy>
      <TemplateAppInsightsConfig>$(ProjectDir)ApplicationInsights.template.config</TemplateAppInsightsConfig>
      <ActualAppInsightsConfig>$(ProjectDir)ApplicationInsights.config</ActualAppInsightsConfig>
    </PropertyGroup>
    <Copy SourceFiles="$(OriginalWebConfig)" DestinationFiles="$(TempWebConfig)" />
    <TransformXml Source="$(TempWebConfig)" Transform="$(ProjectDir)\Web.local.xdt.config" Destination="$(OriginalWebConfig)" StackTrace="true" />
    <Delete Files="$(TempWebConfig)" />

    <Copy SourceFiles="$(OriginalWebConfig)" DestinationFiles="$(TempWebConfig)" Condition="Exists('$(ProjectDir)\Secret-DataMigrationApiKey.Web.local.xdt.config')" />
    <TransformXml Source="$(TempWebConfig)" Transform="$(ProjectDir)\Secret-DataMigrationApiKey.Web.local.xdt.config" Destination="$(OriginalWebConfig)" StackTrace="true" Condition="Exists('$(ProjectDir)\Secret-DataMigrationApiKey.Web.local.xdt.config')" />
    <Delete Files="$(TempWebConfig)" Condition="Exists('$(ProjectDir)\Secret-DataMigrationApiKey.Web.local.xdt.config')" />
    <Warning Text="$(ProjectDir)\Secret-DataMigrationApiKey.Web.local.xdt.config not found. Data migration will not work. This is probably because you're using an Umbraco Cloud trial account." Condition="!Exists('$(ProjectDir)\Secret-DataMigrationApiKey.Web.local.xdt.config')"/>

    <Copy SourceFiles="$(OriginalWebConfig)" DestinationFiles="$(TempWebConfig)" Condition="Exists('$(ProjectDir)\Secret-GoogleMapsApiKey.Web.local.xdt.config')" />
    <TransformXml Source="$(TempWebConfig)" Transform="$(ProjectDir)\Secret-GoogleMapsApiKey.Web.local.xdt.config" Destination="$(OriginalWebConfig)" StackTrace="true" Condition="Exists('$(ProjectDir)\Secret-GoogleMapsApiKey.Web.local.xdt.config')" />
    <Delete Files="$(TempWebConfig)" Condition="Exists('$(ProjectDir)\Secret-GoogleMapsApiKey.Web.local.xdt.config')" />
    <Warning Text="$(ProjectDir)\Secret-GoogleMapsApiKey.Web.local.xdt.config not found. Google maps will not load. This is probably because you're using an Umbraco Cloud trial account." Condition="!Exists('$(ProjectDir)\Secret-GoogleMapsApiKey.Web.local.xdt.config')"/>

    <TransformXml Source="$(TemplateAppInsightsConfig)" Transform="$(ProjectDir)\Secret-InstrumentationKey.ApplicationInsights.local.xdt.config" Destination="$(ActualAppInsightsConfig)" StackTrace="true" Condition="Exists('$(ProjectDir)\Secret-InstrumentationKey.ApplicationInsights.local.xdt.config')"  />
    <Warning Text="$(ProjectDir)\Secret-InstrumentationKey.ApplicationInsights.local.xdt.config not found. To set up reporting to Application Insights copy ApplicationInsights.xdt.template.config to Secret-InstrumentationKey.ApplicationInsights.local.xdt.config and add your instrumentation key." Condition="!Exists('$(ProjectDir)\Secret-InstrumentationKey.ApplicationInsights.local.xdt.config')"/>

    <!-- Replace tokens that appear in the generated Web.config, to avoid duplication in the XDT file -->
    <ReplaceFileText
      InputFilename="$(OriginalWebConfig)"
      OutputFilename="$(OriginalWebConfig)"
      MatchExpression="__PERMISSIONS_POLICY__"
      ReplacementText="$(PermissionsPolicy)" />

    <!-- Create $(ActualProductionTransform) file from $(TemplateProductionTransform), 
         replacing tokens in the template, again to avoid duplication in the XDT file -->
    <Copy SourceFiles="$(TemplateProductionTransform)" DestinationFiles="$(ActualProductionTransform)" />

    <ReplaceFileText
          InputFilename="$(ActualProductionTransform)"
          OutputFilename="$(ActualProductionTransform)"
          MatchExpression="__PERMISSIONS_POLICY__"
          ReplacementText="$(PermissionsPolicy)" />
  </Target>
</Project>