@import "../Content/bootstrap/_functions.scss";
@import "../Content/bootstrap/_mixins.scss";
@import "../Content/bootstrap/_variables.scss";
@import "../Content/bootstrap/_tables.scss";

@mixin numeric-value {
    text-align: right;
    white-space: nowrap;
}

/* Bootstrap removes all styling from tables because they're used in calendars etc. 
   Bootstrap tables have .table applied but you can't do that in TinyMCE for Umbraco as configured by default.
   @extend .table so that tables have Bootstrap table styles by default.
*/
table {
  @extend .table;
  border-bottom: $table-border-width solid $table-border-color;
}

// Display the caption as a heading for the table, not a footnote like in academic text
caption {
    caption-side: top;
    background: theme-color("primary");
    color: $white;
    padding: $spacer*.75;
    font-weight: bold;
    font-size: 1.2rem;
    border-radius: $border-radius $border-radius 0 0;
}

// Table header rows are reversed by default
table thead th, table thead td {
    background: $table-dark-bg;
    color: $table-dark-color;
    border-bottom: none;
}

// Numeric values should be right-aligned so that figure columns line up
td.numeric,
th.numeric {
    @include numeric-value;
}

/* Apply .table-as-cards to a <table> to enable transformation of each row to a card format, with a .table-as-cards-reset-* class to return to standard table formatting.

   .table-as-cards expects the each cell in a body row to have a data-label attribute repeating the column heading, because the column headings are hidden.
   Omit the data-label attribute from the first cell in a row to have it act like a rowspan introducing all the other cells.

   Typical example:
   
    <table class="table-as-cards">
    <thead>
        <tr>
            <th scope="col">Heading 1</th>
            <th scope="col">Heading 2</th>
            <th scope="col">Heading 3</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th scope="row">Row heading</th>
            <td data-label="Heading 2">Data</td>
            <td data-label="Heading 3">Data</td>
        </tr>
    </tbody>
    </table>
*/
.table-as-cards thead {
  @extend .sr-only; // Needs to remain in the accessibility tree for headers to be announced by screen readers
}

// Each cell which has data-label applied gets transformed into a flex container, where the flex items are its ::before pseudo-element and the original contents
// This creates a miniature table row appearance, with the ::before as the row heading and the original contents as the data
.table-as-cards [data-label] {
    display: flex;
}

// The ::before pseudo-element is acting like a row heading cell using the heading in the data-label attribute, so style it like a heading.
// padding-right adds space between it and the original cell contents.
.table-as-cards [data-label]::before {
    content: attr(data-label);
    display: inline-block;
    font-weight: bold;
    width: 50%;
    text-align: left;
    margin-right: $table-cell-padding;
}

// Preserve the text-align: right of .numeric when it is applied. Otherwise it's just left-aligned after the width of the ::before pseudo-element above
.table-as-cards [data-label].numeric::before {
    flex-grow: 1;
}

@mixin table-as-cards-reset-thead {
    position: static; // undo .sr-only
}

@mixin table-as-cards-reset-label {
    display: table-cell;
}

@mixin table-as-cards-reset-before {
    content: none;
}

@include media-breakpoint-up(sm) {
    // When .table-as-cards is in use, it might only be appropriate to apply .numeric when the table returns to a standard display
    td.numeric-sm,
    th.numeric-sm {
        @include numeric-value;
    }
    // Reset everything that .table-as-cards did, so that the table is now displayed normally
    .table-as-cards.table-as-cards-reset-sm thead {
        @include table-as-cards-reset-thead;
    }

    .table-as-cards.table-as-cards-reset-sm [data-label] {
        @include table-as-cards-reset-label;
    }

    .table-as-cards.table-as-cards-reset-sm [data-label]::before {
        @include table-as-cards-reset-before;
    }
}

@include media-breakpoint-up(md) {
    // Reset everything that .table-as-cards did, so that the table is now displayed normally
    .table-as-cards.table-as-cards-reset-md thead {
        @include table-as-cards-reset-thead;
    }

    .table-as-cards.table-as-cards-reset-md [data-label] {
        @include table-as-cards-reset-label;
    }

    .table-as-cards.table-as-cards-reset-md [data-label]::before {
        @include table-as-cards-reset-before;
    }
}
