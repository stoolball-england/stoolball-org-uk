@inherits UmbracoViewPage<StatisticsViewModel<PlayerInnings>>
@inject IStatisticsFilterHumanizer humanizer
@using Stoolball.Statistics
@using Stoolball.Web.Filtering
@using Stoolball.Web.Statistics.Models
@using Stoolball.Matches
@{
    SmidgeHelper.RequiresCss(new CssFile("/css/statistics.min.css") { Order = 100 });
    SmidgeHelper.RequiresJs(new JavaScriptFile("/js/filter.js") { Order = 100 });
    SmidgeHelper.RequiresCss(new CssFile("/css/filter.min.css") { Order = 100 });
    if (Model.AppliedFilter.Player != null)
    {
        Model.ShowPlayerColumn = false;
    }
}
@section canonical {@await Html.PartialAsync("_CanonicalUrl", new[] { "page" })}
@section head {
    @if (Model.AppliedFilter.Paging.PageNumber == 1)
    {
        <meta name="robots" content="index, nofollow">
    }
    else
    {
        <meta name="robots" content="noindex, nofollow">
    }
}
<div class="container-xl">
    <h1>Highest individual scores@(humanizer.MatchingFixedFilter(Model.AppliedFilter))</h1>
    
    @await Html.PartialAsync("_StatisticsTip")

    <ul class="nav nav-tabs">
        <li class="nav-item nav-item-admin">
            <button type="button" class="nav-link nav-link-filter">Edit filter</button>
        </li>
    </ul>
    @await Html.PartialAsync("_Filters", new FilterViewModel
    {
        FilteredItemTypeSingular = "Score",
        FilteredItemTypePlural = "Scores",
        FilterDescription = Model.FilterDescription,
        from = Model.AppliedFilter.FromDate,
        to = Model.AppliedFilter.UntilDate
    })

    @if (Model.Results.Any())
    {
        @await Html.PartialAsync("_StatisticsBasis")
    }
    else
    {
        @await Html.PartialAsync("_NoData")
    }
    @await Html.PartialAsync("_IndividualScores")
</div>