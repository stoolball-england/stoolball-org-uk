@inherits UmbracoViewPage<Stoolball.Web.Schools.SchoolsViewModel>
@using Humanizer
@using System.Linq
@using Stoolball.Teams
@section canonical {@await Html.PartialAsync("_CanonicalUrl", new[] { "page", "q" })}
<div class="container-xl">
    <h1>
        @Stoolball.Constants.Pages.Schools
        @if (!string.IsNullOrEmpty(Model.Filter.Query))
        {
            @: matching '@Model.Filter.Query'
        }
    </h1>

    <form method="get" action="@Context.Request.Path" class="form-inline form-search">
        <label class="sr-only" for="school-search">School name, town or village</label>
        <input type="search" class="form-control" id="school-search" name="q" value="@Model.Filter.Query" />
        <button type="submit" class="btn btn-primary">Search</button>
    </form>

    @if (Model.Listings.Any())
    {
<dl>
    @foreach (var school in Model.Listings)
    {
        var detail = string.Empty;

        var playerTypes = school.Teams.Select(x => x.PlayerType).Distinct().ToList();
        playerTypes.Sort(); // by id, which is consistent with Teams.cshtml
        var playerTypeText = $"{playerTypes.Select((value, index) => value.ToString().Replace("Junior", string.Empty).Humanize(LetterCasing.LowerCase)).Humanize()}";

        var active = school.ActiveTeams();
        if (active.Count == 0)
        {
            detail = "No active teams or clubs.";
        }
        else if (active.Count == 1)
        {
            detail = $"One {playerTypeText} {(active.First().TeamType == TeamType.SchoolClub ? "club" : "team")}.";
        }
        else
        {
            var clubCount = active.Count(x => x.TeamType == TeamType.SchoolClub);
            var teamsOrClubs = string.Empty;
            if (clubCount == 0)
            {
                teamsOrClubs = "teams";
            }
            else if (clubCount < active.Count)
            {
                teamsOrClubs = "teams and clubs";
            }
            else
            {
                teamsOrClubs = "clubs";
            }
            detail = $"{active.Count.ToWords().Humanize(LetterCasing.Sentence)} {playerTypeText} {teamsOrClubs}.";
        }

        <dt class="list-results__title">@school.SchoolName</dt>
        <dd class="list-results__detail">@detail</dd>
    }
</dl>
    }
    @await Html.PartialAsync("_Paging", Model.Filter.Paging)
</div>