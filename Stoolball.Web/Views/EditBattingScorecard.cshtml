@inherits Umbraco.Web.Mvc.UmbracoViewPage<EditScorecardViewModel>
@using ClientDependency.Core.Mvc
@using Stoolball.Web.Matches
@using Stoolball.Security
@using Stoolball.Matches
@using Stoolball.Teams
@using Humanizer
@section head {
    <meta name="robots" content="noindex,follow" />
}
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("~/scripts/jquery.validate.min.js");
    Html.RequiresJs("~/scripts/jquery.validate.unobtrusive.min.js");

    Html.RequiresJs("~/js/libs/jquery.autocomplete.min.js", 50);
    Html.RequiresCss("~/css/autocomplete.min.css");

    Html.RequiresJs("~/matches/player-autocomplete.js", 70);
    Html.RequiresJs("~/matches/edit-batting-scorecard.js");

    Html.RequiresCss("~/css/steps.min.css");
    Html.RequiresCss("~/css/scorecards.min.css");
}

<h1>Edit @Model.Match.MatchFullName(x => Model.DateFormatter.FormatDate(x.LocalDateTime, false, false, false))</h1>

@if (Model.IsAuthorized[AuthorizedAction.EditMatchResult])
{
    using (Html.BeginUmbracoForm<EditBattingScorecardSurfaceController>
        ("UpdateMatch"))
    {
        @Html.AntiForgeryToken()

        <ol class="steps">
            <li class="steps__completed"><em class="sr-only">Start of play</em></li>
            @{
                for (var i = 0; i < Model.Match.MatchInnings.Count; i++)
                {
                    if (Model.InningsOrderInMatch < (i + 1))
                    {
                        <li><span class="sr-only">@((i + 1).Ordinalize()) innings batting</span></li>
                        <li><span class="sr-only">@((i + 1).Ordinalize()) innings bowling</span></li>
                    }
                    else if (Model.InningsOrderInMatch == (i + 1))
                    {
                        <li aria-current="step"><span class="sr-only">@((i + 1).Ordinalize()) innings batting</span></li>
                        <li><span class="sr-only">@((i + 1).Ordinalize()) innings bowling</span></li>
                    }
                    else if (Model.InningsOrderInMatch > (i + 1))
                    {
                        <li class="steps__completed"><span class="sr-only">@((i + 1).Ordinalize()) innings batting</span></li>
                        <li class="steps__completed"><span class="sr-only">@((i + 1).Ordinalize()) innings bowling</span></li>
                    }
                }
            }
            <li><span class="sr-only">Result</span></li>
        </ol>

        <button class="btn btn-primary sr-only">Save and continue &gt;</button>

        @Html.ValidationSummary(false)
                var howOutItems = new SelectListItem[]
                {
            new SelectListItem { Text = DismissalType.DidNotBat.Humanize(LetterCasing.LowerCase), Value = (DismissalType.DidNotBat).ToString() },
            new SelectListItem { Text = DismissalType.NotOut.Humanize(LetterCasing.LowerCase), Value = (DismissalType.NotOut).ToString() },
            new SelectListItem { Text = DismissalType.Caught.Humanize(LetterCasing.LowerCase), Value = (DismissalType.Caught).ToString() },
            new SelectListItem { Text = DismissalType.Bowled.Humanize(LetterCasing.LowerCase), Value = (DismissalType.Bowled).ToString() },
            new SelectListItem { Text = DismissalType.CaughtAndBowled.Humanize(LetterCasing.LowerCase), Value = (DismissalType.CaughtAndBowled).ToString() },
            new SelectListItem { Text = DismissalType.RunOut.Humanize(LetterCasing.LowerCase).Replace("run out", "run-out"), Value = (DismissalType.RunOut).ToString() },
            new SelectListItem { Text = DismissalType.BodyBeforeWicket.Humanize(LetterCasing.LowerCase), Value = (DismissalType.BodyBeforeWicket).ToString() },
            new SelectListItem { Text = DismissalType.HitTheBallTwice.Humanize(LetterCasing.LowerCase), Value = (DismissalType.HitTheBallTwice).ToString() },
            new SelectListItem { Text = DismissalType.TimedOut.Humanize(LetterCasing.LowerCase), Value = (DismissalType.TimedOut).ToString() },
            new SelectListItem { Text = DismissalType.RetiredHurt.Humanize(LetterCasing.LowerCase), Value = (DismissalType.RetiredHurt).ToString() },
            new SelectListItem { Text = DismissalType.Retired.Humanize(LetterCasing.LowerCase), Value = (DismissalType.Retired).ToString() },
            new SelectListItem { Text = "not known", Value = string.Empty },
                };
                var wicketsItems = new List<SelectListItem>();
                for (var i = 0; i < Model.Match.PlayersPerTeam; i++)
                {
                    wicketsItems.Add(new SelectListItem { Text = i == Model.Match.PlayersPerTeam-1 ? "all out" : i.ToInvariantString(), Value = i.ToInvariantString() });
                }

        <p class="scorecard__full-name-hint d-none alert alert-info"><svg aria-hidden="true" focusable="false" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 352 512" width="15" height="20"><path fill="currentColor" d="M176 80c-52.94 0-96 43.06-96 96 0 8.84 7.16 16 16 16s16-7.16 16-16c0-35.3 28.72-64 64-64 8.84 0 16-7.16 16-16s-7.16-16-16-16zM96.06 459.17c0 3.15.93 6.22 2.68 8.84l24.51 36.84c2.97 4.46 7.97 7.14 13.32 7.14h78.85c5.36 0 10.36-2.68 13.32-7.14l24.51-36.84c1.74-2.62 2.67-5.7 2.68-8.84l.05-43.18H96.02l.04 43.18zM176 0C73.72 0 0 82.97 0 176c0 44.37 16.45 84.85 43.56 115.78 16.64 18.99 42.74 58.8 52.42 92.16v.06h48v-.12c-.01-4.77-.72-9.51-2.15-14.07-5.59-17.81-22.82-64.77-62.17-109.67-20.54-23.43-31.52-53.15-31.61-84.14-.2-73.64 59.67-128 127.95-128 70.58 0 128 57.42 128 128 0 30.97-11.24 60.85-31.65 84.14-39.11 44.61-56.42 91.47-62.1 109.46a47.507 47.507 0 0 0-2.22 14.3v.1h48v-.05c9.68-33.37 35.78-73.18 52.42-92.16C335.55 260.85 352 220.37 352 176 352 78.8 273.2 0 176 0z"></path></svg> Full names, if you know them, are better for comparing players.</p>

        <table class="table batting-scorecard batting-scorecard-editor">
            <caption>@Model.CurrentInnings.BattingTeam.Team.TeamName's batting</caption>
            <thead>
                <tr>
                    <th scope="col">Batter</th>
                    <th scope="col">How out</th>
                    <th scope="col">Caught/run-out by</th>
                    <th scope="col">Bowler</th>
                    <th scope="col" class="numeric">Runs</th>
                    <th scope="col" class="numeric">Balls</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < (Model.Match.PlayersPerTeam); i++)
                {
                    <tr>
                        <th scope="row">@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].PlayerIdentity.PlayerIdentityName, new { autocomplete = "off", @class = "scorecard__player-name", data_team = Model.CurrentInnings.BattingTeam.Team.TeamId.ToString() })</th>
                        <td>@Html.DropDownListFor(m => Model.CurrentInnings.PlayerInnings[i].HowOut, new SelectList(howOutItems, "Value", "Text", Model.CurrentInnings.PlayerInnings[i].HowOut.HasValue ? Model.CurrentInnings.PlayerInnings[i].HowOut.ToString() : string.IsNullOrEmpty(Model.CurrentInnings.PlayerInnings[i].PlayerIdentity.PlayerIdentityName) ? DismissalType.DidNotBat.ToString() : string.Empty))</td>
                        <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].DismissedBy.PlayerIdentityName, new { autocomplete = "off", @class = "scorecard__player-name", data_team = Model.CurrentInnings.BowlingTeam.Team.TeamId.ToString() })</td>
                        <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].Bowler.PlayerIdentityName, new { autocomplete = "off", @class = "scorecard__player-name", data_team = Model.CurrentInnings.BowlingTeam.Team.TeamId.ToString() })</td>
                        <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].RunsScored, new { autocomplete = "off", type = "number", data_val_number = $"The runs for the {(i + 1).Ordinalize()} batter must be a number.", min = "0", data_msg_min = $"The runs for the {(i + 1).Ordinalize()} batter must be a number, 0 or more", @class = "scorecard__runs" })</td>
                        <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].BallsFaced, new { autocomplete = "off", type = "number", data_val_number = $"The balls faced for the {(i + 1).Ordinalize()} batter must be a number.", min = "0", data_msg_min = $"The balls faced for the {(i + 1).Ordinalize()} batter must be a number, 0 or more", @class = "scorecard__runs" })</td>
                    </tr>
                }
                <tr class="extras">
                    <th colspan="4">@PlayerRole.Byes.Humanize()</th>
                    <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[Model.CurrentInnings.PlayerInnings.Count - 4].RunsScored, new { autocomplete = "off", type = "number", data_val_number = $"{PlayerRole.Byes.Humanize()} must be a number.", min = "0", data_msg_min = $"{PlayerRole.Byes.Humanize()} must be a number, 0 or more", @class = "scorecard__runs" })</td>
                    <td></td>
                </tr>
                <tr class="extras">
                    <th colspan="4">@PlayerRole.Wides.Humanize()</th>
                    <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[Model.CurrentInnings.PlayerInnings.Count - 3].RunsScored, new { autocomplete = "off", type = "number", data_val_number = $"{PlayerRole.Wides.Humanize()} must be a number.", min = "0", data_msg_min = $"{PlayerRole.Wides.Humanize()} must be a number, 0 or more", @class = "scorecard__runs" })</td>
                    <td></td>
                </tr>
                <tr class="extras">
                    <th colspan="4">@PlayerRole.NoBalls.Humanize()</th>
                    <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[Model.CurrentInnings.PlayerInnings.Count - 2].RunsScored, new { autocomplete = "off", type = "number", data_val_number = $"{PlayerRole.NoBalls.Humanize()} must be a number.", min = "0", data_msg_min = $"{PlayerRole.NoBalls.Humanize()} must be a number, 0 or more", @class = "scorecard__runs" })</td>
                    <td></td>
                </tr>
                <tr class="extras">
                    <th colspan="4">@PlayerRole.BonusOrPenaltyRuns.Humanize()</th>
                    <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[Model.CurrentInnings.PlayerInnings.Count - 1].RunsScored, new { autocomplete = "off", type = "number", data_val_number = $"{PlayerRole.BonusOrPenaltyRuns.Humanize()} must be a number.", @class = "scorecard__runs" })</td>
                    <td></td>
                </tr>
                <tr class="totals">
                    <th scope="row" colspan="4">Total</th>
                    <td>@Html.TextBoxFor(m => Model.CurrentInnings.Runs, new { autocomplete = "off", type = "number", data_val_number = $"The total must be a number.", @class = "scorecard__runs" })</td>
                    <td></td>
                </tr>
                <tr class="totals">
                    <th scope="row" colspan="4">Wickets</th>
                    <td>@Html.DropDownListFor(m => Model.CurrentInnings.Wickets, new SelectList(wicketsItems, "Value", "Text", Model.CurrentInnings.Wickets), string.Empty)</td>
                    <td></td>
                </tr>
            </tbody>
        </table>
        <script type="text/x-template" id="innings-template">
            <table>
                <tr>
                    <th scope="row"><input autocomplete="off" class="scorecard__player-name" data-team="@Model.CurrentInnings.BattingTeam.Team.TeamId.ToString()" name="CurrentInnings.PlayerInnings[0].PlayerIdentity.PlayerIdentityName" type="text" value="" /></th>
                    <td>
                        <select name="CurrentInnings.PlayerInnings[0].HowOut" required="required">
                            @foreach (var listItem in howOutItems)
                            {
                                <option value="@listItem.Value">@listItem.Text</option>
}
                        </select>
                    </td>
                    <td><input autocomplete="off" class="scorecard__player-name" data-team="@Model.CurrentInnings.BowlingTeam.Team.TeamId.ToString()" name="CurrentInnings.PlayerInnings[0].DismissedBy.PlayerIdentityName" type="text" value="" /></td>
                    <td><input autocomplete="off" class="scorecard__player-name" data-team="@Model.CurrentInnings.BowlingTeam.Team.TeamId.ToString()" name="CurrentInnings.PlayerInnings[0].Bowler.PlayerIdentityName" type="text" value="" /></td>
                    <td><input autocomplete="off" class="scorecard__runs" data-val="true" data-msg-number="The runs for the [0th] batter must be a number." data-msg-min="The runs for the [0th] batter must be a number, 0 or more" min="0" name="CurrentInnings.PlayerInnings[0].RunsScored" type="number" value="" /></td>
                    <td><input autocomplete="off" class="scorecard__balls" data-val="true" data-msg-number="The balls faced for the [0th] batter must be a number." data-msg-min="The balls faced for the [0th] batter must be a number, 0 or more" min="0" name="CurrentInnings.PlayerInnings[0].BallsFaced" type="number" value="" /></td>
                </tr>
            </table>
        </script>

        <button class="btn btn-primary">Save and continue &gt;</button>
    }
}
else
{
    @Html.Partial("_Login")
}