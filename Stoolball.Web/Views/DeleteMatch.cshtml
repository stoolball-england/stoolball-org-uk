@inherits Umbraco.Web.Mvc.UmbracoViewPage<Stoolball.Web.Matches.DeleteMatchViewModel>
@using Humanizer
@using ClientDependency.Core.Mvc
@using Stoolball.Web.Matches
@using Stoolball.Matches
@using Stoolball.Security
@using Constants = Stoolball.Constants
@using Umbraco.Core.Composing
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("~/scripts/jquery.validate.min.js");
    Html.RequiresJs("~/scripts/jquery.validate.unobtrusive.min.js");
}
@section head {
    <meta name="robots" content="noindex,follow" />
}
<div class="container-xl">
    <h1>Delete @Html.MatchFullName(Model.Match, x => Model.DateTimeFormatter.FormatDate(x.LocalDateTime, false))</h1>

    @if (Model.IsAuthorized[AuthorizedAction.DeleteMatch])
    {
        if (!Model.Deleted)
        {
            <p>If you delete @Html.MatchFullName(Model.Match, x => Model.DateTimeFormatter.FormatDate(x.LocalDateTime, false)) you will:</p>
            <ul>
                @if (Model.Match.Teams.Count > 0)
                {
                    <li>remove this match from match listings for @Model.Match.Teams.Humanize(x => x.Team.TeamName)</li>
                }
                else
                {
                    <li>not affect any teams</li>
                }
                @if (Model.Match.Season != null)
                {
                    <li>remove this match from the @Model.Match.Season.SeasonFullName()</li>
                }
                else
                {
                    <li>not affect any competitions</li>
                }
                @if (Model.PlayerIdentities.Count > 0)
                {
                    <li>change batting, bowling and fielding statistics for both teams, affecting @("player".ToQuantity(Model.PlayerIdentities.Count))</li>
                }
                else
                {
                    <li>not affect any batting, bowling and fielding statistics</li>
                }
                @{
                    var playersAtRisk = Model.PlayerIdentities.Where(x => x.TotalMatches == 1).ToList();
                    if (playersAtRisk.Count > 0)
                    {
                        <li>delete @("player".ToQuantity(playersAtRisk.Count)) involved in only this match: @playersAtRisk.Humanize(x => x.PlayerIdentityName)</li>
                    }
                    else
                    {
                        <li>not delete any players</li>
                    }
                }
                @if (Model.Match.Awards.Count > 0)
                {
                    <li>remove @("player award".ToQuantity(Model.Match.Awards.Count)) from @Model.Match.Awards.Select(x => x.PlayerIdentity).Humanize(x => x.PlayerIdentityName)'s statistics</li>
                }
                else
                {
                    <li>not affect any player awards</li>
                }
                @if (Model.TotalComments > 0)
                {
                    <li>delete @("comment".ToQuantity(Model.TotalComments)), which may include records of outstanding performances</li>
                }
                else
                {
                    <li>not affect any comments</li>
                }
            </ul>
            <p><strong><strong>You cannot undo this.</strong></strong></p>


            using (Html.BeginUmbracoForm<DeleteMatchSurfaceController>
                       ("DeleteMatch"))
            {
                @Html.AntiForgeryToken()

                @Html.HiddenFor(m => Model.ConfirmDeleteRequest.RequiredText)
                <div class="form-group">
                    @Html.LabelFor(m => Model.ConfirmDeleteRequest.ConfirmationText, $"If you're sure you wish to continue, type '{Model.Match.MatchName}' into this box:")
                    @Html.TextBoxFor(m => Model.ConfirmDeleteRequest.ConfirmationText, new { @class = "form-control", required = "required", aria_describedby = "validation", autocorrect = "off", autocapitalize = "off", autocomplete = "off", spellcheck = "false" })
                    @Html.ValidationMessageFor(m => Model.ConfirmDeleteRequest.ConfirmationText, null, new { id = "validation" })
                </div>

                <button class="btn btn-danger btn-delete">Delete @Model.Match.MatchName</button>
            }
        }
        else
        {
            <p>@Model.Match.MatchName has been deleted.</p>
            if (Model.Match.Season != null)
            {
                <p><a class="btn btn-primary" href="@Model.Match.Season.SeasonRoute">Back to @Model.Match.Season.SeasonFullName()</a></p>
            }
            else
            {
                @*<p><a class="btn btn-primary btn-back" href="@Constants.Pages.MatchesUrl">Back to @Constants.Pages.Matches</a></p>*@
                <p><a href="@Constants.Pages.HomeUrl" class="btn btn-primary btn-back">Go back to the home page</a></p>
            }
        }
    }
    else
    {
        @Html.Partial("_Login")
    }
</div>