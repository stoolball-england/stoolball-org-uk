@inherits Umbraco.Web.Mvc.UmbracoViewPage<EditMatchFormatViewModel>
@using ClientDependency.Core.Mvc
@using Stoolball.Web.HtmlHelpers
@using Stoolball.Web.Matches
@using Stoolball.Security
@section head {
    <meta name="robots" content="noindex,follow" />
}
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("~/scripts/jquery.validate.min.js");
    Html.RequiresJs("~/scripts/jquery.validate.unobtrusive.min.js");
}
<div class="container-xl">
    <h1>Edit @Html.MatchFullName(Model.Match, x => Model.DateFormatter.FormatDate(x, false, false, false))</h1>

    @if (Model.IsAuthorized[AuthorizedAction.EditMatch])
    {
        using (Html.BeginUmbracoForm<EditMatchFormatSurfaceController>("UpdateMatch"))
        {
            @Html.AntiForgeryToken()

            if (Model.Match.StartTime <= DateTimeOffset.UtcNow)
            {
                <p class="alert alert-info alert-tip">You can add extra innings and overs but you cannot reduce them, because this match has already happened.</p>
            }

            <div class="form-group">
                @Html.LabelFor(m => Model.FormData.MatchInnings)
                <p class="form-text" id="innings-help"><small>Most matches have 2 innings, one per team.</small></p>
                @Html.TextBoxFor(m => Model.FormData.MatchInnings, new { @class = "form-control", aria_describedby = "innings-help innings-validation", @type = "number", min = (Model.Match.StartTime <= DateTimeOffset.UtcNow ? Model.FormData.MatchInnings : 2), step="2" })
                @Html.ValidationMessageFor(m => Model.FormData.MatchInnings, null, new { id = "innings-validation" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => Model.FormData.Overs, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
                @Html.TextBoxFor(m => Model.FormData.Overs, new { @class = "form-control", aria_describedby = "overs-validation", @type = "number", min = (Model.Match.StartTime <= DateTimeOffset.UtcNow ? Model.FormData.Overs : 1) })
                @Html.ValidationMessageFor(m => Model.FormData.Overs, null, new { id = "overs-validation" })
            </div>

            <button class="btn btn-primary">Save match</button>
        }
    }
    else
    {
        @Html.Partial("_Login")
    }
</div>