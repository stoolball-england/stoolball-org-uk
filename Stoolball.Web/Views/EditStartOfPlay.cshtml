@inherits Umbraco.Web.Mvc.UmbracoViewPage<EditStartOfPlayViewModel>
@using ClientDependency.Core.Mvc
@using Stoolball.Matches
@using Stoolball.Web.Matches
@using Humanizer
@section head {
    <meta name="robots" content="noindex,follow" />
}
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("~/scripts/jquery.validate.min.js");
    Html.RequiresJs("~/scripts/jquery.validate.unobtrusive.min.js");

    Html.RequiresJs("~/js/libs/jquery.autocomplete.min.js", 50);
    Html.RequiresCss("~/css/autocomplete.min.css");

    Html.RequiresCss("~/css/related-items.min.css");
    Html.RequiresJs("~/js/related-item.js");

    Html.RequiresCss("~/css/steps.min.css");
}

<h1>Edit @Model.Match.MatchFullName(x => Model.DateFormatter.FormatDate(x.LocalDateTime, false, false, false))</h1>

@if (Model.IsAuthorized)
{
    using (Html.BeginUmbracoForm<EditStartOfPlaySurfaceController>
        ("UpdateMatch"))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <ol class="steps">
            <li aria-current="step"><em class="sr-only">Start of play</em></li>
            @for (var i = 0; i < Model.Match.MatchInnings.Count; i++)
            {
                <li><span class="sr-only">@((i+1).Ordinalize()) innings batting</span></li>
                <li><span class="sr-only">@((i+1).Ordinalize()) innings bowling</span></li>
            }
            <li><span class="sr-only">Result</span></li>
        </ol>

        <h2>If the match went ahead</h2>

        <div class="form-group related-item">
            @Html.LabelFor(m => Model.MatchLocationName)
            @if (Model.MatchLocationId.HasValue)
            {
                <div class="related-item__selected">
                    <div class="related-item__selected__section">
                        @Html.TextBoxFor(m => Model.MatchLocationName, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                    <div class="related-item__delete related-item__selected__section">
                        @Html.HiddenFor(m => Model.MatchLocationId, new { @class = "related-item__data related-item__id" })
                        <button class="text-danger">@Html.Partial("_DeleteIcon", (Model.MatchLocationId.Value.ToString(), $"Remove {Model.MatchLocationName} from this match"))</button>
                    </div>
                </div>
                Model.MatchLocationName = string.Empty;
                @Html.TextBoxFor(m => Model.MatchLocationName, new
                {
                    @class = "form-control related-item__search",
                    placeholder = "Type the ground or sports centre name",
                    autocomplete = "off",
                    type = "search",
                    data_url = "/api/locations/autocomplete",
                    data_template = "location-template",
                    aria_label = "Type a ground or sports centre name add and press down arrow to select from the matching choices",
                    disabled = "disabled"
                })
            }
            else
            {
                @Html.TextBoxFor(m => Model.MatchLocationName, new
                {
                    @class = "form-control related-item__search",
                    placeholder = "Type the ground or sports centre name",
                    autocomplete = "off",
                    type = "search",
                    data_url = "/api/locations/autocomplete",
                    data_template = "location-template",
                    aria_label = "Type a ground or sports centre name add and press down arrow to select from the matching choices"
                })
            }
        </div>
        <script type="text/x-template" id="location-template">
            <div class="related-item__selected">
                <div class="related-item__selected__section">
                    <input type="text" readonly="readonly" value="{{value}}" class="form-control" id="MatchLocationName" name="MatchLocationName" />
                </div>
                <div class="related-item__delete related-item__selected__section">
                    <input name="MatchLocationId" class="related-item__data related-item__id" type="hidden" value="{{data}}" />
                    <button class="text-danger">@Html.Partial("_DeleteIcon", ("{{data}}", "Remove {{value}} from this match"))</button>
                </div>
            </div>
        </script>

        object tossWonByUnknownAttributes;
        if (Model.TossWonBy.HasValue)
        {
            tossWonByUnknownAttributes = new { @class = "custom-control-input", @id = "toss-won-by-unknown" };
        }
        else
        {
            tossWonByUnknownAttributes = new { @class = "custom-control-input", @id = "toss-won-by-unknown", @checked = "checked" };
        }
        <fieldset class="form-group">
            <legend>Who won the toss?</legend>
            <div class="custom-control custom-radio">
                @Html.RadioButtonFor(m => Model.TossWonBy, string.Empty, tossWonByUnknownAttributes)
                <label for="toss-won-by-unknown" class="custom-control-label">Don't know</label>
            </div>
            @foreach (var team in Model.Match.Teams)
            {
                <div class="custom-control custom-radio">
                    @Html.RadioButtonFor(m => Model.TossWonBy, team.MatchTeamId, new { @class = "custom-control-input", @id = $"toss-won-by-{team.MatchTeamId}" })
                    <label for="toss-won-by-@team.MatchTeamId" class="custom-control-label">@team.Team.TeamName</label>
                </div>
            }
            @Html.ValidationMessageFor(m => Model.TossWonBy)
        </fieldset>

        object battedFirstUnknownAttributes;
        if (Model.BattedFirst.HasValue)
        {
            battedFirstUnknownAttributes = new { @class = "custom-control-input", @id = "batted-first-unknown" };
        }
        else
        {
            battedFirstUnknownAttributes = new { @class = "custom-control-input", @id = "batted-first-unknown", @checked = "checked" };
        }
        <fieldset class="form-group">
            <legend>Who batted first?</legend>
            <div class="custom-control custom-radio">
                @Html.RadioButtonFor(m => Model.BattedFirst, string.Empty, battedFirstUnknownAttributes)
                <label for="batted-first-unknown" class="custom-control-label">Don't know</label>
            </div>
            @foreach (var team in Model.Match.Teams)
            {
                <div class="custom-control custom-radio">
                    @Html.RadioButtonFor(m => Model.BattedFirst, team.MatchTeamId, new { @class = "custom-control-input", @id = $"batted-first-{team.MatchTeamId}" })
                    <label for="batted-first-@team.MatchTeamId" class="custom-control-label">@team.Team.TeamName</label>
                </div>
            }
            @Html.ValidationMessageFor(m => Model.BattedFirst)
        </fieldset>

        <h2>Or, if the match was not played</h2>

        object noResultAttributes;
        if (Model.Match.MatchResultType.HasValue && new List<MatchResultType> {
            MatchResultType.HomeWinByForfeit,
            MatchResultType.AwayWinByForfeit,
            MatchResultType.Postponed,
            MatchResultType.Cancelled,
            MatchResultType.AbandonedDuringPlayAndPostponed,
            MatchResultType.AbandonedDuringPlayAndCancelled
        }.Contains(Model.Match.MatchResultType.Value))
        {
            noResultAttributes = new { @class = "custom-control-input", @id = "MatchResultTypeUnknown" };
        }
        else
        {
            noResultAttributes = new { @class = "custom-control-input", @id = "MatchResultTypeUnknown", @checked = "checked" };
        }
        <fieldset class="form-group">
            <legend>Why not?</legend>
            <div class="custom-control custom-radio">
                @Html.RadioButtonFor(m => Model.Match.MatchResultType, -1, noResultAttributes)
                <label for="MatchResultTypeUnknown" class="custom-control-label">Not applicable – match went ahead</label>
            </div>
            <div class="custom-control custom-radio">
                @Html.RadioButtonFor(m => Model.Match.MatchResultType, MatchResultType.HomeWinByForfeit, new { @class = "custom-control-input", @id = MatchResultType.HomeWinByForfeit.ToString() })
                <label for="@MatchResultType.HomeWinByForfeit.ToString()" class="custom-control-label">@MatchResultType.HomeWinByForfeit.ToString().Humanize().Replace("Home", Model.Match.Teams.Single(x => x.TeamRole == TeamRole.Home).Team.TeamName)</label>
            </div>
            <div class="custom-control custom-radio">
                @Html.RadioButtonFor(m => Model.Match.MatchResultType, MatchResultType.AwayWinByForfeit, new { @class = "custom-control-input", @id = MatchResultType.AwayWinByForfeit.ToString() })
                <label for="@MatchResultType.AwayWinByForfeit.ToString()" class="custom-control-label">@MatchResultType.AwayWinByForfeit.ToString().Humanize().Replace("Away", Model.Match.Teams.Single(x => x.TeamRole == TeamRole.Away).Team.TeamName)</label>
            </div>
            <div class="custom-control custom-radio">
                @Html.RadioButtonFor(m => Model.Match.MatchResultType, MatchResultType.Postponed, new { @class = "custom-control-input", @id = MatchResultType.Postponed.ToString() })
                <label for="@MatchResultType.Postponed.ToString()" class="custom-control-label">@MatchResultType.Postponed.ToString().Humanize()</label>
            </div>
            <div class="custom-control custom-radio">
                @Html.RadioButtonFor(m => Model.Match.MatchResultType, MatchResultType.Cancelled, new { @class = "custom-control-input", @id = MatchResultType.Cancelled.ToString() })
                <label for="@MatchResultType.Cancelled.ToString()" class="custom-control-label">@MatchResultType.Cancelled.ToString().Humanize()</label>
            </div>
            <div class="custom-control custom-radio">
                @Html.RadioButtonFor(m => Model.Match.MatchResultType, MatchResultType.AbandonedDuringPlayAndPostponed, new { @class = "custom-control-input", @id = MatchResultType.AbandonedDuringPlayAndPostponed.ToString() })
                <label for="@MatchResultType.AbandonedDuringPlayAndPostponed.ToString()" class="custom-control-label">@MatchResultType.AbandonedDuringPlayAndPostponed.ToString().Humanize()</label>
            </div>
            <div class="custom-control custom-radio">
                @Html.RadioButtonFor(m => Model.Match.MatchResultType, MatchResultType.AbandonedDuringPlayAndCancelled, new { @class = "custom-control-input", @id = MatchResultType.AbandonedDuringPlayAndCancelled.ToString() })
                <label for="@MatchResultType.AbandonedDuringPlayAndCancelled.ToString()" class="custom-control-label">@MatchResultType.AbandonedDuringPlayAndCancelled.ToString().Humanize()</label>
            </div>
            @Html.ValidationMessageFor(m => Model.Match.MatchResultType, null, new { id = "result-type-validation" })
        </fieldset>

        <button class="btn btn-primary">Save match</button>
    }
}
else
{
    @Html.Partial("_Login")
}