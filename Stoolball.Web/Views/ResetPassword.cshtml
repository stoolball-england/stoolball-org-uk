@inherits UmbracoViewPage<ResetPassword>
@inject Stoolball.Email.IEmailProtector emailProtector
@using Stoolball.Web.Account
@await Html.PartialAsync("_JQueryValidate")
<div class="container-xl">
    <h1>@Model.Name</h1>

    @if (User.Identity?.IsAuthenticated ?? false)
    {
        @await Html.PartialAsync("_Logout")
    }
    else
    {
        @* Step 3: Respond to a click on the link sent by email *@
        if (Model.PasswordResetTokenValid)
        {
            @* Step 3a: Display a form to update the member's password *@
            using (Html.BeginUmbracoForm<ResetPasswordSurfaceController>("UpdatePassword"))
            {
                var resetPasswordUpdate = new ResetPasswordFormData();

                <div class="form-group">
                    @Html.LabelFor(m => resetPasswordUpdate.NewPassword, "New password")
                    @{ var describedBy = "form-new-password"; }
                    @if (!string.IsNullOrEmpty(Model.PasswordHelp))
                    {
                        describedBy = "form-new-password form-new-password-help";
                        <p class="form-text" id="form-new-password-help"><small>@Model.PasswordHelp</small></p>
                    }
                    @Html.PasswordFor(m => resetPasswordUpdate.NewPassword, new { @class = "form-control", required = "required", aria_describedby = describedBy, autocorrect = "off", autocapitalize = "off", autocomplete="new-password" })
                    @Html.ValidationMessageFor(m => resetPasswordUpdate.NewPassword, null, new { id = "form-new-password" })
                </div>

                <button class="btn btn-primary">@Model.UpdatePasswordButton</button>
            }
        }
        else
        {
            @* Step 3b: The token was not valid. Finish. *@
            @Html.ProtectEmailAddresses(emailProtector, Model.PasswordResetTokenInvalid)
        }
    }
</div>