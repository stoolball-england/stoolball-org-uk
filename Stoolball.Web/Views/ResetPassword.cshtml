@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.ResetPassword>
@using ContentModels = Umbraco.Web.PublishedModels;
@using ClientDependency.Core.Mvc
@using Stoolball.Web.Account
@using Stoolball.Web.Email
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("~/scripts/jquery.validate.min.js");
    Html.RequiresJs("~/scripts/jquery.validate.unobtrusive.min.js");
}
<h1>@Model.Name</h1>

@if (User.Identity.IsAuthenticated)
{
    @Html.Partial("_Logout")
}
else
{
    if (string.IsNullOrEmpty(Model.PasswordResetToken))
    {
        if (TempData["PasswordResetRequested"] == null)
        {
            @* Step 1: Display a form to request a password reset *@
            using (Html.BeginUmbracoForm<ResetPasswordSurfaceController>("RequestPasswordReset"))
            {
                @Html.AntiForgeryToken()
                var resetPasswordRequest = new ResetPasswordRequest();

                <div class="form-group">
                    @Html.LabelFor(m => resetPasswordRequest.Email, "Email")
                    @Html.TextBoxFor(m => resetPasswordRequest.Email, new { @class = "form-control", type = "email", required = "required", aria_describedby = "form-email", autocorrect="off", autocapitalize="off" })
                    @Html.ValidationMessageFor(m => resetPasswordRequest.Email, null, new { id = "form-email" })
                </div>
                <button class="btn btn-primary">@Model.ResetPasswordButton</button>
            }
        }
        else
        {
            @* Step 2: Confirm submit of the form to request a password reset *@
            @Html.ProtectEmailAddresses(Model.PasswordResetRequested.ToString(), TempData["Email"]?.ToString())
        }
    }
    else
    {
        if (TempData["PasswordResetSuccessful"] == null)
        {
            @* Step 3: Respond to a click on the link sent by email *@
            if (Model.PasswordResetTokenValid)
            {
                @* Step 3a: Display a form to update the member's password *@
                using (Html.BeginUmbracoForm<ResetPasswordSurfaceController>("UpdatePassword"))
                {
                    @Html.AntiForgeryToken()
                    var resetPasswordUpdate = new ResetPasswordUpdate
                    {
                        PasswordResetToken = Model.PasswordResetToken
                    };

                    @Html.HiddenFor(m => resetPasswordUpdate.PasswordResetToken)
                    <div class="form-group">
                        @Html.LabelFor(m => resetPasswordUpdate.NewPassword, "New password")
                        @{ var describedBy = "form-new-password"; }
                        @if (!string.IsNullOrEmpty(Model.PasswordHelp))
                        {
                            describedBy = "form-new-password form-new-password-help";
                            <p class="form-text" id="form-new-password-help"><small>@Model.PasswordHelp</small></p>
                        }
                        @Html.PasswordFor(m => resetPasswordUpdate.NewPassword, new { @class = "form-control", required = "required", aria_describedby = describedBy, autocorrect="off", autocapitalize="off" })
                        @Html.ValidationMessageFor(m => resetPasswordUpdate.NewPassword, null, new { id = "form-new-password" })
                    </div>
                    
                    <button class="btn btn-primary">@Model.UpdatePasswordButton</button>
                }
            }
            else
            {
                @* Step 3b: The token was not valid. Finish. *@
                @Html.ProtectEmailAddresses(Model.PasswordResetTokenInvalid)
            }
        }
        else
        {
            @* Step 4: Update password form processed *@
            if (Boolean.Parse(TempData["PasswordResetSuccessful"].ToString()))
            {
                @* Step 4a: Password was updated *@
                @Html.ProtectEmailAddresses(Model.PasswordResetSuccessful)
            }
            else
            {
                @* Step 4b: Password was not updated *@
                @Html.ProtectEmailAddresses(Model.PasswordResetFailed)
            }
        }
    }
}