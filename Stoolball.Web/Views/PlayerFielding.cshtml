@inherits Umbraco.Web.Mvc.UmbracoViewPage<PlayerFieldingViewModel>
@using ClientDependency.Core.Mvc
@using Umbraco.Core.Composing
@using Stoolball.Statistics
@using Stoolball.Web.Statistics
@using Stoolball.Matches
@using Stoolball.Web.Filtering
@{
    Html.RequiresCss("/statistics/statistics.min.css");
    Html.RequiresJs("/js/filter.js");
    Html.RequiresCss("/css/filter.min.css");

    var catches = new StatisticsViewModel<PlayerInnings>(Model, Services.UserService) { ShowCaption = true, AppliedFilter = Model.AppliedFilter };
    catches.Results.AddRange(Model.Catches);
    var runOuts = new StatisticsViewModel<PlayerInnings>(Model, Services.UserService) { ShowCaption = true, AppliedFilter = Model.AppliedFilter };
    runOuts.Results.AddRange(Model.RunOuts);

    var serialiser = Current.Factory.GetInstance<IStatisticsFilterQueryStringSerializer>();
    var queryString = serialiser.Serialize(Model.AppliedFilter, Model.DefaultFilter);
}
<div class="container-xl">
    @Html.Partial("_PlayerHeader")

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@Model.Player.PlayerRoute@(queryString)">Batting</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Player.PlayerRoute/bowling@(queryString)">Bowling</a>
        </li>
        <li class="nav-item">
            <em class="nav-link active">Fielding</em>
        </li>
        <li class="nav-item nav-item-admin">
            <button type="button" class="nav-link nav-link-filter">Edit filter</button>
        </li>
    </ul>
    @Html.Partial("_Filters", new FilterViewModel
{
    FilteredItemTypeSingular = "Statistics",
    FilteredItemTypePlural = "Statistics",
    FilterDescription = Model.FilterDescription,
    from = Model.AppliedFilter.FromDate,
    to = Model.AppliedFilter.UntilDate
})

    @if (Model.FieldingStatistics.TotalCatches == 0 && Model.FieldingStatistics.TotalRunOuts == 0)
    {
        @Html.Partial("_NoData")
    }
    else
    {
        <table class="table-as-cards table-as-cards-reset-sm">
            <thead>
                <tr>
                    <th scope="col">Catches</th>
                    <th scope="col">Most catches</th>
                    <th scope="col">Run-outs</th>
                    <th scope="col">Most run-outs</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Catches</span>@Model.FieldingStatistics.TotalCatches</td>
                    <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Most catches</span>@Model.FieldingStatistics.MostCatches</td>
                    <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Run-outs</span>@Model.FieldingStatistics.TotalRunOuts</td>
                    <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Most run-outs</span>@Model.FieldingStatistics.MostRunOuts</td>
                </tr>
            </tbody>
        </table>

        @Html.Partial("_Catches", catches)
        if (Model.FieldingStatistics.TotalCatches > catches.Results.Count)
        {
            <p><a href="@Request.Url.AbsolutePath.TrimEnd("/fielding")/catches@(queryString)">Catches – view all and filter</a></p>
        }
        @Html.Partial("_RunOuts", runOuts)
        if (Model.FieldingStatistics.TotalRunOuts > catches.Results.Count)
        {
            <p><a href="@Request.Url.AbsolutePath.TrimEnd("/fielding")/run-outs">Run-outs – view all</a></p>
        }
    }
</div>