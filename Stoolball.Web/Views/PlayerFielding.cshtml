@inherits UmbracoViewPage<PlayerFieldingViewModel>
@inject IStatisticsFilterQueryStringSerializer serialiser
@using Stoolball.Statistics
@using Stoolball.Teams
@using Stoolball.Web.Statistics.Models
@using Stoolball.Matches
@using Stoolball.Web.Filtering
@{
    SmidgeHelper.RequiresCss(new CssFile("/css/statistics.min.css") { Order = 100 });
    SmidgeHelper.RequiresJs(new JavaScriptFile("/js/filter.js") { Order = 100 });
    SmidgeHelper.RequiresCss(new CssFile("/css/filter.min.css") { Order = 100 });

    var catches = new StatisticsViewModel<PlayerInnings>(Model) { ShowCaption = true, AppliedFilter = Model.AppliedFilter };
    catches.Results.AddRange(Model.Catches);
    var runOuts = new StatisticsViewModel<PlayerInnings>(Model) { ShowCaption = true, AppliedFilter = Model.AppliedFilter };
    runOuts.Results.AddRange(Model.RunOuts);

    var queryString = serialiser.Serialize(Model.AppliedFilter, Model.DefaultFilter);

    var teams = Model.Player!.PlayerIdentities.OrderByDescending(x => x.TotalMatches).Select(x => x.Team).OfType<Team>().ToList().Distinct(new TeamEqualityComparer());
}
<div class="container-xl">
    @await Html.PartialAsync("_PlayerHeading", new PlayerHeadingViewModel { Heading = Model.Player!.PlayerName(), AlternativeNames = Model.Player.AlternativeNames() })

    <ul class="nav nav-tabs">
         <li class="nav-item">
            <a class="nav-link" href="@Model.Player!.PlayerRoute@(queryString)">Summary</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Player!.PlayerRoute/batting@(queryString)">Batting</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Player.PlayerRoute/bowling@(queryString)">Bowling</a>
        </li>
        <li class="nav-item">
            <em class="nav-link active">Fielding</em>
        </li>
        <li class="nav-item nav-item-admin">
            <button type="button" class="nav-link nav-link-filter">Edit filter</button>
        </li>
    </ul>
    @await Html.PartialAsync("_Filters", new FilterViewModel
    {
        FilteredItemTypePlural = "Statistics",
        FilterDescription = Model.FilterDescription,
        FromDate = Model.AppliedFilter.FromDate,
        UntilDate = Model.AppliedFilter.UntilDate,
        SupportsTeamFilter = true,
        TeamRoute = Model.AppliedFilter.Team?.TeamRoute,
        Teams = teams
    })

    @if (Model.FieldingStatistics.TotalCatches == 0 && Model.FieldingStatistics.TotalRunOuts == 0)
    {
        @await Html.PartialAsync("_NoData")
    }
    else
    {
        <table class="table-as-cards table-as-cards-reset-sm">
            <thead>
                <tr>
                    <th scope="col">Catches</th>
                    <th scope="col">Most catches</th>
                    <th scope="col">Run-outs</th>
                    <th scope="col">Most run-outs</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Catches</span>@Model.FieldingStatistics.TotalCatches</td>
                    <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Most catches</span>@Model.FieldingStatistics.MostCatches</td>
                    <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Run-outs</span>@Model.FieldingStatistics.TotalRunOuts</td>
                    <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Most run-outs</span>@Model.FieldingStatistics.MostRunOuts</td>
                </tr>
            </tbody>
        </table>

        @await Html.PartialAsync("_Catches", catches)
        if (Model.FieldingStatistics.TotalCatches > catches.Results.Count)
        {
            <p><a href="@Html.LinkToStatisticsTable("catches", queryString)">Catches – view all and filter</a></p>
        }
        @await Html.PartialAsync("_RunOuts", runOuts)
        if (Model.FieldingStatistics.TotalRunOuts > catches.Results.Count)
        {
            <p><a href="@Html.LinkToStatisticsTable("run-outs", queryString)">Run-outs – view all and filter</a></p>
        }
        @await Html.PartialAsync("_PlayerPerformances", new StatisticsViewModel<PlayerIdentityPerformance>(Model) { ShowLinkOnly = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter })
    }
</div>