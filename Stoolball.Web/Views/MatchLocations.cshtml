@inherits Umbraco.Web.Mvc.UmbracoViewPage<Stoolball.Web.MatchLocations.MatchLocationsViewModel>
@using Humanizer
@using System.Linq
<h1>
    @Stoolball.Constants.Pages.MatchLocations
    @if (!string.IsNullOrEmpty(Model.MatchLocationQuery.Query))
    {
        @: matching '@Model.MatchLocationQuery.Query'
    }
</h1>

<ul class="nav nav-tabs nav-tabs-has-add">
    <li class="nav-item">
        <em class="nav-link active">Search</em>
    </li>
    <li class="nav-item nav-item-admin">
        <a class="nav-link nav-link-add" href="/locations/add">Add ground or sports centre</a>
    </li>
</ul>

<form method="get" action="@Request.Url" class="form-inline form-search">
    <label class="sr-only" for="location-search">Match location name</label>
    <input type="search" class="form-control" id="location-search" name="q" value="@Model.MatchLocationQuery.Query" />
    <button type="submit" class="btn btn-primary">Search</button>
</form>

<dl>
    @foreach (var location in Model.MatchLocations)
    {
        <dt><a href="@location.MatchLocationRoute">@location.NameAndLocalityOrTownIfDifferent()</a></dt>
        <dd>
        @if (location.Teams.Count > 0)
        {
            var playerTypes = location.Teams.Select(x => x.PlayerType).Distinct().ToList();
            playerTypes.Sort(); // by id, which puts adult teams before junior
            @(playerTypes.Select((value, index) => value.Humanize(index > 0 ? LetterCasing.LowerCase : LetterCasing.Sentence)).Humanize())@:. @("team".ToQuantity(location.Teams.Count)).
        }
        else
        {
            <p>No active teams.</p>
        }
        </dd>
    }
</dl>
@if (Model.TotalMatchLocations > (Model.MatchLocationQuery.PageNumber * Model.MatchLocationQuery.PageSize))
{
    var query = HttpUtility.ParseQueryString(Request.Url.Query);
    query["page"] = (Model.MatchLocationQuery.PageNumber + 1).ToString(System.Globalization.CultureInfo.InvariantCulture);
    <p><a href="/locations?@query">Load more</a></p>
}