@inherits UmbracoViewPage<Stoolball.Web.MatchLocations.Models.MatchLocationViewModel>
@using Stoolball.Web.Matches.Models
@{
    SmidgeHelper.RequiresJs(new JavaScriptFile("/js/filter.js"){Order = 100});
    SmidgeHelper.RequiresCss(new CssFile("/css/filter.min.css"){Order = 100});
}
@section head {
    <meta name="robots" content="noindex,follow" />
}
<div class="container-xl">
    <h1>@Model.MatchLocation!.NameAndLocalityOrTownIfDifferent()</h1>

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@Model.MatchLocation.MatchLocationRoute">Summary</a>
        </li>
        <li class="nav-item">
            <em class="nav-link active">Matches</em>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.MatchLocation.MatchLocationRoute/statistics">Statistics</a>
        </li>
        <li class="nav-item nav-item-admin">
            <button type="button" class="nav-link nav-link-filter">Edit filter</button>
        </li>
    </ul>
    @await Html.PartialAsync("_Filters", new MatchFilterViewModel
{
    FilterDescription = Model.FilterDescription,
    FromDate = Model.AppliedMatchFilter.FromDate,
    UntilDate = Model.AppliedMatchFilter.UntilDate
})

    @if (Model.Matches.Matches.Count > 0)
    {
        @await Html.PartialAsync("_MatchList", Model.Matches)
    }
    else
    {
        <p>There are no matches at this location matching this filter.</p>
        <p>Find out how to <a href="/organise/website/">add matches and results to our website</a>.</p>
    }
    @await Html.PartialAsync("_MatchListSubscriptions", new MatchListSubscriptionsViewModel { BaseRoute = Model.MatchLocation.MatchLocationRoute, DefaultMatchFilter = Model.DefaultMatchFilter, AppliedMatchFilter = Model.AppliedMatchFilter })
</div>