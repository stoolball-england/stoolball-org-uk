@inherits UmbracoViewPage<Stoolball.Web.Teams.Models.TeamsViewModel>
@using Humanizer
@using System.Globalization
@using Stoolball.Teams
@section canonical {@await Html.PartialAsync("_CanonicalUrl", new[] { "page","q" })}
<div class="container-xl">
    <h1>
        @Stoolball.Constants.Pages.Teams
        @if (!string.IsNullOrEmpty(Model.Filter.Query))
        {
            @: matching '@Model.Filter.Query'
        }
    </h1>

    <ul class="nav nav-tabs nav-tabs-has-add">
        <li class="nav-item">
            <em class="nav-link active">Search</em>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Stoolball.Constants.Pages.TeamsUrl/map">Map</a>
        </li>
        <li class="nav-item nav-item-admin nav-item-admin-sm-last d-md-none">
            <div class="dropdown">
                <button class="btn nav-link nav-link-add" type="button" id="add-menu__button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Add club or team
                </button>
                <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="add-menu__button">
                    <li class="dropdown-item"><a href="/clubs/add">Add club</a></li>
                    <li class="dropdown-item"><a href="/teams/add">Add team</a></li>
                </ul>
            </div>
        </li>
        <li class="nav-item nav-item-admin d-none d-md-flex nav-item-admin-md-first nav-item-admin-lg-first">
            <a class="nav-link nav-link-add" href="/clubs/add">Add club</a>
        </li>
        <li class="nav-item nav-item-admin d-none d-md-flex">
            <a class="nav-link nav-link-add" href="/teams/add">Add team</a>
        </li>
    </ul>

    @if (string.IsNullOrEmpty(Model.Filter.Query))
    {
        <p class="alert alert-info alert-tip">Try searching for <a href="/teams?q=ladies">ladies teams</a>, <a href="/teams?q=mixed">mixed teams</a> or <a href="/teams?q=junior">junior teams</a>.</p>
    }
    <form method="get" action="@Context.Request.Path" class="form-inline form-search">
        <label class="sr-only" for="team-search">Team name</label>
        <input type="search" class="form-control" id="team-search" name="q" value="@Model.Filter.Query" />
        <button type="submit" class="btn btn-primary">Search</button>
    </form>

    @if (Model.Listings.Any())
    {
        <dl>
            @foreach (var listing in Model.Listings)
            {
                var linkText = listing.ClubOrTeamName;
                var location = listing.MatchLocations.FirstOrDefault()?.LocalityOrTown();
                if (!string.IsNullOrEmpty(location) &&
                    !linkText.Replace("'", string.Empty).ToUpperInvariant().Contains(location.Replace("'", string.Empty).ToUpperInvariant()))
                {
                    linkText += ", " + location;
                }

                listing.PlayerTypes.Sort(); // by id, which puts adult teams before junior
                var playerTypes = $"{listing.PlayerTypes.Select((value, index) => value.Humanize(index > 0 ? LetterCasing.LowerCase : LetterCasing.Sentence)).Humanize()}";

                var detail = string.Empty;
                if (listing.TeamType.HasValue)
                {
                    if (listing.TeamType == TeamType.SchoolClub)
                    {
                        detail = playerTypes + " school club. ";
                    }
                    else
                    {
                        detail = listing.TeamType.Humanize(LetterCasing.Sentence) + $" {playerTypes.ToLower(CultureInfo.CurrentCulture)} team. ";
                    }
                    if (!listing.Active)
                    {
                        detail += $"No longer active.";
                    }
                }
                else
                {
                    if (listing.PlayerTypes.Count > 0)
                    {
                        // Don't use Humanizer for conversion to lowercase due to https://github.com/Humanizr/Humanizer/issues/958
                        detail = $"Club with {(listing.PlayerTypes.Count > 1 ? string.Empty : "one ")}{playerTypes.ToLower(CultureInfo.CurrentCulture)} {(listing.PlayerTypes.Count > 1 ? "teams" : "team")}. ";
                        if (!listing.Active)
                        {
                            detail += $"No longer active.";
                        }
                    }
                    else
                    {
                        detail = "Club with no active teams. ";
                    }
                }
                <dt class="list-results__title"><a href="@listing.ClubOrTeamRoute">@linkText</a></dt>
                <dd class="list-results__detail">@detail</dd>
            }
        </dl>
    }
    @await Html.PartialAsync("_Paging", Model.Filter.Paging)
</div>