@inherits Umbraco.Web.Mvc.UmbracoViewPage<Stoolball.Web.Teams.TeamsViewModel>
@using Humanizer
<h1>
    Stoolball teams
    @if (!string.IsNullOrEmpty(Model.TeamQuery.Query))
    {
        @: matching '@Model.TeamQuery.Query'
    }
</h1>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <em class="nav-link active">Search</em>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="/clubs/add">Add club</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="/teams/add">Add team</a>
    </li>
</ul>

<form method="get" action="@Request.Url" class="form-inline form-search">
    <label class="sr-only" for="team-search">Team name</label>
    <input type="search" class="form-control" id="team-search" name="q" value="@Model.TeamQuery.Query" />
    <button type="submit" class="btn btn-primary">Search</button>
</form>

<ul>
    @foreach (var listing in Model.Teams)
    {
        var listingText = listing.ClubOrTeamName;
        var location = listing.MatchLocations.FirstOrDefault()?.LocalityOrTown();
        if (!string.IsNullOrEmpty(location) &&
            !listingText.Replace("'", string.Empty).ToUpperInvariant().Contains(location.Replace("'", string.Empty).ToUpperInvariant()))
        {
            listingText += ", " + location;
        }
        if (listing.Active)
        {
            listing.PlayerTypes.Sort(); // by id, which puts adult teams before junior
            listingText = $"{listingText} ({listing.PlayerTypes.Humanize().Humanize(LetterCasing.Sentence)})";
        }
        else
        {
            listingText = $"{listingText} (No longer active)";
        }
        <li><a href="@listing.ClubOrTeamRoute">@listingText</a></li>
    }
</ul>