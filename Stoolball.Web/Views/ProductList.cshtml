@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ProductList>
@inject Stoolball.Email.IEmailProtector emailProtector
@using Umbraco.Forms.Web.Extensions
@{
    SmidgeHelper.RequiresJs(new JavaScriptFile("~/js/lib/jquery.validate.min.js") { Order = 90 });
    SmidgeHelper.RequiresJs(new JavaScriptFile("~/js/lib/jquery.validate.unobtrusive.min.js") { Order = 100 });

    SmidgeHelper.RequiresJs(new JavaScriptFile("~/umbraco/lib/tinymce/tinymce.min.js") { Order = 90 });
    SmidgeHelper.RequiresJs(new JavaScriptFile("~/js/tinymce.js") { Order = 100 });
}
<div class="container-xl">
    <h1>@Model.Name</h1>


    <div class="product-list__intro">
        <div>@Html.Raw(emailProtector.ProtectEmailAddresses(Model.Introduction?.ToHtmlString(), User.Identity?.IsAuthenticated ?? false))</div>
        <a href="https://shop.spreadshirt.co.uk/stoolball">
            <img src="~/images/shop/spreadshirt.png" alt="Products from our gift shop" width="600" />
            <p class="btn btn-primary btn-lg">Visit our gift shop</p>
        </a>
    </div>

    @if (Model.Products?.Any() ?? false)
    {
        <ul class="tiles product-list">
            @Html.GetBlockListHtml(Model, "products", "BlockList")
        </ul>
    }
    @Html.Raw(emailProtector.ProtectEmailAddresses(Model.FurtherDetails?.ToHtmlString(), User.Identity?.IsAuthenticated ?? false))
    @if (Model.EnquiryForm != null)
    {
        @await Umbraco.RenderMacroAsync("renderUmbracoForm", new { FormGuid = Model.EnquiryForm, FormTheme = "stoolball", ExcludeScripts = "1" })
    }
</div>

@section umbracoforms {
    @if (TempData["UmbracoForms"] != null)
    {
        foreach (var form in TempData.Get<List<Guid>>("UmbracoForms"))
        {
            @await Component.InvokeAsync("RenderFormScripts", new {formId = form, theme = "stoolball"})
        }
    }
}