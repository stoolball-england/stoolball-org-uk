@inherits Umbraco.Web.Mvc.UmbracoViewPage<Stoolball.Web.Matches.MatchViewModel>
@using Stoolball.Matches
@using Humanizer
@using Innovative.SolarCalculator
@functions{
    private string ResultDescription()
    {
        var description = Model.Match.MatchResultType.Humanize(LetterCasing.Sentence);
        if (Model.Match.MatchResultType == MatchResultType.HomeWin || Model.Match.MatchResultType == MatchResultType.HomeWinByForfeit)
        {
            var homeTeam = Model.Match.Teams.Where(x => x.TeamRole == TeamRole.Home).FirstOrDefault()?.Team;
            if (homeTeam != null)
            {
                description = description.Replace("Home", homeTeam.TeamName);
            }
        }
        if (Model.Match.MatchResultType == MatchResultType.AwayWin || Model.Match.MatchResultType == MatchResultType.AwayWinByForfeit)
        {
            var awayTeam = Model.Match.Teams.Where(x => x.TeamRole == TeamRole.Away).FirstOrDefault()?.Team;
            if (awayTeam != null)
            {
                description = description.Replace("Away", awayTeam.TeamName);
            }
        }
        return description;
    }
}
<h1>@Model.Match.MatchFullName(x => Model.DateTimeFormatter.FormatDate(x.LocalDateTime, false))</h1>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <em class="nav-link active">Summary</em>
    </li>
    @if (Model.IsAuthorized)
    {
        <li class="nav-item">
            <a class="nav-link" href="@Model.Match.MatchRoute/edit">Edit</a>
        </li>
    }
    </ul>

<p>
    @Model.Match.MatchType.Humanize(LetterCasing.Sentence)@{
        if (Model.Match.Season != null)
        {
            var seasonName = Model.Match.Season.SeasonFullName();
            var inTheSeason = (seasonName.StartsWith("THE ", StringComparison.OrdinalIgnoreCase)) ? " in" : " in the";
            @inTheSeason <a href="@Model.Match.Season.SeasonRoute">@seasonName</a>
        }
    }
</p>

@if (Model.Match.Teams.Count > 0)
{
    <p>Who: @Html.Raw(Model.Match.Teams.Select(x => x.Team).ToList().Humanize(x => $"<a href=\"{Html.Encode(x.TeamRoute)}\">{Html.Encode(x.TeamName)}</a>"))</p>
}

<p>
    When:
    @if (Model.Match.Tournament != null)
    {
        var inTheTournament = (Model.Match.Tournament.TournamentName.StartsWith("THE ", StringComparison.OrdinalIgnoreCase)) ? ", in " : ", in the ";
        @(Model.Match.StartTimeIsKnown ? Model.DateTimeFormatter.FormatDateTime(Model.Match.StartTime.LocalDateTime) : Model.DateTimeFormatter.FormatDate(Model.Match.StartTime.LocalDateTime))@inTheTournament
        <a href="@Model.Match.Tournament.TournamentRoute">@Model.Match.Tournament.TournamentName</a>
    }
    else
    {
        @(Model.Match.StartTimeIsKnown ? Model.DateTimeFormatter.FormatDateTime(Model.Match.StartTime.LocalDateTime) : Model.DateTimeFormatter.FormatDate(Model.Match.StartTime.LocalDateTime))
    }
    @if (Model.Match.MatchLocation?.Latitude != null && Model.Match.MatchLocation?.Longitude != null)
    {
        var solarTimes = new SolarTimes(Model.Match.StartTime.LocalDateTime, Model.Match.MatchLocation.Latitude, Model.Match.MatchLocation.Longitude);
        @: (sunset @Model.DateTimeFormatter.FormatTime(solarTimes.Sunset))
    }
</p>

@if (Model.Match.MatchLocation != null)
{
    <p>Where: <a href="@Model.Match.MatchLocation.MatchLocationRoute">@Model.Match.MatchLocation.NameAndLocalityOrTown()</a></p>
}

@{
    if (Model.Match.MatchResultType.HasValue || Model.Match.InningsOrderIsKnown || Model.Match.HasScorecard())
    {
        // Put the result in the h2, so long as we have something to put after it. Otherwise put the result after the h2.
        var resultHeader = "Result";
        if (Model.Match.MatchResultType.HasValue && (Model.Match.InningsOrderIsKnown || Model.Match.HasScorecard()))
        {
            resultHeader += ": " + ResultDescription();
        }

        <h2>@resultHeader</h2>
    }

    var tossWinners = Model.Match.Teams.FirstOrDefault(x => x.WonToss.HasValue && x.WonToss.Value);
    if (tossWinners != null)
    {
        var tossResult = tossWinners.Team.TeamName + " won the toss";
        if (Model.Match.InningsOrderIsKnown)
        {
            var choseTo = ((tossWinners.TeamRole == TeamRole.Home) == (Model.Match.MatchInnings.FirstOrDefault().Team?.TeamId == tossWinners.Team.TeamId)) ? "bat" : "bowl";
            tossResult += " and chose to " + choseTo;
        }
        <p>@tossResult.</p>
    }

    if (Model.Match.HasScorecard())
    {

    }
    else
    {
        // Got to be just result and batting order now.
        // Only include result if batting order's not there, otherwise result will already be in header.
        if (Model.Match.MatchResultType.HasValue && !Model.Match.InningsOrderIsKnown)
        {
            <p>@ResultDescription().</p>
        }

        if (Model.Match.InningsOrderIsKnown)
        {
            var firstToBat = Model.Match.Teams.FirstOrDefault(x => x.Team.TeamId == Model.Match.MatchInnings.FirstOrDefault().Team?.TeamId);
            if (firstToBat != null)
            {
                <p>@firstToBat.Team.TeamName batted first.</p>
            }
        }
    }
}
@if (!string.IsNullOrWhiteSpace(Model.Match.MatchNotes))
{
    <h2>Notes</h2>
    @Html.Raw(Model.Match.MatchNotes)
}
