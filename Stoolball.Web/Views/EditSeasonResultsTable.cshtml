@inherits UmbracoViewPage<SeasonViewModel>
@using Humanizer
@using Stoolball.Competitions
@using Stoolball.Web.Competitions
@using Stoolball.Web.Competitions.Models
@using Stoolball.Security
@section head {
    <meta name="robots" content="noindex,follow" />
}
@await Html.PartialAsync("_JQueryValidate")
@{
    SmidgeHelper.RequiresCss(new CssFile("/css/competitions.min.css") { Order = 100 });
}
<div class="container-xl">
    <h1>Edit results table for @Model.Season!.SeasonFullName()</h1>

    @if (Model.Authorization.CurrentMemberIsAuthorized[AuthorizedAction.EditCompetition])
    {
        using (Html.BeginUmbracoForm<EditSeasonResultsTableSurfaceController>(nameof(EditSeasonResultsTableSurfaceController.UpdateSeason)))
        {
            @Html.ValidationSummary(true)

            @Html.HiddenFor(m => Model.UrlReferrer)

            <fieldset class="form-group">
                <legend>What type of results table do you want?</legend>
                <div class="custom-control custom-radio">
                    @Html.RadioButtonFor(m => Model.Season.ResultsTableType, ResultsTableType.None, new { @class = "custom-control-input", @id = ResultsTableType.None.ToString(), aria_describedby= "table-type-validation" })
                    <label for="@ResultsTableType.None.ToString()" class="custom-control-label">@ResultsTableType.None.ToString()</label>
                </div>
                <div class="custom-control custom-radio">
                    @Html.RadioButtonFor(m => Model.Season.ResultsTableType, ResultsTableType.LeagueTable, new { @class = "custom-control-input", @id = ResultsTableType.LeagueTable.ToString(), aria_describedby = "table-type-validation" })
                    <label for="@ResultsTableType.LeagueTable.ToString()" class="custom-control-label">@ResultsTableType.LeagueTable.ToString().Humanize() (sorted by league points)</label>
                </div>
                <div class="custom-control custom-radio">
                    @Html.RadioButtonFor(m => Model.Season.ResultsTableType, ResultsTableType.NonLeagueResultsTable, new { @class = "custom-control-input", @id = ResultsTableType.NonLeagueResultsTable.ToString(), aria_describedby = "table-type-validation" })
                    <label for="@ResultsTableType.NonLeagueResultsTable.ToString()" class="custom-control-label">@ResultsTableType.NonLeagueResultsTable.ToString().Humanize() (no points, sorted alphabetically)</label>
                </div>
                @Html.ValidationMessageFor(m => Model.Season.ResultsTableType, null, new { id = "table-type-validation" })
            </fieldset>

            <fieldset class="form-group">
                <legend>Optional columns</legend>
                <div class="custom-control custom-checkbox">
                    @Html.CheckBoxFor(m => Model.Season.EnableRunsScored, new { @class = "custom-control-input" })
                    @Html.LabelFor(m => Model.Season.EnableRunsScored, "Show runs scored", new { @class = "custom-control-label" })
                </div>
                <div class="custom-control custom-checkbox">
                    @Html.CheckBoxFor(m => Model.Season.EnableRunsConceded, new { @class = "custom-control-input" })
                    @Html.LabelFor(m => Model.Season.EnableRunsConceded, "Show runs conceded", new { @class = "custom-control-label" })
                </div>
            </fieldset>

            <fieldset class="form-group">
                <table class="table-as-cards table-hover edit-results-table">
                    <caption>How are points awarded for league matches?</caption>
                    <thead>
                        <tr><th scope="col">Result</th><th scope="col">Points for home team</th><th scope="col">Points for away team</th></tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.Season.PointsRules.Count; i++)
                        {
                            <tr>
                                <th scope="row">
                                    @Model.Season.PointsRules[i].MatchResultType.ToString().Humanize()
                                    @Html.HiddenFor(m => Model.Season.PointsRules[i].PointsRuleId)
                                    @Html.HiddenFor(m => Model.Season.PointsRules[i].MatchResultType)
                                </th>
                                <td data-stackable="true">
                                    @Html.LabelFor(m => Model.Season.PointsRules[i].HomePoints, new { @class = "table-as-cards__label", aria_hidden = "true" })
                                    <div>
                                        @* Extra div ensures the textbox and validation error are a single flex-item when using .table-as-cards *@
                                        @Html.TextBoxFor(m => Model.Season.PointsRules[i].HomePoints, new { @type = "number", maxlength = "2", data_val_number = "Please type a number", data_val_required = "This field is required", aria_describedby = $"home-points-{i}" })
                                        @Html.ValidationMessageFor(m => Model.Season.PointsRules[i].HomePoints, null, new { id = $"home-points-{i}" })
                                    </div>
                                </td>
                                <td data-stackable="true">
                                    @Html.LabelFor(m => Model.Season.PointsRules[i].AwayPoints, new { @class = "table-as-cards__label", aria_hidden = "true" })
                                    <div>
                                        @Html.TextBoxFor(m => Model.Season.PointsRules[i].AwayPoints, new { @type = "number", maxlength = "2", data_val_number = "Please type a number", data_val_required = "This field is required", aria_describedby = $"away-points-{i}" })
                                        @Html.ValidationMessageFor(m => Model.Season.PointsRules[i].AwayPoints, null, new { id = $"away-points-{i}" })
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </fieldset>

            <button class="btn btn-primary" type="submit">Save results table</button>
        }
    }
    else
    {
        @await Html.PartialAsync("_Login")
    }
</div>