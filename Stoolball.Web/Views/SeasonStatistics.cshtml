@inherits UmbracoViewPage<StatisticsSummaryViewModel<Season>>
@using Stoolball.Web.Statistics.Models
@using Stoolball.Competitions
@using Stoolball.Matches
@using Stoolball.Statistics
@{
    SmidgeHelper.RequiresCss(new CssFile("/css/statistics.min.css") { Order = 100 });

    var individualScores = new StatisticsViewModel<PlayerInnings>(Model) { ShowCaption = true, ShowPlayerColumn = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter };
    individualScores.Results.AddRange(Model.PlayerInnings);
    var bowlingFigures = new StatisticsViewModel<BowlingFigures>(Model) { ShowCaption = true, ShowPlayerColumn = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter };
    bowlingFigures.Results.AddRange(Model.BowlingFigures);
    var mostRuns = new StatisticsViewModel<BestStatistic>(Model) { ShowCaption = true, ShowTeamsColumn = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter };
    mostRuns.Results.AddRange(Model.MostRuns);
    var mostWickets = new StatisticsViewModel<BestStatistic>(Model) { ShowCaption = true, ShowTeamsColumn = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter };
    mostWickets.Results.AddRange(Model.MostWickets);
    var mostCatches = new StatisticsViewModel<BestStatistic>(Model) { ShowCaption = true, ShowTeamsColumn = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter };
    mostCatches.Results.AddRange(Model.MostCatches);
}
<div class="container-xl">
    <h1>@Model.Context!.SeasonFullNameAndPlayerType()</h1>

    @if (Model.Context.Competition.UntilYear.HasValue)
    {
        <div class="alert alert-info">
            <p><strong>This competition isn't played any more.</strong></p>
        </div>
    }

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@Model.Context.SeasonRoute">Summary</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Context.SeasonRoute/matches">Matches</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Context.SeasonRoute/map">Map</a>
        </li>
        @if (Model.Context.MatchTypes.Contains(MatchType.LeagueMatch) ||
            Model.Context.MatchTypes.Contains(MatchType.KnockoutMatch) ||
            Model.Context.MatchTypes.Contains(MatchType.FriendlyMatch) ||
            !string.IsNullOrEmpty(Model.Context.Results))
        {
            <li class="nav-item">
                <a class="nav-link" href="@Model.Context.SeasonRoute/table">Table</a>
            </li>
        }
        <li class="nav-item">
            <em class="nav-link active">Statistics</em>
        </li>
    </ul>

    @if (!Model.PlayerInnings.Any() && !Model.BowlingFigures.Any() && !Model.MostRuns.Any() && !Model.MostWickets.Any() && !Model.MostCatches.Any())
    {
        @await Html.PartialAsync("_NoData")
    }
    else
    {
        @await Html.PartialAsync("_IndividualScores", individualScores)
        @await Html.PartialAsync("_MostRuns", mostRuns)
        @await Html.PartialAsync("_BattingAverage", new StatisticsViewModel<BestStatistic>(Model) { ShowLinkOnly = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter })
        @await Html.PartialAsync("_BattingStrikeRate", new StatisticsViewModel<BestStatistic>(Model) { ShowLinkOnly = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter })
        @await Html.PartialAsync("_BowlingFigures", bowlingFigures)
        @await Html.PartialAsync("_MostWickets", mostWickets)
        @await Html.PartialAsync("_BowlingAverage", new StatisticsViewModel<BestStatistic>(Model) { ShowLinkOnly = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter })
        @await Html.PartialAsync("_EconomyRate", new StatisticsViewModel<BestStatistic>(Model) { ShowLinkOnly = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter })
        @await Html.PartialAsync("_BowlingStrikeRate", new StatisticsViewModel<BestStatistic>(Model) { ShowLinkOnly = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter })
        @await Html.PartialAsync("_MostCatches", mostCatches)
        @await Html.PartialAsync("_MostRunOuts", new StatisticsViewModel<BestStatistic>(Model) { ShowLinkOnly = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter })
        @await Html.PartialAsync("_PlayerPerformances", new StatisticsViewModel<PlayerIdentityPerformance>(Model) { ShowLinkOnly = true, DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter })
        @await Html.PartialAsync("_PlayerOfTheMatchLink", new StatisticsViewModel<PlayerIdentityPerformance>(Model) { DefaultFilter = Model.DefaultFilter, AppliedFilter = Model.AppliedFilter })
    }
    @if (Model.Context.Competition.Seasons.Count > 1)
    {
        var previous = Model.Context.Competition.Seasons.FirstOrDefault(x => x.FromYear <= Model.Context.FromYear && x.UntilYear <= Model.Context.UntilYear && x.SeasonId != Model.Context.SeasonId);
        var next = Model.Context.Competition.Seasons.LastOrDefault(x => x.FromYear >= Model.Context.FromYear && x.UntilYear >= Model.Context.UntilYear && x.SeasonId != Model.Context.SeasonId);
        <h2 class="sr-only">Seasons in this competition</h2>
        <p class="d-print-none">
            @if (previous != null)
            {
                <a href="@previous.SeasonRoute/statistics" class="btn btn-secondary btn-back">Previous season</a>
            }
            @if (next != null)
            {
                <a href="@next.SeasonRoute/statistics" class="btn btn-secondary">Next season</a>
            }
            <a href="@Model.Context.Competition.CompetitionRoute/statistics" class="btn btn-secondary">All seasons</a>
        </p>
    }
</div>