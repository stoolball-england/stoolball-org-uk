@inherits UmbracoViewPage<StatisticsSummaryViewModel<Season>>
@inject IStatisticsFilterQueryStringSerializer serialiser;
@using Stoolball.Web.Statistics.Models
@using Stoolball.Competitions
@using Stoolball.Matches
@using Stoolball.Statistics
@await Html.PartialAsync("_JQueryAutocomplete")
@await Html.PartialAsync("_RelatedItem")
@{
    SmidgeHelper.RequiresCss(new CssFile("/css/statistics.min.css") { Order = 100 });
    SmidgeHelper.RequiresJs(new JavaScriptFile("/js/filter.js") { Order = 100 });
    SmidgeHelper.RequiresCss(new CssFile("/css/filter.min.css") { Order = 100 });

    var queryString = serialiser.Serialize(Model.AppliedFilter, Model.DefaultFilter);
}
<div class="container-xl">
    <h1>@Model.Context!.SeasonFullNameAndPlayerType()</h1>

    @if (Model.Context.Competition.UntilYear.HasValue)
    {
        <div class="alert alert-info">
            <p><strong>This competition isn't played any more.</strong></p>
        </div>
    }

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@Model.Context.SeasonRoute">Summary</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Context.SeasonRoute/matches">Matches</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Context.SeasonRoute/map">Map</a>
        </li>
        @if (Model.Context.MatchTypes.Contains(MatchType.LeagueMatch) ||
            Model.Context.MatchTypes.Contains(MatchType.KnockoutMatch) ||
            Model.Context.MatchTypes.Contains(MatchType.FriendlyMatch) ||
            !string.IsNullOrEmpty(Model.Context.Results))
        {
            <li class="nav-item">
                <a class="nav-link" href="@Model.Context.SeasonRoute/table">Table</a>
            </li>
        }
        <li class="nav-item">
            <em class="nav-link active">Statistics</em>
        </li>
        <li class="nav-item nav-item-admin">
            <button type="button" class="nav-link nav-link-filter">Edit filter</button>
        </li>
    </ul>
    @await Html.PartialAsync("_StatisticsSummary")

    @if (Model.Context.Competition.Seasons.Count > 1)
    {
        var previous = Model.Context.Competition.Seasons.FirstOrDefault(x => x.FromYear <= Model.Context.FromYear && x.UntilYear <= Model.Context.UntilYear && x.SeasonId != Model.Context.SeasonId);
        var next = Model.Context.Competition.Seasons.LastOrDefault(x => x.FromYear >= Model.Context.FromYear && x.UntilYear >= Model.Context.UntilYear && x.SeasonId != Model.Context.SeasonId);
        <h2 class="sr-only">Seasons in this competition</h2>
        <p class="d-print-none">
            @if (previous != null)
            {
                <a href="@(previous.SeasonRoute)/statistics@(queryString)" class="btn btn-secondary btn-back">Previous season</a>
            }
            @if (next != null)
            {
                <a href="@(next.SeasonRoute)/statistics@(queryString)" class="btn btn-secondary">Next season</a>
            }
            <a href="@(Model.Context.Competition.CompetitionRoute)/statistics@(queryString)" class="btn btn-secondary">All seasons</a>
        </p>
    }
</div>