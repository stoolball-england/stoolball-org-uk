#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    
    #line 2 "..\..\Views\Player.cshtml"
    using ClientDependency.Core.Mvc;
    
    #line default
    #line hidden
    using Examine;
    
    #line 4 "..\..\Views\Player.cshtml"
    using Stoolball.Matches;
    
    #line default
    #line hidden
    
    #line 5 "..\..\Views\Player.cshtml"
    using Stoolball.Web.Filtering;
    
    #line default
    #line hidden
    
    #line 3 "..\..\Views\Player.cshtml"
    using Stoolball.Web.Statistics;
    
    #line default
    #line hidden
    using Umbraco.Core;
    using Umbraco.Core.Models;
    using Umbraco.Core.Models.PublishedContent;
    using Umbraco.Web;
    using Umbraco.Web.Mvc;
    using Umbraco.Web.PublishedModels;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Player.cshtml")]
    public partial class _Views_Player_cshtml : Umbraco.Web.Mvc.UmbracoViewPage<PlayerBattingViewModel>
    {
        public _Views_Player_cshtml()
        {
        }
        public override void Execute()
        {
            
            #line 6 "..\..\Views\Player.cshtml"
  
    Html.RequiresCss("/statistics/statistics.min.css");
    Html.RequiresJs("/js/filter.js");
    Html.RequiresCss("/css/filter.min.css");

    var individualScores = new StatisticsViewModel<PlayerInnings>(Model, Services.UserService) { ShowCaption = true, ShowPlayerColumn = false, StatisticsFilter = Model.StatisticsFilter };
    individualScores.Results.AddRange(Model.PlayerInnings);

            
            #line default
            #line hidden
WriteLiteral("\r\n<div");

WriteLiteral(" class=\"container-xl\"");

WriteLiteral(">\r\n");

WriteLiteral("    ");

            
            #line 15 "..\..\Views\Player.cshtml"
Write(Html.Partial("_PlayerHeader"));

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n    <ul");

WriteLiteral(" class=\"nav nav-tabs\"");

WriteLiteral(">\r\n        <li");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(">\r\n            <em");

WriteLiteral(" class=\"nav-link active\"");

WriteLiteral(">Batting</em>\r\n        </li>\r\n        <li");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(">\r\n            <a");

WriteLiteral(" class=\"nav-link\"");

WriteAttribute("href", Tuple.Create(" href=\"", 852), Tuple.Create("\"", 892)
            
            #line 22 "..\..\Views\Player.cshtml"
, Tuple.Create(Tuple.Create("", 859), Tuple.Create<System.Object, System.Int32>(Model.Player.PlayerRoute
            
            #line default
            #line hidden
, 859), false)
, Tuple.Create(Tuple.Create("", 884), Tuple.Create("/bowling", 884), true)
);

WriteLiteral(">Bowling</a>\r\n        </li>\r\n        <li");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(">\r\n            <a");

WriteLiteral(" class=\"nav-link\"");

WriteAttribute("href", Tuple.Create(" href=\"", 984), Tuple.Create("\"", 1025)
            
            #line 25 "..\..\Views\Player.cshtml"
, Tuple.Create(Tuple.Create("", 991), Tuple.Create<System.Object, System.Int32>(Model.Player.PlayerRoute
            
            #line default
            #line hidden
, 991), false)
, Tuple.Create(Tuple.Create("", 1016), Tuple.Create("/fielding", 1016), true)
);

WriteLiteral(">Fielding</a>\r\n        </li>\r\n        <li");

WriteLiteral(" class=\"nav-item nav-item-admin\"");

WriteLiteral(">\r\n            <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"nav-link nav-link-filter\"");

WriteLiteral(">Edit filter</button>\r\n        </li>\r\n    </ul>\r\n");

WriteLiteral("    ");

            
            #line 31 "..\..\Views\Player.cshtml"
Write(Html.Partial("_Filters", new FilterViewModel
    {
      FilteredItemTypeSingular = "Statistics",
      FilteredItemTypePlural = "Statistics",
      FilterDescription = Model.FilterDescription,
      from = Model.StatisticsFilter.FromDate,
      to = Model.StatisticsFilter.UntilDate
    }));

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n    <table");

WriteLiteral(" class=\"table-as-cards table-as-cards-reset-sm\"");

WriteLiteral(">\r\n        <thead>\r\n            <tr>\r\n                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">Innings</th>\r\n                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">Not out</th>\r\n                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">Runs</th>\r\n                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">50s</th>\r\n                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">100s</th>\r\n                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">Best</th>\r\n                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">Average</th>\r\n                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">Strike rate</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n        " +
"    <tr>\r\n                <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Innings</span>");

            
            #line 55 "..\..\Views\Player.cshtml"
                                                                                                          Write(Model.BattingStatistics.TotalInnings);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Not out</span>");

            
            #line 56 "..\..\Views\Player.cshtml"
                                                                                                          Write(Model.BattingStatistics.NotOuts);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Runs</span>");

            
            #line 57 "..\..\Views\Player.cshtml"
                                                                                                       Write(Model.BattingStatistics.TotalRunsScored);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">50s</span>");

            
            #line 58 "..\..\Views\Player.cshtml"
                                                                                                      Write(Model.BattingStatistics.Fifties);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">100s</span>");

            
            #line 59 "..\..\Views\Player.cshtml"
                                                                                                       Write(Model.BattingStatistics.Hundreds);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Best</span>");

            
            #line 60 "..\..\Views\Player.cshtml"
                                                                                                       Write(Model.BattingStatistics.BestInningsRunsScored);

            
            #line default
            #line hidden
            
            #line 60 "..\..\Views\Player.cshtml"
                                                                                                                                                      Write(Model.BattingStatistics.BestInningsWasDismissed == false ? "*" : string.Empty);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Average</span>");

            
            #line 61 "..\..\Views\Player.cshtml"
                                                                                                           Write(Model.BattingStatistics.Average.HasValue ? Math.Round(Model.BattingStatistics.Average.Value, 2).ToString() : "–");

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Strike rate</span>");

            
            #line 62 "..\..\Views\Player.cshtml"
                                                                                                               Write(Model.BattingStatistics.StrikeRate.HasValue ? Math.Round(Model.BattingStatistics.StrikeRate.Value, 2).ToString() : "–");

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n");

            
            #line 66 "..\..\Views\Player.cshtml"
    
            
            #line default
            #line hidden
            
            #line 66 "..\..\Views\Player.cshtml"
     if ((Model.BattingStatistics.TotalInnings != Model.BattingStatistics.TotalInningsWithRunsScored && Model.BattingStatistics.Average.HasValue) ||
        (Model.BattingStatistics.TotalInnings != Model.BattingStatistics.TotalInningsWithRunsScoredAndBallsFaced && Model.BattingStatistics.StrikeRate.HasValue))
    {

            
            #line default
            #line hidden
WriteLiteral("        <p");

WriteLiteral(" class=\"table-small-print\"");

WriteLiteral(">\r\n            <small>\r\n");

            
            #line 71 "..\..\Views\Player.cshtml"
                
            
            #line default
            #line hidden
            
            #line 71 "..\..\Views\Player.cshtml"
                 if (Model.BattingStatistics.TotalInnings != Model.BattingStatistics.TotalInningsWithRunsScored && Model.BattingStatistics.Average.HasValue)
                {

            
            #line default
            #line hidden
WriteLiteral("                    ");

WriteLiteral("The average is based on ");

            
            #line 73 "..\..\Views\Player.cshtml"
                                          Write(Model.BattingStatistics.TotalInningsWithRunsScored);

            
            #line default
            #line hidden
WriteLiteral(" innings with runs recorded.\r\n");

            
            #line 74 "..\..\Views\Player.cshtml"
                }

            
            #line default
            #line hidden
WriteLiteral("                ");

            
            #line 75 "..\..\Views\Player.cshtml"
                 if (Model.BattingStatistics.TotalInnings != Model.BattingStatistics.TotalInningsWithRunsScoredAndBallsFaced && Model.BattingStatistics.StrikeRate.HasValue)
                {

            
            #line default
            #line hidden
WriteLiteral("                    ");

WriteLiteral("The strike rate is based on ");

            
            #line 77 "..\..\Views\Player.cshtml"
                                              Write(Model.BattingStatistics.TotalInningsWithRunsScoredAndBallsFaced);

            
            #line default
            #line hidden
WriteLiteral(" innings with runs and balls faced recorded.\r\n");

            
            #line 78 "..\..\Views\Player.cshtml"
                }

            
            #line default
            #line hidden
WriteLiteral("            </small>\r\n        </p>\r\n");

            
            #line 81 "..\..\Views\Player.cshtml"

    }

            
            #line default
            #line hidden
WriteLiteral("\r\n");

WriteLiteral("    ");

            
            #line 84 "..\..\Views\Player.cshtml"
Write(Html.Partial("_IndividualScores", individualScores));

            
            #line default
            #line hidden
WriteLiteral("\r\n</div>\r\n");

        }
    }
}
#pragma warning restore 1591
