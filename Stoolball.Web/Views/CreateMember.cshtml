@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.CreateMember>
@using ContentModels = Umbraco.Web.PublishedModels;
@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using Stoolball.Web.Account
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresCss("~/css/forms.css");
    Html.RequiresJs("~/scripts/jquery-3.4.1.slim.min.js");
    Html.RequiresJs("~/scripts/jquery.validate.min.js");
    Html.RequiresJs("~/scripts/jquery.validate.unobtrusive.min.js");

    var createMemberModel = Members.CreateRegistrationModel();
}
<h1>@Model.Name</h1>

@if (User.Identity.IsAuthenticated)
{
    @Html.Raw(Model.Value<string>("alreadyLoggedIn").Replace("{{NAME}}", Umbraco.MembershipHelper.GetCurrentMember().Name))

    using (Html.BeginUmbracoForm<LogoutMemberController>("HandleLogout"))
    {
        @Html.AntiForgeryToken()
        <button class="btn btn-primary">@Model.Value("logoutButton")</button>
    }
}
else
{
    if (TempData["FormSuccess"] != null)
    {
        @Html.Raw(Model.Value("memberCreatedSuccessfully").ToString().Replace("{{EMAIL}}", TempData["Email"]?.ToString()))
    }
    else
    {
        using (Html.BeginUmbracoForm<CreateMemberController>("HandleCreateMember"))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.LabelFor(m => createMemberModel.Name)
                @Html.TextBoxFor(m => createMemberModel.Name, new { @class = "form-control", required = "required", aria_describedby = "form-name" })
                @Html.ValidationMessageFor(m => createMemberModel.Name, null, new { id = "form-name" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => createMemberModel.Email)
                @Html.TextBoxFor(m => createMemberModel.Email, new { @class = "form-control", type = "email", required = "required", aria_describedby = "form-email" })
                @Html.ValidationMessageFor(m => createMemberModel.Email, null, new { id = "form-email" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => createMemberModel.Password)
                @Html.PasswordFor(m => createMemberModel.Password, new { @class = "form-control", aria_describedby = "form-password" })
                @Html.ValidationMessageFor(m => createMemberModel.Password, null, new { id = "form-password" })
            </div>

            <button class="btn btn-primary">@Model.Value("createMemberButton")</button>
        }
    }
}