#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    
    #line 4 "..\..\Views\SeasonResultsTable.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    
    #line 3 "..\..\Views\SeasonResultsTable.cshtml"
    using ClientDependency.Core.Mvc;
    
    #line default
    #line hidden
    using Examine;
    
    #line 2 "..\..\Views\SeasonResultsTable.cshtml"
    using Humanizer;
    
    #line default
    #line hidden
    
    #line 5 "..\..\Views\SeasonResultsTable.cshtml"
    using Stoolball.Competitions;
    
    #line default
    #line hidden
    
    #line 6 "..\..\Views\SeasonResultsTable.cshtml"
    using Stoolball.Matches;
    
    #line default
    #line hidden
    
    #line 8 "..\..\Views\SeasonResultsTable.cshtml"
    using Stoolball.Security;
    
    #line default
    #line hidden
    
    #line 7 "..\..\Views\SeasonResultsTable.cshtml"
    using Stoolball.Web.Matches;
    
    #line default
    #line hidden
    using Umbraco.Core;
    using Umbraco.Core.Models;
    using Umbraco.Core.Models.PublishedContent;
    using Umbraco.Web;
    using Umbraco.Web.Mvc;
    using Umbraco.Web.PublishedModels;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/SeasonResultsTable.cshtml")]
    public partial class _Views_SeasonResultsTable_cshtml : Umbraco.Web.Mvc.UmbracoViewPage<Stoolball.Web.Competitions.SeasonViewModel>
    {
        public _Views_SeasonResultsTable_cshtml()
        {
        }
        public override void Execute()
        {
            
            #line 9 "..\..\Views\SeasonResultsTable.cshtml"
  
    Html.RequiresCss("/competitions/competitions.min.css");
    var authorizedToEdit = Model.IsAuthorized[AuthorizedAction.EditCompetition] || Model.IsAuthorized[AuthorizedAction.DeleteCompetition];

            
            #line default
            #line hidden
WriteLiteral("\r\n<div");

WriteLiteral(" class=\"container-xl\"");

WriteLiteral(">\r\n    <h1>");

            
            #line 14 "..\..\Views\SeasonResultsTable.cshtml"
   Write(Model.Season.SeasonFullNameAndPlayerType());

            
            #line default
            #line hidden
WriteLiteral("</h1>\r\n\r\n");

            
            #line 16 "..\..\Views\SeasonResultsTable.cshtml"
    
            
            #line default
            #line hidden
            
            #line 16 "..\..\Views\SeasonResultsTable.cshtml"
     if (Model.Season.Competition.UntilYear.HasValue)
    {

            
            #line default
            #line hidden
WriteLiteral("        <div");

WriteLiteral(" class=\"alert alert-info\"");

WriteLiteral(">\r\n            <p><strong>This competition isn\'t played any more.</strong></p>\r\n " +
"       </div>\r\n");

            
            #line 21 "..\..\Views\SeasonResultsTable.cshtml"
    }

            
            #line default
            #line hidden
WriteLiteral("\r\n    <ul");

WriteLiteral(" class=\"nav nav-tabs\"");

WriteLiteral(">\r\n        <li");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(">\r\n            <a");

WriteLiteral(" class=\"nav-link\"");

WriteAttribute("href", Tuple.Create(" href=\"", 866), Tuple.Create("\"", 898)
            
            #line 25 "..\..\Views\SeasonResultsTable.cshtml"
, Tuple.Create(Tuple.Create("", 873), Tuple.Create<System.Object, System.Int32>(Model.Season.SeasonRoute
            
            #line default
            #line hidden
, 873), false)
);

WriteLiteral(">Summary</a>\r\n        </li>\r\n        <li");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(">\r\n            <a");

WriteLiteral(" class=\"nav-link\"");

WriteAttribute("href", Tuple.Create(" href=\"", 990), Tuple.Create("\"", 1030)
            
            #line 28 "..\..\Views\SeasonResultsTable.cshtml"
, Tuple.Create(Tuple.Create("", 997), Tuple.Create<System.Object, System.Int32>(Model.Season.SeasonRoute
            
            #line default
            #line hidden
, 997), false)
, Tuple.Create(Tuple.Create("", 1022), Tuple.Create("/matches", 1022), true)
);

WriteLiteral(">Matches</a>\r\n        </li>\r\n        <li");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(">\r\n            <em");

WriteLiteral(" class=\"nav-link active\"");

WriteLiteral(">Table</em>\r\n        </li>\r\n        <li");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(">\r\n            <a");

WriteLiteral(" class=\"nav-link\"");

WriteAttribute("href", Tuple.Create(" href=\"", 1220), Tuple.Create("\"", 1263)
            
            #line 34 "..\..\Views\SeasonResultsTable.cshtml"
, Tuple.Create(Tuple.Create("", 1227), Tuple.Create<System.Object, System.Int32>(Model.Season.SeasonRoute
            
            #line default
            #line hidden
, 1227), false)
, Tuple.Create(Tuple.Create("", 1252), Tuple.Create("/statistics", 1252), true)
);

WriteLiteral(">Statistics</a>\r\n        </li>\r\n");

            
            #line 36 "..\..\Views\SeasonResultsTable.cshtml"
        
            
            #line default
            #line hidden
            
            #line 36 "..\..\Views\SeasonResultsTable.cshtml"
         if (authorizedToEdit)
        {

            
            #line default
            #line hidden
WriteLiteral("            <li");

WriteLiteral(" class=\"nav-item nav-item-admin\"");

WriteLiteral(">\r\n                <a");

WriteLiteral(" class=\"nav-link nav-link-edit\"");

WriteAttribute("href", Tuple.Create(" href=\"", 1438), Tuple.Create("\"", 1481)
            
            #line 39 "..\..\Views\SeasonResultsTable.cshtml"
, Tuple.Create(Tuple.Create("", 1445), Tuple.Create<System.Object, System.Int32>(Model.Season.SeasonRoute
            
            #line default
            #line hidden
, 1445), false)
, Tuple.Create(Tuple.Create("", 1470), Tuple.Create("/edit/table", 1470), true)
);

WriteLiteral(">Edit results table</a>\r\n            </li>\r\n");

            
            #line 41 "..\..\Views\SeasonResultsTable.cshtml"
        }

            
            #line default
            #line hidden
WriteLiteral("    </ul>\r\n\r\n");

            
            #line 44 "..\..\Views\SeasonResultsTable.cshtml"
    
            
            #line default
            #line hidden
            
            #line 44 "..\..\Views\SeasonResultsTable.cshtml"
      
        var noResults = true;
        if (Model.Season.Teams.Count > 0)
        {
            if (Model.Season.ResultsTableType == ResultsTableType.LeagueTable || Model.Season.ResultsTableType == ResultsTableType.NonLeagueResultsTable)
            {
                var matchesAwaitingResults = new MatchListingViewModel { DateTimeFormatter = Model.Matches.DateTimeFormatter };
                var withdrawnTeams = Model.Season.Teams.Where(x => x.WithdrawnDate.HasValue);
                var columns = 7;

            
            #line default
            #line hidden
WriteLiteral("                <table");

WriteLiteral(" class=\"results-table table-as-cards table-as-cards-reset-md table-hover\"");

WriteLiteral(">\r\n                    <thead>\r\n                        <tr>\r\n                   " +
"         <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(">Team</th>\r\n                            <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral(">Played</th>\r\n                            <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral(">Won</th>\r\n                            <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral(">Lost</th>\r\n                            <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral(">Tied</th>\r\n                            <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral(">No result</th>\r\n");

            
            #line 62 "..\..\Views\SeasonResultsTable.cshtml"
                            
            
            #line default
            #line hidden
            
            #line 62 "..\..\Views\SeasonResultsTable.cshtml"
                             if (Model.Season.EnableRunsScored)
                            {
                                columns++;

            
            #line default
            #line hidden
WriteLiteral("                                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral(">Runs scored</th>\r\n");

            
            #line 66 "..\..\Views\SeasonResultsTable.cshtml"
                            }

            
            #line default
            #line hidden
WriteLiteral("                            ");

            
            #line 67 "..\..\Views\SeasonResultsTable.cshtml"
                             if (Model.Season.EnableRunsConceded)
                            {
                                columns++;

            
            #line default
            #line hidden
WriteLiteral("                                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral(">Runs conceded</th>\r\n");

            
            #line 71 "..\..\Views\SeasonResultsTable.cshtml"
                            }

            
            #line default
            #line hidden
WriteLiteral("                            ");

            
            #line 72 "..\..\Views\SeasonResultsTable.cshtml"
                             if (Model.Season.ResultsTableType == ResultsTableType.LeagueTable)
                            {

            
            #line default
            #line hidden
WriteLiteral("                                <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral(">Points</th>\r\n");

            
            #line 75 "..\..\Views\SeasonResultsTable.cshtml"
                            }

            
            #line default
            #line hidden
WriteLiteral("                        </tr>\r\n                    </thead>\r\n                    " +
"<tbody>\r\n");

            
            #line 79 "..\..\Views\SeasonResultsTable.cshtml"
                        
            
            #line default
            #line hidden
            
            #line 79 "..\..\Views\SeasonResultsTable.cshtml"
                          
                            var rows = new Dictionary<Guid, ResultsTableRow>();
                            foreach (var team in Model.Season.Teams)
                            {
                                if (!team.WithdrawnDate.HasValue)
                                {
                                    rows.Add(team.Team.TeamId.Value, new ResultsTableRow { Team = team.Team });
                                }
                            }
                            // Look at matches to build data for each team
                            foreach (var match in Model.Matches.Matches)
                            {
                                var homeTeam = match.Teams.FirstOrDefault(team => team.TeamRole == TeamRole.Home);
                                var awayTeam = match.Teams.FirstOrDefault(team => team.TeamRole == TeamRole.Away);
                                var homeRuns = homeTeam != null ? match.MatchInnings.Where(x => x.BattingMatchTeamId == homeTeam.MatchTeamId).Sum(x => x.Runs) : null;
                                var awayRuns = awayTeam != null ? match.MatchInnings.Where(x => x.BattingMatchTeamId == awayTeam.MatchTeamId).Sum(x => x.Runs) : null;

                                // Discount matches in the future
                                if (match.StartTime >= DateTime.UtcNow) { break; }

                                // Discount non-league matches
                                if (Model.Season.ResultsTableType == ResultsTableType.LeagueTable && match.MatchType != MatchType.LeagueMatch) { continue; }

                                // Discount postponed matches
                                if (match.MatchResultType == MatchResultType.Postponed || match.MatchResultType == MatchResultType.AbandonedDuringPlayAndPostponed) { continue; }

                                // Discount matches where a team has withdrawn from the season
                                if (homeTeam != null && withdrawnTeams.Any(x => x.Team.TeamId == homeTeam.Team.TeamId)) { continue; }
                                if (awayTeam != null && withdrawnTeams.Any(x => x.Team.TeamId == awayTeam.Team.TeamId)) { continue; }

                                // Make a note of missing results, to excuse inaccuracies
                                if (!match.MatchResultType.HasValue)
                                {
                                    matchesAwaitingResults.Matches.Add(match);
                                    continue;
                                }

                                // Home team
                                if (homeTeam != null && rows.ContainsKey(homeTeam.Team.TeamId.Value))
                                {
                                    rows[homeTeam.Team.TeamId.Value].Played++;
                                    if (match.IsHomeWin()) { rows[homeTeam.Team.TeamId.Value].Won++; }
                                    else if (match.IsAwayWin()) { rows[homeTeam.Team.TeamId.Value].Lost++; }
                                    else if (match.IsEqualResult()) { rows[homeTeam.Team.TeamId.Value].Tied++; }
                                    else if (match.IsNoResult()) { rows[homeTeam.Team.TeamId.Value].NoResult++; }
                                    if (Model.Season.EnableRunsScored && homeRuns.HasValue) { rows[homeTeam.Team.TeamId.Value].RunsScored = (rows[homeTeam.Team.TeamId.Value].RunsScored + homeRuns.Value); }
                                    if (Model.Season.EnableRunsConceded && awayRuns.HasValue) { rows[homeTeam.Team.TeamId.Value].RunsConceded = (rows[homeTeam.Team.TeamId.Value].RunsConceded + awayRuns.Value); }
                                    if (Model.Season.ResultsTableType == ResultsTableType.LeagueTable)
                                    {
                                        rows[homeTeam.Team.TeamId.Value].Points = (rows[homeTeam.Team.TeamId.Value].Points + (Model.Season.PointsRules.First(x => x.MatchResultType == match.MatchResultType)?.HomePoints ?? 0));
                                    }
                                }

                                // Away team
                                if (awayTeam != null && rows.ContainsKey(awayTeam.Team.TeamId.Value))
                                {
                                    rows[awayTeam.Team.TeamId.Value].Played++;
                                    if (match.IsHomeWin()) { rows[awayTeam.Team.TeamId.Value].Lost++; }
                                    else if (match.IsAwayWin()) { rows[awayTeam.Team.TeamId.Value].Won++; }
                                    else if (match.IsEqualResult()) { rows[awayTeam.Team.TeamId.Value].Tied++; }
                                    else if (match.IsNoResult()) { rows[awayTeam.Team.TeamId.Value].NoResult++; }
                                    if (Model.Season.EnableRunsScored && awayRuns.HasValue) { rows[awayTeam.Team.TeamId.Value].RunsScored = (rows[awayTeam.Team.TeamId.Value].RunsScored + awayRuns.Value); }
                                    if (Model.Season.EnableRunsConceded && homeRuns.HasValue) { rows[awayTeam.Team.TeamId.Value].RunsConceded = (rows[awayTeam.Team.TeamId.Value].RunsConceded + homeRuns.Value); }
                                    if (Model.Season.ResultsTableType == ResultsTableType.LeagueTable)
                                    {
                                        rows[awayTeam.Team.TeamId.Value].Points = (rows[awayTeam.Team.TeamId.Value].Points + (Model.Season.PointsRules.FirstOrDefault(x => x.MatchResultType == match.MatchResultType)?.AwayPoints ?? 0));
                                    }
                                }
                            }

                            // Apply points adjustments
                            if (Model.Season.ResultsTableType == ResultsTableType.LeagueTable)
                            {
                                foreach (var point in Model.Season.PointsAdjustments)
                                {
                                    rows[point.Team.TeamId.Value].Points += point.Points;
                                }
                            }

                            // For league tables, sort the teams so that the highest points come first
                            var sortedRows = new List<ResultsTableRow>(rows.Values);
                            if (Model.Season.ResultsTableType == ResultsTableType.LeagueTable)
                            {
                                sortedRows.Sort(new LeagueTableRowComparer());
                            }

                            foreach (var row in sortedRows)
                            {

            
            #line default
            #line hidden
WriteLiteral("                                <tr>\r\n                                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral("><a");

WriteAttribute("href", Tuple.Create(" href=\"", 10336), Tuple.Create("\"", 10362)
            
            #line 168 "..\..\Views\SeasonResultsTable.cshtml"
, Tuple.Create(Tuple.Create("", 10343), Tuple.Create<System.Object, System.Int32>(row.Team.TeamRoute
            
            #line default
            #line hidden
, 10343), false)
);

WriteLiteral(">");

            
            #line 168 "..\..\Views\SeasonResultsTable.cshtml"
                                                                             Write(row.Team.TeamName);

            
            #line default
            #line hidden
WriteLiteral("</a></th>\r\n                                    <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Played</span><span");

WriteLiteral(" class=\"results-table__numeric-value\"");

WriteLiteral(">");

            
            #line 169 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                                                                                                        Write(row.Played);

            
            #line default
            #line hidden
WriteLiteral("</span></td>\r\n                                    <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Won</span><span");

WriteLiteral(" class=\"results-table__numeric-value\"");

WriteLiteral(">");

            
            #line 170 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                                                                                                     Write(row.Won);

            
            #line default
            #line hidden
WriteLiteral("</span></td>\r\n                                    <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Lost</span><span");

WriteLiteral(" class=\"results-table__numeric-value\"");

WriteLiteral(">");

            
            #line 171 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                                                                                                      Write(row.Lost);

            
            #line default
            #line hidden
WriteLiteral("</span></td>\r\n                                    <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Tied</span><span");

WriteLiteral(" class=\"results-table__numeric-value\"");

WriteLiteral(">");

            
            #line 172 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                                                                                                      Write(row.Tied);

            
            #line default
            #line hidden
WriteLiteral("</span></td>\r\n                                    <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">No result</span><span");

WriteLiteral(" class=\"results-table__numeric-value\"");

WriteLiteral(">");

            
            #line 173 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                                                                                                           Write(row.NoResult);

            
            #line default
            #line hidden
WriteLiteral("</span></td>\r\n");

            
            #line 174 "..\..\Views\SeasonResultsTable.cshtml"
                                    
            
            #line default
            #line hidden
            
            #line 174 "..\..\Views\SeasonResultsTable.cshtml"
                                     if (Model.Season.EnableRunsScored)
                                    {

            
            #line default
            #line hidden
WriteLiteral("                                        <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Runs scored</span><span");

WriteLiteral(" class=\"results-table__numeric-value\"");

WriteLiteral(">");

            
            #line 176 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                                                                                                                 Write(row.RunsScored);

            
            #line default
            #line hidden
WriteLiteral("</span></td>\r\n");

            
            #line 177 "..\..\Views\SeasonResultsTable.cshtml"
                                    }

            
            #line default
            #line hidden
WriteLiteral("                                    ");

            
            #line 178 "..\..\Views\SeasonResultsTable.cshtml"
                                     if (Model.Season.EnableRunsConceded)
                                    {

            
            #line default
            #line hidden
WriteLiteral("                                        <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Runs conceded</span><span");

WriteLiteral(" class=\"results-table__numeric-value\"");

WriteLiteral(">");

            
            #line 180 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                                                                                                                   Write(row.RunsConceded);

            
            #line default
            #line hidden
WriteLiteral("</span></td>\r\n");

            
            #line 181 "..\..\Views\SeasonResultsTable.cshtml"
                                    }

            
            #line default
            #line hidden
WriteLiteral("                                    ");

            
            #line 182 "..\..\Views\SeasonResultsTable.cshtml"
                                     if (Model.Season.ResultsTableType == ResultsTableType.LeagueTable)
                                    {

            
            #line default
            #line hidden
WriteLiteral("                                        <td");

WriteLiteral(" data-stackable=\"true\"");

WriteLiteral(" class=\"numeric\"");

WriteLiteral("><span");

WriteLiteral(" class=\"table-as-cards__label\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">Points</span><span");

WriteLiteral(" class=\"results-table__numeric-value\"");

WriteLiteral(">");

            
            #line 184 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                                                                                                            Write(row.Points);

            
            #line default
            #line hidden
WriteLiteral("</span></td>\r\n");

            
            #line 185 "..\..\Views\SeasonResultsTable.cshtml"
                                    }

            
            #line default
            #line hidden
WriteLiteral("                                </tr>\r\n");

            
            #line 187 "..\..\Views\SeasonResultsTable.cshtml"
                            }
                            foreach (var team in withdrawnTeams)
                            {

            
            #line default
            #line hidden
WriteLiteral("                                <tr");

WriteLiteral(" class=\"text-muted\"");

WriteLiteral("><th");

WriteLiteral(" scope=\"row\"");

WriteLiteral("><a");

WriteAttribute("href", Tuple.Create(" href=\"", 12857), Tuple.Create("\"", 12884)
            
            #line 190 "..\..\Views\SeasonResultsTable.cshtml"
, Tuple.Create(Tuple.Create("", 12864), Tuple.Create<System.Object, System.Int32>(team.Team.TeamRoute
            
            #line default
            #line hidden
, 12864), false)
);

WriteLiteral(">");

            
            #line 190 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                 Write(team.Team.TeamName);

            
            #line default
            #line hidden
WriteLiteral("</a></th><td");

WriteAttribute("colspan", Tuple.Create(" colspan=\"", 12917), Tuple.Create("\"", 12939)
            
            #line 190 "..\..\Views\SeasonResultsTable.cshtml"
                                                               , Tuple.Create(Tuple.Create("", 12927), Tuple.Create<System.Object, System.Int32>(columns-1
            
            #line default
            #line hidden
, 12927), false)
);

WriteLiteral(">Withdrew from season</td></tr>\r\n");

            
            #line 191 "..\..\Views\SeasonResultsTable.cshtml"
                            }
                        
            
            #line default
            #line hidden
WriteLiteral("\r\n                    </tbody>\r\n                </table>\r\n");

            
            #line 195 "..\..\Views\SeasonResultsTable.cshtml"

                if (Model.Season.ResultsTableType == ResultsTableType.LeagueTable && Model.Season.PointsAdjustments.Count > 0)
                {

            
            #line default
            #line hidden
WriteLiteral("                    <p>The league table includes the following points adjustments" +
":</p>\r\n");

WriteLiteral("                    <ul>\r\n");

            
            #line 200 "..\..\Views\SeasonResultsTable.cshtml"
                        
            
            #line default
            #line hidden
            
            #line 200 "..\..\Views\SeasonResultsTable.cshtml"
                         foreach (var adjustment in Model.Season.PointsAdjustments)
                        {
                            var reason = !string.IsNullOrEmpty(adjustment.Reason) ? $"for {adjustment.Reason}" : string.Empty;
                            if (adjustment.Points > 0)
                            {

            
            #line default
            #line hidden
WriteLiteral("                                <li>");

            
            #line 205 "..\..\Views\SeasonResultsTable.cshtml"
                                Write("point".ToQuantity(adjustment.Points));

            
            #line default
            #line hidden
WriteLiteral(" awarded to ");

            
            #line 205 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                   Write(adjustment.Team.TeamName);

            
            #line default
            #line hidden
WriteLiteral(" ");

            
            #line 205 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                             Write(reason);

            
            #line default
            #line hidden
WriteLiteral("</li>\r\n");

            
            #line 206 "..\..\Views\SeasonResultsTable.cshtml"
                            }
                            else if (adjustment.Points < 0)
                            {

            
            #line default
            #line hidden
WriteLiteral("                                <li>");

            
            #line 209 "..\..\Views\SeasonResultsTable.cshtml"
                                Write("point".ToQuantity(adjustment.Points *-1));

            
            #line default
            #line hidden
WriteLiteral(" deducted from ");

            
            #line 209 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                          Write(adjustment.Team.TeamName);

            
            #line default
            #line hidden
WriteLiteral(" ");

            
            #line 209 "..\..\Views\SeasonResultsTable.cshtml"
                                                                                                                    Write(reason);

            
            #line default
            #line hidden
WriteLiteral("</li>\r\n");

            
            #line 210 "..\..\Views\SeasonResultsTable.cshtml"
                            }
                        }

            
            #line default
            #line hidden
WriteLiteral("                    </ul>\r\n");

            
            #line 213 "..\..\Views\SeasonResultsTable.cshtml"
                }

                if (matchesAwaitingResults.Matches.Count > 0)
                {


            
            #line default
            #line hidden
WriteLiteral("                    <p>Waiting for results from:</p>\r\n");

            
            #line 219 "..\..\Views\SeasonResultsTable.cshtml"
                    
            
            #line default
            #line hidden
            
            #line 219 "..\..\Views\SeasonResultsTable.cshtml"
               Write(Html.Partial("_MatchList", matchesAwaitingResults));

            
            #line default
            #line hidden
            
            #line 219 "..\..\Views\SeasonResultsTable.cshtml"
                                                                       
                }

                noResults = false;
            }
        }

        if (!string.IsNullOrEmpty(Model.Season.Results))
        {
            
            
            #line default
            #line hidden
            
            #line 228 "..\..\Views\SeasonResultsTable.cshtml"
       Write(Html.Raw(Model.Season.Results));

            
            #line default
            #line hidden
            
            #line 228 "..\..\Views\SeasonResultsTable.cshtml"
                                           ;
            noResults = false;
        }

        if (noResults)
        {

            
            #line default
            #line hidden
WriteLiteral("            <p>There\'s no results table for this season.</p>\r\n");

WriteLiteral("            <p>You can add match results to this website to see your results tabl" +
"e updated instantly. For leagues, points are calculated.</p>\r\n");

WriteLiteral("            <p>To get started, see <a");

WriteLiteral(" href=\"/organise/website/results-tables/\"");

WriteLiteral(">Results tables – how they work</a>.</p>\r\n");

            
            #line 237 "..\..\Views\SeasonResultsTable.cshtml"
        }
    
            
            #line default
            #line hidden
WriteLiteral("\r\n</div>");

        }
    }
}
#pragma warning restore 1591
