@inherits UmbracoViewPage<Stoolball.Web.MatchLocations.Models.MatchLocationViewModel>
@using System.Globalization
@using Stoolball.MatchLocations
@using Stoolball.Security
@{
    SmidgeHelper.RequiresJs(new JavaScriptFile("~/js/show-all-teams.js"){Order = 100});
    var authorizedToEdit = Model.IsAuthorized[AuthorizedAction.EditMatchLocation] || Model.IsAuthorized[AuthorizedAction.DeleteMatchLocation];
}
<div class="container-xl">
    <h1>@Model.MatchLocation!.NameAndLocalityOrTownIfDifferent()</h1>

    <ul class="nav nav-tabs@(authorizedToEdit ? " nav-tabs-has-edit" : string.Empty)">
        <li class="nav-item">
            <em class="nav-link active">Summary</em>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.MatchLocation.MatchLocationRoute/matches">Matches</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.MatchLocation.MatchLocationRoute/statistics">Statistics</a>
        </li>
        @if (authorizedToEdit)
        {
            <li class="nav-item nav-item-admin">
                <a class="nav-link nav-link-edit" href="@Model.MatchLocation.MatchLocationRoute/edit">Edit ground or sports centre</a>
            </li>
        }
    </ul>

    @await Html.PartialAsync("_MatchLocationAddress", Model.MatchLocation)
    @if (Model.MatchLocation.Teams?.Count > 0)
    {
        var currentTeams = Model.MatchLocation.Teams.Where(x => !x.UntilYear.HasValue).ToList();
        <h2>Teams based here</h2>
        if (currentTeams.Any())
        {
        <div class="team-list__current">
            @await Html.PartialAsync("_TeamList", currentTeams)
        </div>
        }
        if (currentTeams.Count < Model.MatchLocation.Teams.Count)
        {
            <div class="team-list__all d-none">
                @await Html.PartialAsync("_TeamList", Model.MatchLocation.Teams)
            </div>
        }
    }

    @await Html.PartialAsync("_MatchLocationMap")

    @Html.Raw(Model.MatchLocation.MatchLocationNotes)
</div>