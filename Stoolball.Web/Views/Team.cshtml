@inherits Umbraco.Web.Mvc.UmbracoViewPage<Stoolball.Web.Teams.TeamViewModel>
@using Stoolball.Teams
@using Stoolball.Web.Competitions
@using Stoolball.Security
@using Stoolball.SocialMedia
@using Humanizer
@using ClientDependency.Core.Mvc
@{
    var authorizedToEdit = Model.IsAuthorized[AuthorizedAction.EditTeam] || Model.IsAuthorized[AuthorizedAction.DeleteTeam];
    Html.RequiresJs("/teams/team.js");
}
<div class="container-xl">
    <h1>@Model.Team.TeamNameLocationAndPlayerType()</h1>

    @if (Model.Team.UntilYear.HasValue)
    {
        <div class="alert alert-info">
            <p><strong>This team is no longer active.</strong></p>
        </div>
    }

    <ul class="nav nav-tabs@(authorizedToEdit ? " nav-tabs-has-edit" : string.Empty)">
        <li class="nav-item">
            <em class="nav-link active">Summary</em>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Team.TeamRoute/matches">Matches</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Team.TeamRoute/statistics">Statistics</a>
        </li>
        @if (authorizedToEdit)
        {
            <li class="nav-item nav-item-admin">
                <a class="nav-link nav-link-edit" href="@Model.Team.TeamRoute/edit">Edit team</a>
            </li>
        }
    </ul>

    @Html.Raw(Model.Team.Introduction)

    @if (Model.Team.MatchLocations.Count > 0 || !string.IsNullOrWhiteSpace(Model.Team.PlayingTimes))
    {
        <h2>When and where</h2>
        if (Model.Team.MatchLocations.Count > 0)
        {
            <p>This team plays at @Html.Raw(Model.Team.MatchLocations.Humanize(x => $"<a href=\"{Html.Encode(x.MatchLocationRoute)}\">{Html.Encode(x.NameAndLocalityOrTownIfDifferent())}</a>")).</p>
        }
        if (!string.IsNullOrWhiteSpace(Model.Team.PlayingTimes))
        {
            @Html.Raw(Model.Team.PlayingTimes)
        }
    }

    @{
        var seasonListModel = new SeasonListViewModel
        {
            ShowCompetitionHeading = true
        };
        seasonListModel.Competitions.AddRange(Model.Team.Seasons
            .GroupBy(x => x.Season.Competition.CompetitionId)
            .Select(seasonsInACompetition =>
            {
                var competition = seasonsInACompetition.First().Season.Competition;
                competition.Seasons.AddRange(seasonsInACompetition.Select(season => season.Season));
                return competition;
            }));

        @Html.Partial("_SeasonListExpandable", seasonListModel);
    }

    @if (!string.IsNullOrWhiteSpace(Model.Team.Cost))
    {
        <h2>How much does it cost?</h2>
        @Html.Raw(Model.Team.Cost)
    }

    <h2>Contact details</h2>
    @{
        var socialMedia = new SocialMedia
        {
            DisplayName = Model.Team.TeamName,
            Facebook = Model.Team.Facebook,
            Twitter = Model.Team.Twitter,
            Instagram = Model.Team.Instagram,
            YouTube = Model.Team.YouTube
        };
        if (!string.IsNullOrWhiteSpace(Model.Team.PublicContactDetails) || !string.IsNullOrWhiteSpace(Model.Team.Website) || socialMedia.HasSocialMedia())
        {
            @Html.Raw(Model.Team.PublicContactDetails)

            if (!string.IsNullOrWhiteSpace(Model.Team.Website))
            {
                <p>Visit <a href="@Model.Team.Website">@Model.Team.TeamName's website</a>.</p>
            }

            @Html.Partial("_SocialMedia", socialMedia)
        }
        else if (Model.Team.TeamType != TeamType.Representative)
        {
            // Prompt for more contact information, unless it's a representative team when we don't expect it
            @Html.Partial("_ContactDetailsMissing", "team")
        }
    }

    @if (Model.Team.ClubMark)
    {
        @Html.Partial("_ClubMark")
    }
</div>