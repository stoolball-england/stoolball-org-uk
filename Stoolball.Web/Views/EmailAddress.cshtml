@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.EmailAddress>
@using ContentModels = Umbraco.Web.PublishedModels;
@using ClientDependency.Core.Mvc
@using System.Web.Mvc.Html
@using Umbraco.Web
@using Stoolball.Web.Account
@using Stoolball.Web.Email
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("~/scripts/jquery.validate.min.js");
    Html.RequiresJs("~/scripts/jquery.validate.unobtrusive.min.js");
}
<div class="container-xl">
    <h1>@Model.Name</h1>

    @if (User.Identity.IsAuthenticated)
    {
        if (TempData["Success"] == null)
        {
            using (Html.BeginUmbracoForm<EmailAddressSurfaceController>("UpdateEmailAddress"))
            {
                @Html.AntiForgeryToken()
                var formData = new EmailAddressFormData();
                formData.RequestedEmail = Members.CurrentUserName;

                <div class="form-group">
                    @Html.LabelFor(m => formData.RequestedEmail)
                    @Html.TextBoxFor(m => formData.RequestedEmail, new { @class = "form-control", required = "required", aria_describedby = "form-email", autocorrect = "off", autocapitalize = "off", autocomplete = "email", type = "email" })
                    @Html.ValidationMessageFor(m => formData.RequestedEmail, null, new { id = "form-email" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => formData.Password)
                    @{ var describedBy = "form-password"; }
                    @if (!string.IsNullOrEmpty(Model.PasswordHelp))
                    {
                        describedBy = "form-password form-password-help";
                        <p class="form-text" id="form-password-help"><small>@Model.PasswordHelp</small></p>
                    }
                    @Html.TextBoxFor(m => formData.Password, new { @class = "form-control", required = "required", aria_describedby = describedBy, type = "password", autocorrect = "off", autocapitalize = "off", autocomplete = "current-password" })
                    @Html.ValidationMessageFor(m => formData.Password, null, new { id = "form-password" })
                </div>

                <button class="btn btn-primary">@Model.Value("saveButton")</button>
            }
        }
        else
        {
            @Html.ProtectEmailAddresses(Model.Value<IHtmlString>("saved"))
        }
    }
    else
    {
        @Html.Partial("_Login")
    }
</div>