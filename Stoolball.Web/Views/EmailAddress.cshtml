@inherits UmbracoViewPage<EmailAddress>
@inject Stoolball.Email.IEmailProtector emailProtector
@inject IMemberManager memberManager
@inject IMemberService memberService
@using Stoolball.Web.Account
@using Umbraco.Cms.Core.Security
@using Umbraco.Cms.Core.Services
@using Umbraco.Cms.Core.Strings
@await Html.PartialAsync("_JQueryValidate")
@{
    var currentMemberBypassingCache = memberService.GetByKey((await memberManager.GetCurrentMemberAsync()).Key);
}
<div class="container-xl">
    <h1>@Model.Name</h1>

    @if (User.Identity?.IsAuthenticated ?? false)
    {
        if (TempData["Success"] == null)
        {
            @await Html.PartialAsync("_ConfirmEmailAddress", currentMemberBypassingCache)

            using (Html.BeginUmbracoForm<EmailAddressSurfaceController>("UpdateEmailAddress", null, new { id = "calling-it-search-disables-contact-managers" }))
            {
                <div class="form-group">
                    @Html.LabelFor(m => Model.FormData.Requested)
                    <p class="form-text" id="form-email-help">Your email address is currently <strong>@currentMemberBypassingCache.Email</strong>.</p>
                    @Html.TextBoxFor(m => Model.FormData.Requested, new { @class = "form-control", required = "required", aria_describedby = "form-email-help form-email", autocorrect = "off", autocapitalize = "off", autocomplete = "email", type = "email" })
                    @Html.ValidationMessageFor(m => Model.FormData.Requested, null, new { id = "form-email" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => Model.FormData.Password)
                    @{ var describedBy = "form-password"; }
                    @if (!string.IsNullOrEmpty(Model.PasswordHelp))
                    {
                        describedBy = "form-password form-password-help";
                        <p class="form-text" id="form-password-help"><small>@Model.PasswordHelp</small></p>
                    }
                    @Html.TextBoxFor(m => Model.FormData.Password, new { @class = "form-control", required = "required", aria_describedby = describedBy, type = "password", autocorrect = "off", autocapitalize = "off", autocomplete = "current-password" })
                    @Html.ValidationMessageFor(m => Model.FormData.Password, null, new { id = "form-password" })
                </div>

                <button class="btn btn-primary">@Model.Value("saveButton")</button>
            }
        }
        else
        {
            @Html.ProtectEmailAddresses(emailProtector, Model.Value<IHtmlEncodedString>("requested"))
        }
    }
    else
    {
        @await Html.PartialAsync("_Login")
    }
</div>