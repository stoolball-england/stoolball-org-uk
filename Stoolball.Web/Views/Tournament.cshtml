@inherits Umbraco.Web.Mvc.UmbracoViewPage<TournamentViewModel>
@using Humanizer
@using Innovative.SolarCalculator
@using Stoolball.Matches
@using ClientDependency.Core.Mvc
@using Stoolball.Web.Matches
@using Stoolball.Security
@{
    var authorizedToEdit = Model.IsAuthorized[AuthorizedAction.EditTournament] || Model.IsAuthorized[AuthorizedAction.DeleteTournament];
    Html.RequiresCss("~/matches/match.min.css");
    Html.RequiresCss("~/css/comments.min.css");
}
<div class="container-xl">
    <h1>@Html.TournamentFullNameAndPlayerType(Model.Tournament, x => Model.DateTimeFormatter.FormatDate(x, false))</h1>

    @* authorizedToEdit only needs to protect the last tab, but there's no point having only one tab *@
    @if (authorizedToEdit)
    {
        <ul class="nav nav-tabs@(authorizedToEdit ? " nav-tabs-has-edit" : string.Empty)">
            <li class="nav-item">
                <em class="nav-link active">Summary</em>
            </li>
            <li class="nav-item nav-item-admin">
                <a class="nav-link nav-link-edit" href="@Model.Tournament.TournamentRoute/edit">Edit tournament</a>
            </li>
        </ul>
    }

    <p>
        When:
        @(Model.Tournament.StartTimeIsKnown ? Model.DateTimeFormatter.FormatDateTime(Model.Tournament.StartTime) : Model.DateTimeFormatter.FormatDate(Model.Tournament.StartTime))
        @if (Model.Tournament.TournamentLocation?.Latitude != null && Model.Tournament.TournamentLocation?.Longitude != null)
        {
            var solarTimes = new SolarTimes(Model.Tournament.StartTime, Model.Tournament.TournamentLocation.Latitude, Model.Tournament.TournamentLocation.Longitude);
            @: (sunset @Model.DateTimeFormatter.FormatTime(solarTimes.Sunset))
        }
        @if (Model.Tournament.StartTime > DateTimeOffset.UtcNow)
        {
            <a type="text/calendar" href="webcal://@(Request.Url.Host == "localhost" ? Request.Url.Authority : "www.stoolball.org.uk")@(Model.Tournament.TournamentRoute).ics" rel="nofollow" class="calendar__inline">Add to calendar</a>
        }
    </p>


    @if (Model.Tournament.TournamentLocation != null)
    {
        <p>Where: <a href="@Model.Tournament.TournamentLocation.MatchLocationRoute">@Model.Tournament.TournamentLocation.NameAndLocalityOrTown()</a></p>
    }

    @if (Model.Tournament.DefaultOverSets.Any())
    {
        <p>Matches are @Model.Tournament.DefaultOverSets.Sum(x => x.Overs) overs.</p>
    }
    @{
        var showSpacesLeft = (Model.Tournament.SpacesInTournament.HasValue &&
            Model.Tournament.StartTime > DateTime.UtcNow &&
            Model.Tournament.QualificationType != TournamentQualificationType.ClosedTournament);
        if (Model.Tournament.PlayersPerTeam.HasValue ||
            showSpacesLeft ||
            Model.Tournament.Teams.Count > 0 ||
            Model.Tournament.QualificationType.HasValue)
        {
            <h2>Teams</h2>
        }

    }
    @if (Model.Tournament.PlayersPerTeam.HasValue ||
        Model.Tournament.QualificationType.HasValue ||
        showSpacesLeft)
    {
        <p>
            @if (Model.Tournament.PlayersPerTeam.HasValue)
            {
                @Model.Tournament.PlayersPerTeam.Value@: players per team.
            }
            @if (Model.Tournament.QualificationType == TournamentQualificationType.OpenTournament)
            {
                @:Any @Model.Tournament.PlayerType.Humanize(LetterCasing.LowerCase) team may enter this tournament.
            }
            else if (Model.Tournament.QualificationType == TournamentQualificationType.ClosedTournament)
            {
                @:Only invited or qualifying teams may enter this tournament.
            }
            @if (showSpacesLeft)
            {
                <strong>@Model.Tournament.SpacesInTournament spaces.</strong>
            }
        </p>
    }
    @if (Model.Tournament.Teams.Count > 0)
    {
        @Html.Partial("_TeamList", Model.Tournament.Teams.Select(x => x.Team).ToList())
    }

    @if (Model.Matches.Matches.Count > 0)
    {
        <h2>Matches</h2>
        @Html.Partial("_MatchList", Model.Matches)
    }

    @if (!string.IsNullOrWhiteSpace(Model.Tournament.TournamentNotes) || Model.Tournament.Seasons.Count > 0)
    {
        <h2>Notes</h2>
    }

    @if (!string.IsNullOrWhiteSpace(Model.Tournament.TournamentNotes))
    {
        @Html.Raw(Model.Tournament.TournamentNotes)
    }

    @if (Model.Tournament.Seasons.Count == 1)
    {
        var season = Model.Tournament.Seasons.First();
        var the = season.Competition.CompetitionName.StartsWith("THE ");

        <p>This tournament is listed in @(the ? string.Empty : "the ") <a href="@season.SeasonRoute">@season.SeasonFullName()</a>.</p>
    }
    else if (Model.Tournament.Seasons.Count > 1)
    {
        <p>This tournament is listed in the following seasons:</p>

        <ul>
            @foreach (var season in Model.Tournament.Seasons)
            {
                <li><a href="@season.SeasonRoute">@season.SeasonFullName()</a></li>
            }
        </ul>
    }

    @Html.Partial("_Comments", Model.Tournament.Comments)
</div>