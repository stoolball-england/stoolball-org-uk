@inherits UmbracoViewPage<TournamentViewModel>
@inject Stoolball.Dates.IDateTimeFormatter dateTimeFormatter
@using Stoolball.Web.Matches.Models
@using Stoolball.Security
@section head {
    <meta name="robots" content="noindex,follow" />
}
<div class="container-xl">
    <h1>Edit @Html.TournamentFullNameAndPlayerType(Model.Tournament!, x => dateTimeFormatter.FormatDate(x, false))</h1>

    @if (Model.Authorization.CurrentMemberIsAuthorized[AuthorizedAction.EditTournament] || Model.Authorization.CurrentMemberIsAuthorized[AuthorizedAction.DeleteTournament])
    {
        <dl>
            @if (Model.Authorization.CurrentMemberIsAuthorized[AuthorizedAction.EditTournament])
            {
                <dt><a href="@Model.Tournament!.TournamentRoute/edit/tournament">Edit @Html.TournamentFullName(Model.Tournament, x => dateTimeFormatter.FormatDate(x, false))</a></dt>
                <dd>Set the name, date, time and location of the tournament, who can play, the match format and the notes.</dd>
                <dt><a href="@Model.Tournament.TournamentRoute/edit/teams">Teams</a></dt>
                <dd>Set how many teams you want, and which teams have confirmed they're playing.</dd>
                <dt><a href="@Model.Tournament.TournamentRoute/edit/matches">Matches</a></dt>
                <dd>Set who plays who and in what order in the tournament.</dd>
                <dt><a href="@Model.Tournament.TournamentRoute/edit/seasons">Where to list the tournament</a></dt>
                <dd>Set which competitions to list this tournament in.</dd>
            }
            @if (Model.Authorization.CurrentMemberIsAuthorized[AuthorizedAction.DeleteTournament])
            {
                <dt><a href="@Model.Tournament!.TournamentRoute/delete">Delete @Html.TournamentFullName(Model.Tournament, x => dateTimeFormatter.FormatDate(x, false))</a></dt>
                <dd>Matches and match statistics will be lost. Players and teams that only feature in this tournament will be deleted.</dd>
            }
        </dl>
        @await Html.PartialAsync("_AuthorizedMembers", Model.Authorization)
    }
    else
    {
        @await Html.PartialAsync("_Login")
    }
</div>