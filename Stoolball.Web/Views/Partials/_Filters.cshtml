@model FilterViewModel
@using Stoolball.Teams
@using Stoolball.Web.Filtering
@using System.Globalization
<div class="filter">
    @if (!string.IsNullOrWhiteSpace(Model.FilterDescription))
    {
        <p class="filter__applied">Showing @Model.FilterDescription.ToFirstLower(CultureInfo.CurrentCulture).</p>
    }
    <form method="get" action="@Context.Request.Path.Value" class="filter__edit d-none">
        <div class="form-row form-group">
            <div class="col-md-1">
                @Html.LabelFor(m => Model.from, Model.FilteredItemTypePlural + " from", new { aria_label = Model.FilteredItemTypePlural + " on or after date" })
            </div>
            <div class="col-md-11">
                @Html.TextBox(nameof(Model.from), Model.from.HasValue ? Model.from.Value.ToString("yyyy-MM-dd") : string.Empty, new { @type = "date", @class = "form-control filter__form-control", aria_describedby = "from-date", data_val_date = "Enter a date in YYYY-MM-DD format." })
                @Html.ValidationMessageFor(m => Model.from, null, new { id = "from-date" })
                @Html.LabelFor(m => Model.to, "until", new { aria_label = Model.FilteredItemTypePlural + " on or before date" })
                @Html.TextBox(nameof(Model.to), Model.to.HasValue ? Model.to.Value.ToString("yyyy-MM-dd") : string.Empty, new { @type = "date", @class = "form-control filter__form-control", aria_describedby = "to-date", data_val_date = "Enter a date in YYYY-MM-DD format." })
                @Html.ValidationMessageFor(m => Model.to, null, new { id = "to-date" })
            </div>
        </div>
        @if (Model.SupportsTeamFilter)
        {
            @if (Model.Teams.Any())
            {
                @if (Model.Teams.Count() > 1)
                {
                    <div class="form-row form-group">
                        <div class="col-md-1">
                            @Html.LabelFor(m => Model.team)
                        </div>
                        <div class="col-md-11">
                            @Html.DropDownListFor(m => Model.team, Model.Teams.Select(x => new SelectListItem{ Text = x.TeamName, Value = x.TeamRoute.ToString().TrimStart("/teams/") }), "Any team", new { @class="form-control" })
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="form-group form-row related-item">
                    <div class="col-md-1">
                    @Html.LabelFor(m => Model.TeamName)
                    </div>
                    <div class="col-md-11">
                        @if (!string.IsNullOrEmpty(Model.TeamName))
                        {
                             <div class="single-related-item__selected">
                                <div class="related-item__selected__section">
                                    @Html.TextBoxFor(m => Model.TeamName, new { @class = "form-control filter__never-submit", @readonly = "readonly" })
                                </div>
                                <div class="related-item__delete related-item__selected__section">
                                    @Html.HiddenFor(m => Model.team, new { @class = "related-item__data related-item__id" })
                                    <button class="btn-delete-icon" type="button">@await Html.PartialAsync("_DeleteIcon", $"Clear team filter")</button>
                                </div>
                            </div>
                            Model.TeamName = string.Empty;
                            @Html.TextBoxFor(m => Model.TeamName, new
                            {
                                @class = "form-control related-item__search filter__never-submit",
                                placeholder = "Type the team name",
                                autocomplete = "off",
                                type = "search",
                                data_url = $"/api/teams/autocomplete?data=route&teamType={TeamType.LimitedMembership.ToString()}&teamType={TeamType.Occasional.ToString()}&teamType={TeamType.Regular.ToString()}&teamType={TeamType.Representative.ToString()}&teamType={TeamType.SchoolAgeGroup.ToString()}&teamType={TeamType.SchoolClub.ToString()}&teamType={TeamType.SchoolOther.ToString()}",
                                data_template = "team-template",
                                aria_label = "Type a team name and press down arrow to select from the matching choices",
                                disabled = "disabled"
                            })                            
                        }
                        else
                        {
                            @Html.TextBoxFor(m => Model.TeamName, new
                            {
                                @class = "form-control related-item__search filter__never-submit",
                                placeholder = "Type a team name",
                                autocomplete = "off",
                                type = "search",
                                data_url = $"/api/teams/autocomplete?data=route&teamType={TeamType.LimitedMembership.ToString()}&teamType={TeamType.Occasional.ToString()}&teamType={TeamType.Regular.ToString()}&teamType={TeamType.Representative.ToString()}&teamType={TeamType.SchoolAgeGroup.ToString()}&teamType={TeamType.SchoolClub.ToString()}&teamType={TeamType.SchoolOther.ToString()}",
                                data_template = "team-template",
                                aria_label = "Type a team name and press down arrow to select from the matching choices"
                            })                            
                        }

                    </div>
                </div>
                <script type="text/x-template" id="team-template">
                    <div class="single-related-item__selected">
                        <div class="related-item__selected__section">
                            <input type="text" readonly="readonly" value="{{value}}" class="form-control filter__never-submit" id="teamName" name="teamName" />
                        </div>
                        <div class="related-item__delete related-item__selected__section">
                            <input name="team" class="related-item__data related-item__id" type="hidden" value="{{data}}" />
                            <button class="btn-delete-icon" type="button">@await Html.PartialAsync("_DeleteIcon", "Clear team filter")</button>
                        </div>
                    </div>
                </script>
            }
        }
        <div class="form-group"><button class="btn btn-secondary btn-apply-filter" type="submit">Apply filter</button></div>
    </form>
</div>
