@inherits Umbraco.Web.Mvc.UmbracoViewPage<StatisticsViewModel<BowlingFigures>>
@using Stoolball.Dates
@using Stoolball.Statistics
@using Stoolball.Web.Statistics
@using Umbraco.Core.Composing
@{
    var dateTimeFormatter = Current.Factory.CreateInstance<DateTimeFormatter>();
}
@if (Model.Results.Any())
{
    <table class="statistics table-as-cards table-as-cards-reset-md">
        @if (Model.ShowCaption)
        {
            <caption>Best bowling figures</caption>
        }
        <thead>
            <tr>
                <th scope="col">#</th>
                @if (Model.ShowPlayerColumn)
                {
                    <th scope="col">Player</th>

                }
                <th scope="col">Match</th>
                <th scope="col">When</th>
                <th scope="col" class="numeric">Wickets</th>
                <th scope="col" class="numeric">Runs</th>
            </tr>
        </thead>
        <tbody>
            @{
                int? previousWickets = null;
                int? previousRuns = null;
                for (var i = 0; i < Model.Results.Count(); i++)
                {
                    var equalToPrevious = Model.Results[i].Result.Wickets == previousWickets && Model.Results[i].Result.RunsConceded == previousRuns;
                    previousWickets = Model.Results[i].Result.Wickets;
                    previousRuns = Model.Results[i].Result.RunsConceded;
                    <tr>
                        <td class="table-as-cards__header-md">@(equalToPrevious ? "=" : ((Model.StatisticsFilter.Paging.PageSize * (Model.StatisticsFilter.Paging.PageNumber - 1)) + i + 1).ToString())</td>
                        @if (Model.ShowPlayerColumn)
                        {
                            <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Player</span><a href="@Model.Results[i].Player.PlayerRoute">@(Model.Results[i].Player.PlayerName())</a></td>
                        }
                        <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Match</span><div><a href="@Model.Results[i].Match.MatchRoute">@Model.Results[i].Match.MatchName</a></div></td>
                        <td data-stackable="true" class="text-nowrap"><span class="table-as-cards__label" aria-hidden="true">When</span>@(dateTimeFormatter.FormatDate(Model.Results[i].Match.StartTime.LocalDateTime, false, true, false))</td>
                        <td data-stackable="true" class="numeric-md"><span class="table-as-cards__label" aria-hidden="true">Wickets</span><span class="wickets">@Model.Results[i].Result.Wickets</span></td>
                        @if (Model.Results[i].Result.RunsConceded.HasValue)
                        {
                            <td data-stackable="true" class="numeric-md"><span class="table-as-cards__label" aria-hidden="true">Runs</span>@Model.Results[i].Result.RunsConceded.Value</td>
                        }
                        else
                        {
                            <td data-stackable="true" class="numeric-md missing-data">–</td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    if (Model.StatisticsFilter.MaxResultsAllowingExtraResultsIfValuesAreEqual.HasValue)
    {
        <p><a href="@Request.RawUrl.TrimEnd("/bowling")/bowling-figures">Bowling figures – view all</a></p>
    }
    else
    {
        @Html.Partial("_Paging", Model.StatisticsFilter.Paging)
    }
}