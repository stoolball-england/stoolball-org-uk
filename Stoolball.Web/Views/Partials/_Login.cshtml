@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IPublishedContent>
@inject Stoolball.Email.IEmailProtector emailProtector
@inject IMemberManager memberManager
@using Umbraco.Cms.Core.Strings
@using Umbraco.Cms.Core.Security
@using Umbraco.Cms.Web.Common.Models
@using Stoolball.Web.Account
@{
    var loginPage = Umbraco.ContentSingleAtXPath("//loginMember");
    var loginModel = new LoginModel();
    loginModel.RedirectUrl = Context.Request.Query["ReturnUrl"].ToString();
    if (!loginModel.RedirectUrl.StartsWith("/"))
    {
        loginModel.RedirectUrl = "/";
    }
}

@if (Model.Key != loginPage?.Key)
{
    if (User.Identity?.IsAuthenticated ?? false)
    {
        var permissionRequired = loginPage.Value<IHtmlEncodedString>("permissionRequired").ToHtmlString().Replace("{{NAME}}", (await memberManager.GetCurrentMemberAsync())?.Name);
        @Html.ProtectEmailAddresses(emailProtector, permissionRequired)
    }
    else
    {
        @Html.ProtectEmailAddresses(emailProtector, loginPage.Value<IHtmlEncodedString>("loginRequired"))
    }
    loginModel.RedirectUrl = Context.Request.Path;
}

@using (Html.BeginUmbracoForm<LoginMemberSurfaceController>(nameof(LoginMemberSurfaceController.Login)))
{
    @Html.HiddenFor(m => loginModel.RedirectUrl)
    @Html.ValidationSummary("loginModel", true)

    <div class="form-group">
        @Html.LabelFor(m => loginModel.Username, "Email")
        @Html.TextBoxFor(m => loginModel.Username, new { @class = "form-control", type = "email", required = "required", aria_describedby = "form-email", autocorrect = "off", autocapitalize = "off", autocomplete="username" })
        @Html.ValidationMessageFor(m => loginModel.Username, "The email field is required", new { id = "form-email" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => loginModel.Password)
        @Html.PasswordFor(m => loginModel.Password, new { @class = "form-control", required = "required", aria_describedby = "form-password", autocorrect = "off", autocapitalize = "off", autocomplete="current-password" })
        @Html.ValidationMessageFor(m => loginModel.Password, "The password field is required", new { id = "form-password" })
    </div>

    <button class="btn btn-primary">@loginPage.Value("loginButton")</button>
}

@Html.ProtectEmailAddresses(emailProtector, loginPage?.Value<IHtmlEncodedString>("resetPassword"))

@if (loginPage != null && loginPage.HasValue("migratedMemberAccounts"))
{
    <div class="alert alert-info">
        @Html.ProtectEmailAddresses(emailProtector, loginPage?.Value<IHtmlEncodedString>("migratedMemberAccounts"))
    </div>
}
