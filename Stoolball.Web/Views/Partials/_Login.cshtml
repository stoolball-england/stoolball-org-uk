@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.PublishedContentModel>
@using ContentModels = Umbraco.Core.Models.PublishedContent;
@using Umbraco.Web
@using Umbraco.Web.Models
@using Stoolball.Web.Account
@using Stoolball.Web.Email
@{
    var loginPage = Umbraco.ContentSingleAtXPath("//loginMember");
    var loginModel = new LoginModel();
    loginModel.RedirectUrl = "/";
}

@if (Model.Key != loginPage?.Key)
{
    @Html.ProtectEmailAddresses(loginPage.Value<IHtmlString>("loginRequired"))
    loginModel.RedirectUrl = Model.Url;
}

@using (Html.BeginUmbracoForm<LoginMemberSurfaceController>("Login"))
{
    @Html.HiddenFor(m => loginModel.RedirectUrl)
    @Html.ValidationSummary("loginModel", true)
    @Html.AntiForgeryToken()

    <div class="form-group">
        @Html.LabelFor(m => loginModel.Username, "Email")
        @Html.TextBoxFor(m => loginModel.Username, new { @class = "form-control", type = "email", required = "required", aria_describedby = "form-email", autocorrect="off", autocapitalize="off" })
        @Html.ValidationMessageFor(m => loginModel.Username, null, new { id = "form-email" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => loginModel.Password)
        @Html.PasswordFor(m => loginModel.Password, new { @class = "form-control", required = "required", aria_describedby = "form-password", autocorrect="off", autocapitalize="off" })
        @Html.ValidationMessageFor(m => loginModel.Password, null, new { id = "form-password" })
    </div>

    <button class="btn btn-primary">@loginPage.Value("loginButton")</button>
}

@Html.ProtectEmailAddresses(loginPage?.Value<IHtmlString>("resetPassword"))

@if (loginPage != null && loginPage.HasValue("migratedMemberAccounts"))
{
    <div class="alert alert-info">
        @Html.ProtectEmailAddresses(loginPage?.Value<IHtmlString>("migratedMemberAccounts"))
    </div>
}
