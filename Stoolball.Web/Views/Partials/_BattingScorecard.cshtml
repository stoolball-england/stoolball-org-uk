@model ScorecardViewModel
@using Stoolball.Matches
@using Stoolball.Web.Matches
@using System.Globalization
@using Humanizer
@{
    // If no player innings, only show a minimal scorecard
    var minimalScorecard = !Model.MatchInnings.PlayerInnings.Any();

    // If no total, wickets, or batters, don't show anything
    var nothingToDisplay = (minimalScorecard && !Model.MatchInnings.Runs.HasValue && !Model.MatchInnings.Wickets.HasValue);
    if (!nothingToDisplay)
    {
        <table class="batting-scorecard table-hover table-as-cards table-as-cards-reset-sm">
            <caption>@Model.MatchInnings.BattingTeam.Team.TeamName's batting@(Model.TotalInningsInMatch > 2 ? $" ({(Model.MatchInnings.InningsOrderInMatch/2+Model.MatchInnings.InningsOrderInMatch%2).Ordinalize()} innings)" : null)</caption>

            @if (!minimalScorecard)
            {
                <thead>
                    <tr><th scope="col">Batter</th><th scope="col">How out</th><th scope="col">Bowler</th><th scope="col" class="numeric">Runs</th><th scope="col" class="numeric balls-faced-header">Balls</th></tr>
                </thead>
            }
            @if (Model.MatchInnings.PlayerInnings.Count > 0)
            {
                <tbody>
                @foreach (var playerInnings in Model.MatchInnings.PlayerInnings)
                {
                    <tr>
                        <th class="player-name"><a href="@playerInnings.Batter.Player.PlayerRoute">@playerInnings.Batter.PlayerIdentityName</a></th>
                        <td data-stackable="true">
                            <span class="table-as-cards__label" aria-hidden="true">How out</span>
                            @if (playerInnings.DismissalType == DismissalType.NotOut)
                            {
                                <strong>@(playerInnings.DismissalType?.Humanize(LetterCasing.LowerCase))</strong>
                            }
                            else
                            {
                                <div>
                                    @* makes the dismissal type and player name a single flex item with .table-as-cards at small sizes *@
                                @(playerInnings.DismissalType?.Humanize(LetterCasing.LowerCase).Replace("run out", "run-out") ?? "not known")
                                @if ((playerInnings.DismissalType == DismissalType.Caught || playerInnings.DismissalType == DismissalType.RunOut) && playerInnings.DismissedBy != null)
                                {
                                    <span class="player-name dismissed-by">(<a href="@playerInnings.DismissedBy.Player.PlayerRoute">@playerInnings.DismissedBy.PlayerIdentityName</a>)</span>
                                }
                            </div>
                        }
                        </td>
                        @if (playerInnings.Bowler != null)
                        {
                            <td class="player-name" data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Bowler</span><a href="@playerInnings.Bowler.Player.PlayerRoute">@playerInnings.Bowler.PlayerIdentityName</a></td>
                        }
                        else
                        {
                            <td class="player-name d-none d-sm-table-cell"></td>
                        }
                        @if (playerInnings.RunsScored.HasValue)
                        {
                            <td class="numeric-sm runs" data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Runs</span>@playerInnings.RunsScored</td>
                        }
                        else
                        {
                            <td class="numeric-sm runs d-none d-sm-table-cell"></td>
                        }
                        @if (playerInnings.BallsFaced.HasValue)
                        {
                            <td class="numeric-sm" data-stackable="true">
                                <span class="table-as-cards__label" aria-hidden="true">Balls</span>
                                <span class="balls-faced">@playerInnings.BallsFaced</span>
                            </td>
                        }
                        else
                        {
                            <td class="numeric d-none d-sm-table-cell"></td>
                        }
                    </tr>
                }
                </tbody>
            }
            <tbody>
                @{
                    if (Model.MatchInnings.Byes.HasValue || !minimalScorecard)
                    {
                        @Html.Partial("_BattingScorecardExtrasRow", new ExtrasRowViewModel { RowLabel = "Byes", CssClass = "scorecard__extras", RowValue = Model.MatchInnings.Byes?.ToString(CultureInfo.CurrentCulture), IsMinimalScorecard = minimalScorecard });
                    }
                    if (Model.MatchInnings.Wides.HasValue || !minimalScorecard)
                    {
                        @Html.Partial("_BattingScorecardExtrasRow", new ExtrasRowViewModel { RowLabel = "Wides", CssClass = "scorecard__extras", RowValue = Model.MatchInnings.Wides?.ToString(CultureInfo.CurrentCulture), IsMinimalScorecard = minimalScorecard });
                    }
                    if (Model.MatchInnings.NoBalls.HasValue || !minimalScorecard)
                    {
                        @Html.Partial("_BattingScorecardExtrasRow", new ExtrasRowViewModel { RowLabel = "No balls", CssClass = "scorecard__extras", RowValue = Model.MatchInnings.NoBalls?.ToString(CultureInfo.CurrentCulture), IsMinimalScorecard = minimalScorecard });
                    }
                    // don't show a 0 here, only if actual runs awarded or taken away
                    if (Model.MatchInnings.BonusOrPenaltyRuns.HasValue && Model.MatchInnings.BonusOrPenaltyRuns < 0)
                    {
                        @Html.Partial("_BattingScorecardExtrasRow", new ExtrasRowViewModel { RowLabel = "Penalty runs", CssClass = "scorecard__extras", RowValue = Model.MatchInnings.BonusOrPenaltyRuns.Value.ToString(CultureInfo.CurrentCulture), IsMinimalScorecard = minimalScorecard });
                    }
                    else if (Model.MatchInnings.BonusOrPenaltyRuns.HasValue && Model.MatchInnings.BonusOrPenaltyRuns > 0)
                    {
                        @Html.Partial("_BattingScorecardExtrasRow", new ExtrasRowViewModel { RowLabel = "Bonus runs", CssClass = "scorecard__extras", RowValue = Model.MatchInnings.BonusOrPenaltyRuns.Value.ToString(CultureInfo.CurrentCulture), IsMinimalScorecard = minimalScorecard });
                    }
                    @Html.Partial("_BattingScorecardExtrasRow", new ExtrasRowViewModel { RowLabel = "Total", CssClass = "scorecard__totals" + (Model.MatchInnings.Runs.HasValue ? string.Empty : " d-none d-sm-table-row"), RowValue = Model.MatchInnings.Runs?.ToString(CultureInfo.CurrentCulture), IsMinimalScorecard = minimalScorecard });
                    @Html.Partial("_BattingScorecardExtrasRow", new ExtrasRowViewModel { RowLabel = "Wickets", CssClass = "scorecard__totals" + (Model.MatchInnings.Wickets.HasValue ? string.Empty : " d-none d-sm-table-row"), RowValue = (Model.MatchInnings.Wickets == -1) ? "all out" : Model.MatchInnings.Wickets?.ToString(CultureInfo.CurrentCulture), IsMinimalScorecard = minimalScorecard });
                }
            </tbody>
        </table>
    }
}