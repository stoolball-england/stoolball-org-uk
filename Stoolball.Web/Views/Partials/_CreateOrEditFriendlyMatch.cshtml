@model EditFriendlyMatchViewModel
@using Stoolball.Web.Matches
@using Stoolball.Web.HtmlHelpers
@using Stoolball.Teams
@Html.AntiForgeryToken()
@Html.ValidationSummary(true)

@if (Model.Season != null)
{
    @Html.HiddenFor(m => Model.Match.Season.SeasonId)
}
else if (Model.PossibleSeasons.Count > 0)
{
    <div class="form-group">
        @Html.LabelFor(m => Model.Match.Season.SeasonId, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
        @Html.DropDownListFor(m => Model.Match.Season.SeasonId, Model.PossibleSeasons, "None", new { @class = "form-control", aria_describedby = "match-season" })
        @Html.ValidationMessageFor(m => Model.Match.Season.SeasonId, null, new { id = "match-season" })
    </div>
}
else
{
    <div class="form-group related-item">
        @Html.LabelFor(m => Model.Match.Season.SeasonId)
        @if (Model.Match.Season != null)
        {
            <div class="related-item__selected">
                <div class="related-item__selected__section">
                    @Html.TextBoxFor(m => Model.SeasonFullName, new { @class = "form-control", @readonly = "readonly" })
                </div>
                <div class="related-item__delete related-item__selected__section">
                    @Html.HiddenFor(m => Model.Match.Season.SeasonId, new { @class = "related-item__data related-item__id" })
                    <button type="button" class="btn-delete-icon">@Html.Partial("_DeleteIcon", $"Remove this match from {Model.SeasonFullName}")</button>
                </div>
            </div>
            Model.SeasonFullName = string.Empty;
            @Html.TextBoxFor(m => Model.SeasonFullName, new
            {
                @class = "form-control related-item__search",
                placeholder = "Type the season name",
                autocomplete = "off",
                type = "search",
                data_url = "/api/seasons/autocomplete?matchType=FriendlyMatch",
                data_template = "season-template",
                aria_label = "Type a season name and press down arrow to select from the matching choices",
                disabled = "disabled"
            })
        }
        else
        {
            @Html.TextBoxFor(m => Model.SeasonFullName, new
            {
                @class = "form-control related-item__search",
                placeholder = "Type the season name",
                autocomplete = "off",
                type = "search",
                data_url = "/api/seasons/autocomplete",
                data_template = "season-template",
                aria_label = "Type a season name and press down arrow to select from the matching choices"
            })
        }
    </div>
    <script type="text/x-template" id="season-template">
        <div class="related-item__selected">
            <div class="related-item__selected__section">
                <input type="text" readonly="readonly" value="{{value}}" class="form-control" id="SeasonFullName" name="SeasonFullName" />
            </div>
            <div class="related-item__delete related-item__selected__section">
                <input name="Match.Season.SeasonId" class="related-item__data related-item__id" type="hidden" value="{{data}}" />
                <button type="button" class="btn-delete-icon">@Html.Partial("_DeleteIcon", "Remove this match from {{value}}")</button>
            </div>
        </div>
    </script>
}

<div class="form-group">
    @Html.LabelFor(m => Model.MatchDate)
    @Html.TextBoxFor(m => Model.MatchDate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control", required = "required", aria_describedby = "match-date" })
    @Html.ValidationMessageFor(m => Model.MatchDate, null, new { id = "match-date" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.StartTime, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    @Html.TextBoxFor(m => Model.StartTime, "{0:HH:mm}", new { @type = "time", @class = "form-control", aria_describedby = "start-time" })
    @Html.ValidationMessageFor(m => Model.StartTime, null, new { id = "start-time" })
</div>

<div class="form-group related-item">
    @Html.LabelFor(m => Model.HomeTeamId, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    <p class="form-text" id="home-team-or"><small>If you're still arranging the match you can fill in one team and leave the other blank.</small></p>
    @if (Model.HomeTeamId.HasValue)
    {
        <div class="related-item__selected">
            <div class="related-item__selected__section">
                @Html.TextBoxFor(m => Model.HomeTeamName, new { @class = "form-control", @readonly = "readonly", aria_describedby = "home-team-or home-team" })
            </div>
            <div class="related-item__delete related-item__selected__section">
                @Html.HiddenFor(m => Model.HomeTeamId, new { @class = "related-item__data related-item__id" })
                <button class="btn-delete-icon">@Html.Partial("_DeleteIcon", $"Remove {Model.HomeTeamName} from this match")</button>
            </div>
        </div>
        Model.HomeTeamName = string.Empty;
        @Html.TextBoxFor(m => Model.HomeTeamName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the home team name",
            autocomplete = "off",
            type = "search",
            data_url = $"/api/teams/autocomplete?teamType={TeamType.LimitedMembership.ToString()}&teamType={TeamType.Occasional.ToString()}&teamType={TeamType.Regular.ToString()}&teamType={TeamType.Representative.ToString()}&teamType={TeamType.SchoolAgeGroup.ToString()}&teamType={TeamType.SchoolClub.ToString()}&teamType={TeamType.SchoolOther.ToString()}",
            data_template = "home-team-template",
            aria_label = "Type a team name and press down arrow to select from the matching choices",
            disabled = "disabled"
        })
    }
    else
    {
        @Html.TextBoxFor(m => Model.HomeTeamName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the home team name",
            autocomplete = "off",
            type = "search",
            data_url = $"/api/teams/autocomplete?teamType={TeamType.LimitedMembership.ToString()}&teamType={TeamType.Occasional.ToString()}&teamType={TeamType.Regular.ToString()}&teamType={TeamType.Representative.ToString()}&teamType={TeamType.SchoolAgeGroup.ToString()}&teamType={TeamType.SchoolClub.ToString()}&teamType={TeamType.SchoolOther.ToString()}",
            data_template = "home-team-template",
            aria_label = "Type a team name and press down arrow to select from the matching choices"
        })
    }
    @Html.ValidationMessageFor(m => Model.HomeTeamId, null, new { id = "home-team" })
</div>
<script type="text/x-template" id="home-team-template">
    <div class="related-item__selected">
        <div class="related-item__selected__section">
            <input type="text" readonly="readonly" value="{{value}}" class="form-control" id="HomeTeamName" name="HomeTeamName" aria-describedby="home-team-or home-team" />
        </div>
        <div class="related-item__delete related-item__selected__section">
            <input name="HomeTeamId" class="related-item__data related-item__id" type="hidden" value="{{data}}" />
            <button class="btn-delete-icon">@Html.Partial("_DeleteIcon", "Remove {{value}} from this match")</button>
        </div>
    </div>
</script>

<div class="form-group related-item">
    @Html.LabelFor(m => Model.AwayTeamId, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    <p class="form-text" id="away-team-or"><small>If you're still arranging the match you can fill in one team and leave the other blank.</small></p>
    @if (Model.AwayTeamId.HasValue)
    {
        <div class="related-item__selected">
            <div class="related-item__selected__section">
                @Html.TextBoxFor(m => Model.AwayTeamName, new { @class = "form-control", @readonly = "readonly", aria_describedby = "away-team-or" })
            </div>
            <div class="related-item__delete related-item__selected__section">
                @Html.HiddenFor(m => Model.AwayTeamId, new { @class = "related-item__data related-item__id" })
                <button class="btn-delete-icon">@Html.Partial("_DeleteIcon", $"Remove {Model.AwayTeamName} from this match")</button>
            </div>
        </div>
        Model.AwayTeamName = string.Empty;
        @Html.TextBoxFor(m => Model.AwayTeamName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the away team name",
            autocomplete = "off",
            type = "search",
            data_url = $"/api/teams/autocomplete?teamType={TeamType.LimitedMembership.ToString()}&teamType={TeamType.Occasional.ToString()}&teamType={TeamType.Regular.ToString()}&teamType={TeamType.Representative.ToString()}&teamType={TeamType.SchoolAgeGroup.ToString()}&teamType={TeamType.SchoolClub.ToString()}&teamType={TeamType.SchoolOther.ToString()}",
            data_template = "away-team-template",
            aria_label = "Type a team name and press down arrow to select from the matching choices",
            disabled = "disabled"
        })
    }
    else
    {
        @Html.TextBoxFor(m => Model.AwayTeamName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the away team name",
            autocomplete = "off",
            type = "search",
            data_url = $"/api/teams/autocomplete?teamType={TeamType.LimitedMembership.ToString()}&teamType={TeamType.Occasional.ToString()}&teamType={TeamType.Regular.ToString()}&teamType={TeamType.Representative.ToString()}&teamType={TeamType.SchoolAgeGroup.ToString()}&teamType={TeamType.SchoolClub.ToString()}&teamType={TeamType.SchoolOther.ToString()}",
            data_template = "away-team-template",
            aria_label = "Type a team name and press down arrow to select from the matching choices"
        })
    }
    @Html.ValidationMessageFor(m => Model.AwayTeamId, null, new { id = "away-team" })
</div>
<script type="text/x-template" id="away-team-template">
    <div class="related-item__selected">
        <div class="related-item__selected__section">
            <input type="text" readonly="readonly" value="{{value}}" class="form-control" id="AwayTeamName" name="AwayTeamName" aria-describedby="away-team-or away-team" />
        </div>
        <div class="related-item__delete related-item__selected__section">
            <input name="AwayTeamId" class="related-item__data related-item__id" type="hidden" value="{{data}}" />
            <button class="btn-delete-icon">@Html.Partial("_DeleteIcon", "Remove {{value}} from this match")</button>
        </div>
    </div>
</script>

<div class="form-group related-item">
    @Html.LabelFor(m => Model.MatchLocationName, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    @if (Model.MatchLocationId.HasValue)
    {
        <div class="related-item__selected">
            <div class="related-item__selected__section">
                @Html.TextBoxFor(m => Model.MatchLocationName, new { @class = "form-control", @readonly = "readonly" })
            </div>
            <div class="related-item__delete related-item__selected__section">
                @Html.HiddenFor(m => Model.MatchLocationId, new { @class = "related-item__data related-item__id" })
                <button class="btn-delete-icon">@Html.Partial("_DeleteIcon", $"Remove {Model.MatchLocationName} from this match")</button>
            </div>
        </div>
        Model.MatchLocationName = string.Empty;
        @Html.TextBoxFor(m => Model.MatchLocationName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the ground or sports centre name",
            autocomplete = "off",
            type = "search",
            data_url = "/api/locations/autocomplete",
            data_template = "location-template",
            aria_label = "Type a ground or sports centre name add and press down arrow to select from the matching choices",
            disabled = "disabled"
        })
    }
    else
    {
        @Html.TextBoxFor(m => Model.MatchLocationName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the ground or sports centre name",
            autocomplete = "off",
            type = "search",
            data_url = "/api/locations/autocomplete",
            data_template = "location-template",
            aria_label = "Type a ground or sports centre name add and press down arrow to select from the matching choices"
        })
    }
</div>
<script type="text/x-template" id="location-template">
    <div class="related-item__selected">
        <div class="related-item__selected__section">
            <input type="text" readonly="readonly" value="{{value}}" class="form-control" id="MatchLocationName" name="MatchLocationName" />
        </div>
        <div class="related-item__delete related-item__selected__section">
            <input name="MatchLocationId" class="related-item__data related-item__id" type="hidden" value="{{data}}" />
            <button class="btn-delete-icon">@Html.Partial("_DeleteIcon", "Remove {{value}} from this match")</button>
        </div>
    </div>
</script>

<div class="form-group">
    @Html.LabelFor(m => Model.Match.MatchNotes, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    @Html.TextAreaFor(m => Model.Match.MatchNotes, new { @class = "form-control", aria_describedby = "notes-validation" })
    @Html.ValidationMessageFor(m => Model.Match.MatchNotes, null, new { id = "notes-validation" })
</div>