@model MatchListingViewModel
@using Humanizer
@using Stoolball.Matches
@using Stoolball.Web.Matches
@using System.Text

@if (Model.Matches.Any())
{
    DateTimeOffset? dateOfNextMatch = null;
    <ol>
        @foreach (var match in Model.Matches)
        {
            if (match.MatchType == null)
            {
                var playerType = string.Empty;
                if (!match.MatchName.Replace("'", string.Empty).ToUpperInvariant().Contains(match.PlayerType.ToString().Replace("'", string.Empty).ToUpperInvariant()))
                {
                    playerType = $" ({match.PlayerType.Humanize(LetterCasing.Sentence)})";
                }

                var fullstop = false;
                var tournamentDetail = new StringBuilder(Model.DateTimeFormatter.FormatDateTime(match.StartTime.LocalDateTime));
                if (match.TournamentQualificationType == TournamentQualificationType.OpenTournament)
                {
                    tournamentDetail.Append(". ");
                    fullstop = true;
                    tournamentDetail.Append("Open. ");
                }
                else if (match.TournamentQualificationType == TournamentQualificationType.ClosedTournament)
                {
                    tournamentDetail.Append(". ");
                    fullstop = true;
                    tournamentDetail.Append("Invited teams only. ");
                }

                var showSpaces = false;
                if (match.SpacesInTournament > 0 && match.TournamentQualificationType != TournamentQualificationType.ClosedTournament)
                {
                    if (!fullstop)
                    {
                        tournamentDetail.Append(". ");
                        fullstop = true;
                    }
                    showSpaces = true;
                }

                var matchClass = (match.StartTime <= DateTime.UtcNow.AddHours(-6)) ? "match-list__past" : "match-list__future";
                if (!dateOfNextMatch.HasValue && matchClass == "match-list__future") { dateOfNextMatch = match.StartTime.Date; }
                if (dateOfNextMatch == match.StartTime.Date) { matchClass += " match-list__next"; }

                <li class="@matchClass">
                    <a href="@match.MatchRoute">@match.MatchName@playerType</a>
                    <p>
                        @tournamentDetail@if (showSpaces)
                        {
                            @:<strong>@match.SpacesInTournament spaces.</strong>
                        }
                    </p>
                </li>
            }
            else
            {
                var matchClass = string.Empty;
                if (Model.ShowMatchDate)
                {
                    matchClass = (match.StartTime <= DateTime.UtcNow.AddHours(-2)) ? "match-list__past" : "match-list__future";
                    if (!dateOfNextMatch.HasValue && matchClass == "match-list__future") { dateOfNextMatch = match.StartTime.Date; }
                    if (dateOfNextMatch == match.StartTime.Date) { matchClass += " match-list__next"; }
                }

                var matchType = string.Empty;
                if (Model.MatchTypesToLabel.Count > 0 && Model.MatchTypesToLabel.Contains(match.MatchType.Value) && !match.MatchName.Replace("'", string.Empty).ToUpperInvariant().Contains(match.MatchType.Humanize(LetterCasing.AllCaps)))
                {
                    matchType = $" ({match.MatchType.Humanize(LetterCasing.LowerCase)})";
                }

                <li class="@matchClass">
                    <a href="@match.MatchRoute">@match.MatchName</a>@matchType
                    @if (Model.ShowMatchDate)
                    {
                        <p>@(match.StartTimeIsKnown ? Model.DateTimeFormatter.FormatDateTime(match.StartTime.LocalDateTime) : Model.DateTimeFormatter.FormatDate(match.StartTime.LocalDateTime))</p>
                    }
                </li>
            }
        }
    </ol>
}
