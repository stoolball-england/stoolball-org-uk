@model TeamViewModel
@using Stoolball.Teams
@using Stoolball.Web.Teams
@using Stoolball.Web.HtmlHelpers
@Html.ValidationSummary(true)

<div class="form-group">
    @Html.LabelFor(m => Model.Team.TeamName)
    @Html.TextBoxFor(m => Model.Team.TeamName, new { @class = "form-control", required = "required", aria_describedby = "team-name" })
    @Html.ValidationMessageFor(m => Model.Team.TeamName, null, new { id = "team-name" })
</div>

@if (Model.Team.TeamType != TeamType.Transient)
{
    <fieldset class="form-group" id="team-type">
        <legend>Type of team</legend>
        <div class="custom-control custom-radio">
            @Html.RadioButtonFor(m => Model.Team.TeamType, TeamType.Regular, new { @class = "custom-control-input", aria_describedby = "team-type-validation", @id = "team-type-1" })
            <label for="team-type-1" class="custom-control-label">Plays regularly, with open membership</label>
        </div>
        <div class="custom-control custom-radio">
            @Html.RadioButtonFor(m => Model.Team.TeamType, TeamType.Representative, new { @class = "custom-control-input", aria_describedby = "team-type-validation", @id = "team-type-2" })
            <label for="team-type-2" class="custom-control-label">Represents a league or group</label>
        </div>
        <div class="custom-control custom-radio">
            @Html.RadioButtonFor(m => Model.Team.TeamType, TeamType.LimitedMembership, new { @class = "custom-control-input", aria_describedby = "team-type-validation", @id = "team-type-3" })
            <label for="team-type-3" class="custom-control-label">Limited membership (for example, only staff can join a work team)</label>
        </div>
        <div class="custom-control custom-radio">
            @Html.RadioButtonFor(m => Model.Team.TeamType, TeamType.Occasional, new { @class = "custom-control-input", aria_describedby = "team-type-validation", @id = "team-type-4" })
            <label for="team-type-4" class="custom-control-label">Plays occasionally, with open membership</label>
        </div>
        <div class="custom-control custom-radio">
            @Html.RadioButtonFor(m => Model.Team.TeamType, TeamType.SchoolAgeGroup, new { @class = "custom-control-input", aria_describedby = "team-type-validation", @id = "team-type-5" })
            <label for="team-type-5" class="custom-control-label">School year group(s)</label>
        </div>
        <div class="custom-control custom-radio">
            @Html.RadioButtonFor(m => Model.Team.TeamType, TeamType.SchoolClub, new { @class = "custom-control-input", aria_describedby = "team-type-validation", @id = "team-type-6" })
            <label for="team-type-6" class="custom-control-label">School club (for example, after school)</label>
        </div>
        <div class="custom-control custom-radio">
            @Html.RadioButtonFor(m => Model.Team.TeamType, TeamType.SchoolOther, new { @class = "custom-control-input", aria_describedby = "team-type-validation", @id = "team-type-7" })
            <label for="team-type-7" class="custom-control-label">Other school team</label>
        </div>
        @Html.ValidationMessageFor(m => Model.Team.TeamType, null, new { id = "team-type-validation" })
    </fieldset>
}
<div class="form-group">
    @Html.LabelFor(m => Model.Team.AgeRangeLower)
    <p class="form-text" id="age-lower-help"><small>Children under 11 must not play in a game with adults. Fielding restrictions apply up to age 16.</small></p>
    @Html.TextBoxFor(m => Model.Team.AgeRangeLower, new { @class = "form-control", aria_describedby = "age-lower age-lower-help", @type = "number" })
    @Html.ValidationMessageFor(m => Model.Team.AgeRangeLower, null, new { id = "age-lower" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.Team.AgeRangeUpper, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    @Html.TextBoxFor(m => Model.Team.AgeRangeUpper, new { @class = "form-control", aria_describedby = "age-upper", @type = "number" })
    @Html.ValidationMessageFor(m => Model.Team.AgeRangeUpper, null, new { id = "age-upper" })
</div>

@if (Model.Team.TeamType != TeamType.Transient)
{
    <div class="form-group">
        @Html.LabelFor(m => Model.Team.FromYear, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
        <p class="form-text" id="from-help"><small>If you're not sure, an estimate is fine.</small></p>
        @Html.TextBoxFor(m => Model.Team.FromYear, new { @class = "form-control", aria_describedby = "from-year from-help", @type = "number" })
        @Html.ValidationMessageFor(m => Model.Team.FromYear, null, new { id = "from-year" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => Model.Team.UntilYear, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
        <p class="form-text" id="until-help"><small>If you're not sure, an estimate is fine.</small></p>
        @Html.TextBoxFor(m => Model.Team.UntilYear, new { @class = "form-control", aria_describedby = "until-year until-help", @type = "number" })
        @Html.ValidationMessageFor(m => Model.Team.UntilYear, null, new { id = "until-year" })
    </div>
}

<fieldset class="form-group" id="team-type">
    <legend>Who can play?</legend>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Team.PlayerType, PlayerType.Mixed, new { @class = "custom-control-input", aria_describedby = "player-type-validation", @id = "player-type-1" })
        <label for="player-type-1" class="custom-control-label">Mixed</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Team.PlayerType, PlayerType.Ladies, new { @class = "custom-control-input", aria_describedby = "player-type-validation", @id = "player-type-2" })
        <label for="player-type-2" class="custom-control-label">Ladies</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Team.PlayerType, PlayerType.JuniorMixed, new { @class = "custom-control-input", aria_describedby = "player-type-validation", @id = "player-type-3" })
        <label for="player-type-3" class="custom-control-label">Junior mixed</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Team.PlayerType, PlayerType.JuniorGirls, new { @class = "custom-control-input", aria_describedby = "player-type-validation", @id = "player-type-4" })
        <label for="player-type-4" class="custom-control-label">Junior girls</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Team.PlayerType, PlayerType.JuniorBoys, new { @class = "custom-control-input", aria_describedby = "player-type-validation", @id = "player-type-5" })
        <label for="player-type-5" class="custom-control-label">Junior boys</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Team.PlayerType, PlayerType.Men, new { @class = "custom-control-input", aria_describedby = "player-type-validation", @id = "player-type-6" })
        <label for="player-type-6" class="custom-control-label">Men</label>
    </div>
    @Html.ValidationMessageFor(m => Model.Team.PlayerType, null, new { id = "player-type-validation" })
</fieldset>

<div class="form-group">
    @Html.LabelFor(m => Model.Team.Introduction, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    @Html.TextAreaFor(m => Model.Team.Introduction, new { @class = "form-control", aria_describedby = "intro-validation" })
    @Html.ValidationMessageFor(m => Model.Team.Introduction, null, new { id = "intro-validation" })
</div>

@if (Model.Team.TeamType != TeamType.Transient)
{
    <table class="table table-hover related-items">
        <thead class="thead-dark">
            <tr><th scope="col" colspan="2">Home grounds and sports centres</th></tr>
        </thead>
        <tbody>
            @for (var i = 0; i < Model.Team.MatchLocations.Count; i++)
            {
                /* The value of PAON and Town is only important to redisplay here if (ModelState.IsValid == false).
                 *
                 * PAON and Town both contain the same value for locations returned by the autocomplete, which is NameAndLocalityOrTownIfDifferent(). Because it's duplicated
                 * it's important to use NameAndLocalityOrTownIfDifferent() again here rather than NameAndLocalityOrTown(), so that the duplicate 'town' is not displayed.
                 */
                <tr class="related-item__selected">
                    <td class="related-item__selected__section"><div class="related-item__animate">@Model.Team.MatchLocations[i].NameAndLocalityOrTownIfDifferent()</div></td>
                    <td class="related-item__delete related-item__selected__section">
                        <div class="related-item__animate">
                            @Html.Hidden($"Team.MatchLocations[{i}].MatchLocationId", Model.Team.MatchLocations[i].MatchLocationId, new { @class = "related-item__data related-item__id", data_item = Model.Team.MatchLocations[i].MatchLocationId })
                            @Html.Hidden($"Team.MatchLocations[{i}].PrimaryAddressableObjectName", Model.Team.MatchLocations[i].PrimaryAddressableObjectName, new { @class = "related-item__data", data_item = Model.Team.MatchLocations[i].MatchLocationId })
                            @Html.Hidden($"Team.MatchLocations[{i}].Town", Model.Team.MatchLocations[i].Town, new { @class = "related-item__data", data_item = Model.Team.MatchLocations[i].MatchLocationId })
                            <button type="button" class="btn-delete-icon">@Html.Partial("_DeleteIcon", $"Remove {Model.Team.MatchLocations[i].NameAndLocalityOrTownIfDifferent()} from this team")</button>
                        </div>
                    </td>
                </tr>
            }
            <tr>
                <td colspan="2">
                    @Html.Label("location-autocomplete", "Add a home ground or sports centre", new { @class = "sr-only" })
                    @Html.TextBox("location-autocomplete", string.Empty, new
               {
                   @class = "form-control related-item__search",
                   placeholder = "Add a home ground or sports centre",
                   autocomplete = "off",
                   type = "search",
                   data_url = "/api/locations/autocomplete",
                   data_template = "location-template",
                   aria_label = "Type a ground or sports centre name add and press down arrow to select from the matching choices"
               })
                </td>
            </tr>
        </tbody>
    </table>
    <script type="text/x-template" id="location-template">
        <table>
            <tr class="related-item__selected">
                <td class="related-item__selected__section"><div class="related-item__animate">{{value}}</div></td>
                <td class="related-item__delete related-item__selected__section">
                    <div class="related-item__animate">
                        <input name="Team.MatchLocations[0].MatchLocationId" class="related-item__data related-item__id" type="hidden" value="{{data}}" data-item="{{data}}" />
                        <input name="Team.MatchLocations[0].PrimaryAddressableObjectName" class="related-item__data" type="hidden" value="{{value}}" data-item="{{data}}" />
                        <input name="Team.MatchLocations[0].Town" class="related-item__data" type="hidden" value="{{value}}" data-item="{{data}}" />
                        <button type="button" class="btn-delete-icon">@Html.Partial("_DeleteIcon", "Remove {{value}} from this team")</button>
                    </div>
                </td>
            </tr>
        </table>
    </script>

    <div class="form-group">
        @Html.LabelFor(m => Model.Team.PlayingTimes, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
        @Html.TextAreaFor(m => Model.Team.PlayingTimes, new { @class = "form-control", aria_describedby = "times-validation" })
        @Html.ValidationMessageFor(m => Model.Team.PlayingTimes, null, new { id = "times-validation" })
    </div>
}
    <div class="form-group">
        @Html.LabelFor(m => Model.Team.Cost, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
        <p class="form-text" id="cost-help"><small>Do you have a membership fee? Match fees? Special rates for juniors?</small></p>
        @Html.TextAreaFor(m => Model.Team.Cost, new { @class = "form-control", aria_describedby = "cost-validation cost-help" })
        @Html.ValidationMessageFor(m => Model.Team.Cost, null, new { id = "cost-validation" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => Model.Team.PublicContactDetails, RequiredFieldStatus.Recommended, new { @class = "has-form-text" })
        <p class="form-text" id="public-help"><small>Publish a phone number and email so new players can get in touch. Don't include your home address.</small></p>
        @Html.TextAreaFor(m => Model.Team.PublicContactDetails, new { @class = "form-control", aria_describedby = "public-validation public-help" })
        @Html.ValidationMessageFor(m => Model.Team.PublicContactDetails, null, new { id = "public-validation" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => Model.Team.Facebook, RequiredFieldStatus.Optional, new { @class = "has-form-text form-control__facebook" })
        @Html.TextBoxFor(m => Model.Team.Facebook, new { @class = "form-control", aria_describedby = "facebook" })
        @Html.ValidationMessageFor(m => Model.Team.Facebook, null, new { id = "facebook" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => Model.Team.Twitter, RequiredFieldStatus.Optional, new { @class = "has-form-text form-control__twitter" })
        @Html.TextBoxFor(m => Model.Team.Twitter, new { @class = "form-control", aria_describedby = "twitter" })
        @Html.ValidationMessageFor(m => Model.Team.Twitter, null, new { id = "twitter" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => Model.Team.Instagram, RequiredFieldStatus.Optional, new { @class = "has-form-text form-control__instagram" })
        @Html.TextBoxFor(m => Model.Team.Instagram, new { @class = "form-control", aria_describedby = "instagram" })
        @Html.ValidationMessageFor(m => Model.Team.Instagram, null, new { id = "instagram" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => Model.Team.YouTube, RequiredFieldStatus.Optional, new { @class = "has-form-text form-control__youtube" })
        @Html.TextBoxFor(m => Model.Team.YouTube, new { @class = "form-control", aria_describedby = "youtube" })
        @Html.ValidationMessageFor(m => Model.Team.YouTube, null, new { id = "youtube" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => Model.Team.Website, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
        @Html.TextBoxFor(m => Model.Team.Website, new { @class = "form-control", aria_describedby = "website" })
        @Html.ValidationMessageFor(m => Model.Team.Website, null, new { id = "website" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => Model.Team.PrivateContactDetails, RequiredFieldStatus.Recommended, new { @class = "has-form-text" })
        <p class="form-text" id="private-help"><small>Please provide a phone number and email, if different from above. We won't share this with anyone else.</small></p>
        @Html.TextAreaFor(m => Model.Team.PrivateContactDetails, new { @class = "form-control", aria_describedby = "private-validation private-help" })
        @Html.ValidationMessageFor(m => Model.Team.PrivateContactDetails, null, new { id = "private-validation" })
    </div>

    <button class="btn btn-primary">Save team</button>
