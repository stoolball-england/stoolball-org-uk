@model EditTournamentViewModel
@using Stoolball.Teams
@using Stoolball.Matches
@using Stoolball.Web.Matches
@Html.AntiForgeryToken()
@Html.ValidationSummary(true)

<div class="form-group">
    @Html.LabelFor(m => Model.Tournament.TournamentName)
    @Html.TextBoxFor(m => Model.Tournament.TournamentName, new { @class = "form-control", required = "required", aria_describedby = "tournament-name" })
    @Html.ValidationMessageFor(m => Model.Tournament.TournamentName, null, new { id = "tournament-name" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.TournamentDate)
    @Html.TextBoxFor(m => Model.TournamentDate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control", required = "required", aria_describedby = "match-date" })
    @Html.ValidationMessageFor(m => Model.TournamentDate, null, new { id = "match-date" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.StartTime)
    @Html.TextBoxFor(m => Model.StartTime, "{0:HH:mm}", new { @type = "time", @class = "form-control", aria_describedby = "start-time" })
    @Html.ValidationMessageFor(m => Model.StartTime, null, new { id = "start-time" })
</div>

<div class="form-group related-item">
    @Html.LabelFor(m => Model.TournamentLocationName)
    @if (Model.TournamentLocationId.HasValue)
    {
        <div class="related-item__selected">
            <div class="related-item__selected__section">
                @Html.TextBoxFor(m => Model.TournamentLocationName, new { @class = "form-control", @readonly = "readonly" })
            </div>
            <div class="related-item__delete related-item__selected__section">
                @Html.HiddenFor(m => Model.TournamentLocationId, new { @class = "related-item__data related-item__id" })
                <button class="text-danger">@Html.Partial("_DeleteIcon", (Model.TournamentLocationId.Value.ToString(), $"Remove {Model.TournamentLocationName} from this tournament"))</button>
            </div>
        </div>
        Model.TournamentLocationName = string.Empty;
        @Html.TextBoxFor(m => Model.TournamentLocationName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the ground or sports centre name",
            autocomplete = "off",
            type = "search",
            data_url = "/api/locations/autocomplete",
            data_template = "location-template",
            aria_label = "Type a ground or sports centre name add and press down arrow to select from the matching choices",
            disabled = "disabled"
        })
    }
    else
    {
        @Html.TextBoxFor(m => Model.TournamentLocationName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the ground or sports centre name",
            autocomplete = "off",
            type = "search",
            data_url = "/api/locations/autocomplete",
            data_template = "location-template",
            aria_label = "Type a ground or sports centre name add and press down arrow to select from the matching choices"
        })
    }
</div>
<script type="text/x-template" id="location-template">
    <div class="related-item__selected">
        <div class="related-item__selected__section">
            <input type="text" readonly="readonly" value="{{value}}" class="form-control" id="TournamentLocationName" name="TournamentLocationName" />
        </div>
        <div class="related-item__delete related-item__selected__section">
            <input name="TournamentLocationId" class="related-item__data related-item__id" type="hidden" value="{{data}}" />
            <button class="text-danger">@Html.Partial("_DeleteIcon", ("{{data}}", "Remove {{value}} from this tournament"))</button>
        </div>
    </div>
</script>

<fieldset class="form-group" id="team-type">
    <legend>Who can play?</legend>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Tournament.QualificationType, TournamentQualificationType.OpenTournament, new { @class = "custom-control-input", @id = TournamentQualificationType.OpenTournament.ToString() })
        <label for="@TournamentQualificationType.OpenTournament.ToString()" class="custom-control-label">any team may enter</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Tournament.QualificationType, TournamentQualificationType.ClosedTournament, new { @class = "custom-control-input", @id = TournamentQualificationType.ClosedTournament.ToString() })
        <label for="@TournamentQualificationType.ClosedTournament.ToString()" class="custom-control-label">only invited or qualifying teams can enter</label>
    </div>
    @Html.ValidationMessageFor(m => Model.Tournament.QualificationType)
</fieldset>

<fieldset class="form-group" id="team-type">
    <legend>Player type</legend>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Tournament.PlayerType, PlayerType.Mixed, new { @class = "custom-control-input", @id = "player-type-1" })
        <label for="player-type-1" class="custom-control-label">Mixed</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Tournament.PlayerType, PlayerType.Ladies, new { @class = "custom-control-input", @id = "player-type-2" })
        <label for="player-type-2" class="custom-control-label">Ladies</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Tournament.PlayerType, PlayerType.JuniorMixed, new { @class = "custom-control-input", @id = "player-type-3" })
        <label for="player-type-3" class="custom-control-label">Junior mixed</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Tournament.PlayerType, PlayerType.JuniorGirls, new { @class = "custom-control-input", @id = "player-type-4" })
        <label for="player-type-4" class="custom-control-label">Junior girls</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Tournament.PlayerType, PlayerType.JuniorBoys, new { @class = "custom-control-input", @id = "player-type-5" })
        <label for="player-type-5" class="custom-control-label">Junior boys</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Tournament.PlayerType, PlayerType.Men, new { @class = "custom-control-input", @id = "player-type-6" })
        <label for="player-type-6" class="custom-control-label">Men</label>
    </div>
    @Html.ValidationMessageFor(m => Model.Tournament.PlayerType)
</fieldset>

<div class="form-group">
    @Html.LabelFor(m => Model.Tournament.PlayersPerTeam)
    @Html.TextBoxFor(m => Model.Tournament.PlayersPerTeam, new { @class = "form-control", aria_describedby = "players-per-team", @type = "number" })
    @Html.ValidationMessageFor(m => Model.Tournament.PlayersPerTeam, null, new { id = "players-per-team" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.Tournament.OversPerInningsDefault)
    @Html.TextBoxFor(m => Model.Tournament.OversPerInningsDefault, new { @class = "form-control", aria_describedby = "overs", @type = "number" })
    @Html.ValidationMessageFor(m => Model.Tournament.OversPerInningsDefault, null, new { id = "overs" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.Tournament.TournamentNotes)
    <p class="form-text" id="notes-help"><small>Remember to include contact details.</small></p>
    @Html.TextAreaFor(m => Model.Tournament.TournamentNotes, new { @class = "form-control", aria_describedby = "notes-help notes-validation" })
    @Html.ValidationMessageFor(m => Model.Tournament.TournamentNotes, null, new { id = "notes-validation" })
</div>