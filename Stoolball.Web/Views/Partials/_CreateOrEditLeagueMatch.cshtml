@model EditLeagueMatchViewModel
@using Stoolball.Web.Matches
@using Stoolball.Web.HtmlHelpers
@Html.AntiForgeryToken()
@Html.ValidationSummary(true)

@if (Model.PossibleSeasons.Count == 1)
{
    @Html.HiddenFor(m => Model.Match.Season.SeasonId)
}
else
{
    <div class="form-group">
        @Html.LabelFor(m => Model.Match.Season.SeasonId)
        @Html.DropDownListFor(m => Model.Match.Season.SeasonId, Model.PossibleSeasons, new { @class = "form-control", required = "required", aria_describedby = "match-season" })
        @Html.ValidationMessageFor(m => Model.Match.Season.SeasonId, null, new { id = "match-season" })
    </div>
}

<div class="form-group">
    @Html.LabelFor(m => Model.MatchDate)
    @Html.TextBox(nameof(Model.MatchDate), Model.MatchDate.HasValue ? Model.MatchDate.Value.ToString("yyyy-MM-dd") : string.Empty, new { @type = "date", @class = "form-control", required = "required", aria_describedby = "match-date", data_val_date = "Enter a date in YYYY-MM-DD format." })
    @Html.ValidationMessageFor(m => Model.MatchDate, null, new { id = "match-date" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.StartTime, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    @Html.TextBoxFor(m => Model.StartTime, "{0:HH:mm}", new { @type = "time", @class = "form-control", aria_describedby = "start-time" })
    @Html.ValidationMessageFor(m => Model.StartTime, null, new { id = "start-time" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.HomeTeamId)
    @Html.DropDownListFor(m => Model.HomeTeamId, Model.PossibleHomeTeams, new { @class = "form-control", required = "required", aria_describedby = "home-team" })
    @Html.ValidationMessageFor(m => Model.HomeTeamId, null, new { id = "home-team" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.AwayTeamId)
    @Html.DropDownListFor(m => Model.AwayTeamId, Model.PossibleAwayTeams, new { @class = "form-control", required = "required", aria_describedby = "away-team" })
    @Html.ValidationMessageFor(m => Model.AwayTeamId, null, new { id = "away-team" })
</div>

<div class="form-group related-item">
    @Html.LabelFor(m => Model.MatchLocationName, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    @if (Model.MatchLocationId.HasValue)
    {
        <div class="single-related-item__selected">
            <div class="related-item__selected__section">
                @Html.TextBoxFor(m => Model.MatchLocationName, new { @class = "form-control", @readonly = "readonly" })
            </div>
            <div class="related-item__delete related-item__selected__section">
                @Html.HiddenFor(m => Model.MatchLocationId, new { @class = "related-item__data related-item__id" })
                <button type="button" class="btn-delete-icon">@Html.Partial("_DeleteIcon", $"Remove {Model.MatchLocationName} from this match")</button>
            </div>
        </div>
        Model.MatchLocationName = string.Empty;
        @Html.TextBoxFor(m => Model.MatchLocationName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the ground or sports centre name",
            autocomplete = "off",
            type = "search",
            data_url = "/api/locations/autocomplete",
            data_template = "location-template",
            aria_label = "Type a ground or sports centre name add and press down arrow to select from the matching choices",
            disabled = "disabled"
        })
    }
    else
    {
        @Html.TextBoxFor(m => Model.MatchLocationName, new
        {
            @class = "form-control related-item__search",
            placeholder = "Type the ground or sports centre name",
            autocomplete = "off",
            type = "search",
            data_url = "/api/locations/autocomplete",
            data_template = "location-template",
            aria_label = "Type a ground or sports centre name add and press down arrow to select from the matching choices"
        })
    }
</div>
<script type="text/x-template" id="location-template">
    <div class="single-related-item__selected">
        <div class="related-item__selected__section">
            <input type="text" readonly="readonly" value="{{value}}" class="form-control" id="MatchLocationName" name="MatchLocationName" />
        </div>
        <div class="related-item__delete related-item__selected__section">
            <input name="MatchLocationId" class="related-item__data related-item__id" type="hidden" value="{{data}}" />
            <button type="button" class="btn-delete-icon">@Html.Partial("_DeleteIcon", "Remove {{value}} from this match")</button>
        </div>
    </div>
</script>

<div class="form-group">
    @Html.LabelFor(m => Model.Match.MatchNotes, RequiredFieldStatus.Optional, new { @class = "has-form-text" })
    @Html.TextAreaFor(m => Model.Match.MatchNotes, new { @class = "form-control", aria_describedby = "notes-validation" })
    @Html.ValidationMessageFor(m => Model.Match.MatchNotes, null, new { id = "notes-validation" })
</div>