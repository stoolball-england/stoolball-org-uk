@inherits Umbraco.Web.Mvc.UmbracoViewPage<StatisticsViewModel<BestStatistic>>
@using Humanizer
@using Stoolball.Dates
@using Stoolball.Statistics
@using Stoolball.Web.Statistics
@using Umbraco.Core.Composing
@{
    var dateTimeFormatter = Current.Factory.CreateInstance<DateTimeFormatter>();
}
@if (Model.Results.Any() || Model.ShowLinkOnly)
{
    if (!Model.ShowLinkOnly)
    {
    <table class="statistics table-as-cards table-as-cards-reset-md">
        @if (Model.ShowCaption)
        {
            <caption>Best batting strike rate</caption>
        }
        <thead>
            <tr>
                <th scope="col" class="table-order">#</th>
                <th scope="col">Player</th>
                @if (Model.ShowTeamsColumn)
                {
                    <th scope="col">Teams</th>
                }
                <th scope="col" class="numeric statistic">Matches</th>
                <th scope="col" class="numeric statistic">Innings</th>
                <th scope="col" class="numeric statistic">Strike rate</th>
            </tr>
        </thead>
        <tbody>
            @{
                decimal? previous = null;
                for (var i = 0; i < Model.Results.Count(); i++)
                {
                    var equalToPrevious = Model.Results[i].Result.Average == previous;
                    previous = Model.Results[i].Result.Average;
                    <tr>
                        <td class="table-as-cards__header-md">@(equalToPrevious ? "=" : ((Model.StatisticsFilter.Paging.PageSize * (Model.StatisticsFilter.Paging.PageNumber - 1)) + i + 1).ToString())</td>
                        <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Player</span><a href="@Model.Results[i].Result.Player.PlayerRoute">@(Model.Results[i].Result.Player.PlayerName())</a></td>
                        @if (Model.ShowTeamsColumn)
                        {
                            <td data-stackable="true"><span class="table-as-cards__label" aria-hidden="true">Teams</span><div>@Model.Results[i].Result.Player.PlayerIdentities.Select(x => x.Team.TeamName).Humanize()</div></td>
                        }
                        <td data-stackable="true" class="numeric-md"><span class="table-as-cards__label" aria-hidden="true">Matches</span>@Model.Results[i].Result.TotalMatches</td>
                        <td data-stackable="true" class="numeric-md"><span class="table-as-cards__label" aria-hidden="true">Innings</span>@Model.Results[i].Result.TotalInnings</td>
                        <td data-stackable="true" class="numeric-md"><span class="table-as-cards__label" aria-hidden="true">Strike rate</span>@Math.Round(Model.Results[i].Result.Average.Value, 2)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    }
    if (Model.ShowLinkOnly)
    {
        <p><a href="@Request.RawUrl/batting-strike-rate">Best batting strike rate – view all</a></p>
    }
    else
    {
        @Html.Partial("_Paging", Model.StatisticsFilter.Paging)
    }
}