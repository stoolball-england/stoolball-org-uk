@model EditScorecardViewModel
@using Stoolball.Web.Matches
@using Stoolball.Matches
@using Humanizer

@Html.ValidationSummary(false)
@{
    var dismissalTypes = new SelectListItem[]
    {
        new SelectListItem { Text = DismissalType.DidNotBat.Humanize(LetterCasing.LowerCase), Value = (DismissalType.DidNotBat).ToString() },
        new SelectListItem { Text = DismissalType.NotOut.Humanize(LetterCasing.LowerCase), Value = (DismissalType.NotOut).ToString() },
        new SelectListItem { Text = DismissalType.Caught.Humanize(LetterCasing.LowerCase), Value = (DismissalType.Caught).ToString() },
        new SelectListItem { Text = DismissalType.Bowled.Humanize(LetterCasing.LowerCase), Value = (DismissalType.Bowled).ToString() },
        new SelectListItem { Text = DismissalType.CaughtAndBowled.Humanize(LetterCasing.LowerCase), Value = (DismissalType.CaughtAndBowled).ToString() },
        new SelectListItem { Text = DismissalType.RunOut.Humanize(LetterCasing.LowerCase).Replace("run out", "run-out"), Value = (DismissalType.RunOut).ToString() },
        new SelectListItem { Text = DismissalType.BodyBeforeWicket.Humanize(LetterCasing.LowerCase), Value = (DismissalType.BodyBeforeWicket).ToString() },
        new SelectListItem { Text = DismissalType.HitTheBallTwice.Humanize(LetterCasing.LowerCase), Value = (DismissalType.HitTheBallTwice).ToString() },
        new SelectListItem { Text = DismissalType.TimedOut.Humanize(LetterCasing.LowerCase), Value = (DismissalType.TimedOut).ToString() },
        new SelectListItem { Text = DismissalType.RetiredHurt.Humanize(LetterCasing.LowerCase), Value = (DismissalType.RetiredHurt).ToString() },
        new SelectListItem { Text = DismissalType.Retired.Humanize(LetterCasing.LowerCase), Value = (DismissalType.Retired).ToString() },
        new SelectListItem { Text = "not known", Value = string.Empty },
                    };
    var wicketsItems = new List<SelectListItem>();
    var totalWickets = Model.Match.LastPlayerBatsOn ? Model.Match.PlayersPerTeam : Model.Match.PlayersPerTeam - 1;
    for (var i = 0; i <= totalWickets; i++)
    {
        wicketsItems.Add(new SelectListItem { Text = i == totalWickets ? "all out" : i.ToInvariantString(), Value = i.ToInvariantString() });
    }
}
<p class="scorecard__full-name-hint d-none alert alert-info alert-tip" role="alert">Full names, if you know them, are better for comparing players.</p>

<table class="table batting-scorecard batting-scorecard-editor" data-autofocus="@Model.Autofocus.ToString().ToLowerInvariant()">
    <caption>@Model.CurrentInnings.BattingTeam.Team.TeamName's batting</caption>
    <thead>
        <tr>
            <th scope="col">Batter</th>
            <th scope="col">How out</th>
            <th scope="col">Caught/run-out by</th>
            <th scope="col">Bowler</th>
            <th scope="col" class="numeric">Runs</th>
            <th scope="col" class="numeric">Balls</th>
        </tr>
    </thead>
    <tbody>
        @for (var i = 0; i < (Model.Match.PlayersPerTeam); i++)
        {
            <tr class="scorecard__batter">
                <th scope="row">@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].PlayerIdentity.PlayerIdentityName, new { autocomplete = "off", @class = "scorecard__player-name", data_team = Model.CurrentInnings.BattingTeam.Team.TeamId.ToString() })</th>
                <td>@Html.DropDownListFor(m => Model.CurrentInnings.PlayerInnings[i].DismissalType, new SelectList(dismissalTypes, "Value", "Text", Model.CurrentInnings.PlayerInnings[i].DismissalType.HasValue ? Model.CurrentInnings.PlayerInnings[i].DismissalType.ToString() : string.IsNullOrEmpty(Model.CurrentInnings.PlayerInnings[i].PlayerIdentity.PlayerIdentityName) ? DismissalType.DidNotBat.ToString() : string.Empty), new { @class = "scorecard__dismissal" })</td>
                <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].DismissedBy.PlayerIdentityName, new { autocomplete = "off", @class = "scorecard__player-name", data_team = Model.CurrentInnings.BowlingTeam.Team.TeamId.ToString() })</td>
                <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].Bowler.PlayerIdentityName, new { autocomplete = "off", @class = "scorecard__player-name", data_team = Model.CurrentInnings.BowlingTeam.Team.TeamId.ToString() })</td>
                <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].RunsScored, new { autocomplete = "off", type = "number", data_val_number = $"The runs for the {(i + 1).Ordinalize()} batter must be a number.", min = "0", data_msg_min = $"The runs for the {(i + 1).Ordinalize()} batter must be a number, 0 or more", @class = "scorecard__runs" })</td>
                <td>@Html.TextBoxFor(m => Model.CurrentInnings.PlayerInnings[i].BallsFaced, new { autocomplete = "off", type = "number", data_val_number = $"The balls faced for the {(i + 1).Ordinalize()} batter must be a number.", min = "0", data_msg_min = $"The balls faced for the {(i + 1).Ordinalize()} batter must be a number, 0 or more", @class = "scorecard__balls" })</td>
            </tr>
        }
        <tr class="scorecard__extras">
            <th colspan="4">Byes</th>
            <td>@Html.TextBoxFor(m => Model.CurrentInnings.Byes, new { autocomplete = "off", type = "number", data_val_number = $"Byes must be a number.", min = "0", data_msg_min = $"Byes must be a number, 0 or more", @class = "scorecard__runs" })</td>
            <td></td>
        </tr>
        <tr class="scorecard__extras">
            <th colspan="4">Wides</th>
            <td>@Html.TextBoxFor(m => Model.CurrentInnings.Wides, new { autocomplete = "off", type = "number", data_val_number = $"Wides must be a number.", min = "0", data_msg_min = $"Wides must be a number, 0 or more", @class = "scorecard__runs" })</td>
            <td></td>
        </tr>
        <tr class="scorecard__extras">
            <th colspan="4">No balls</th>
            <td>@Html.TextBoxFor(m => Model.CurrentInnings.NoBalls, new { autocomplete = "off", type = "number", data_val_number = $"No balls must be a number.", min = "0", data_msg_min = $"No balls must be a number, 0 or more", @class = "scorecard__runs" })</td>
            <td></td>
        </tr>
        @if (Model.Match.EnableBonusOrPenaltyRuns)
        {
            <tr class="scorecard__extras">
                <th colspan="4">Bonus or penalty runs</th>
                <td>@Html.TextBoxFor(m => Model.CurrentInnings.BonusOrPenaltyRuns, new { autocomplete = "off", type = "number", data_val_number = $"Bonus or penalty runs must be a number.", @class = "scorecard__runs" })</td>
                <td></td>
            </tr>
        }
        <tr class="scorecard__totals">
            <th scope="row" colspan="4">Total</th>
            <td>@Html.TextBoxFor(m => Model.CurrentInnings.Runs, new { autocomplete = "off", type = "number", data_val_number = $"The total must be a number.", @class = "scorecard__total" })</td>
            <td></td>
        </tr>
        <tr class="scorecard__totals">
            <th scope="row" colspan="4">Wickets</th>
            <td>@Html.DropDownListFor(m => Model.CurrentInnings.Wickets, new SelectList(wicketsItems, "Value", "Text", Model.CurrentInnings.Wickets), string.Empty, new { @class = "scorecard__wickets" })</td>
            <td></td>
        </tr>
    </tbody>
</table>
<script type="text/x-template" id="innings-template">
    <table>
        <tr class="scorecard__batter">
            <th scope="row"><input autocomplete="off" class="scorecard__player-name" data-team="@Model.CurrentInnings.BattingTeam.Team.TeamId.ToString()" name="CurrentInnings.PlayerInnings[0].PlayerIdentity.PlayerIdentityName" type="text" value="" /></th>
            <td>
                <select name="CurrentInnings.PlayerInnings[0].DismissalType" required="required" class="scorecard__dismissal">
                    @foreach (var listItem in dismissalTypes)
                    {
                        <option value="@listItem.Value">@listItem.Text</option>
                    }
                </select>
            </td>
            <td><input autocomplete="off" class="scorecard__player-name" data-team="@Model.CurrentInnings.BowlingTeam.Team.TeamId.ToString()" name="CurrentInnings.PlayerInnings[0].DismissedBy.PlayerIdentityName" type="text" value="" /></td>
            <td><input autocomplete="off" class="scorecard__player-name" data-team="@Model.CurrentInnings.BowlingTeam.Team.TeamId.ToString()" name="CurrentInnings.PlayerInnings[0].Bowler.PlayerIdentityName" type="text" value="" /></td>
            <td><input autocomplete="off" class="scorecard__runs" data-val="true" data-msg-number="The runs for the [0th] batter must be a number." data-msg-min="The runs for the [0th] batter must be a number, 0 or more" min="0" name="CurrentInnings.PlayerInnings[0].RunsScored" type="number" value="" /></td>
            <td><input autocomplete="off" class="scorecard__balls" data-val="true" data-msg-number="The balls faced for the [0th] batter must be a number." data-msg-min="The balls faced for the [0th] batter must be a number, 0 or more" min="0" name="CurrentInnings.PlayerInnings[0].BallsFaced" type="number" value="" /></td>
        </tr>
    </table>
</script>
