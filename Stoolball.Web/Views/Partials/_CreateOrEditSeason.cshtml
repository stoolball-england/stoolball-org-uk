@model SeasonViewModel
@using Humanizer
@using Stoolball.Matches
@using Stoolball.Web.Competitions
@using Stoolball.Web.HtmlHelpers
<div class="form-group">
    @Html.LabelFor(m => Model.Season.Introduction)
    <p class="form-text" id="intro-help"><small>The introduction to the competition is displayed for all seasons. This is added just for this season. Optional.</small></p>
    @Html.TextAreaFor(m => Model.Season.Introduction, new { @class = "form-control", aria_describedby = "intro-validation intro-help" })
    @Html.ValidationMessageFor(m => Model.Season.Introduction, null, new { id = "intro-validation" })
</div>

<fieldset class="form-group">
    <legend>What matches can be listed?</legend>
    <div class="custom-control custom-checkbox">
        @Html.CheckBoxFor(m => Model.Season.EnableTournaments, new { @class = "custom-control-input", aria_describedby= "match-types-validation" })
        @Html.LabelFor(m => Model.Season.EnableTournaments, "Tournament", new { @class = "custom-control-label" })
    </div>
    @{
        // MVC always includes the checked attribute for this one, so build the attribute manually (possibly to do with the enum == 0?)
        var leagueChecked = Model.Season.MatchTypes.Contains(MatchType.LeagueMatch) ? " checked=\"checked\"" : string.Empty;
    }
    <div class="custom-control custom-checkbox">
        <input type="checkbox" name="Season.MatchTypes" value="@MatchType.LeagueMatch" class="custom-control-input" id="match-type-league" @leagueChecked aria-describedby="match-types-validation" />
        <label for="match-type-league" class="custom-control-label">@MatchType.LeagueMatch.ToString().Humanize(LetterCasing.Sentence)</label>
    </div>
    <div class="custom-control custom-checkbox">
        <input type="checkbox" name="Season.MatchTypes" value="@MatchType.KnockoutMatch" class="custom-control-input" id="match-type-knockout" checked="@Model.Season.MatchTypes.Contains(MatchType.KnockoutMatch)" aria-describedby="match-types-validation" />
        <label for="match-type-knockout" class="custom-control-label">@MatchType.KnockoutMatch.ToString().Humanize(LetterCasing.Sentence)</label>
    </div>
    <div class="custom-control custom-checkbox">
        <input type="checkbox" name="Season.MatchTypes" value="@MatchType.FriendlyMatch" class="custom-control-input" id="match-type-friendly" checked="@Model.Season.MatchTypes.Contains(MatchType.FriendlyMatch)" aria-describedby="match-types-validation" />
        <label for="match-type-friendly" class="custom-control-label">@MatchType.FriendlyMatch.ToString().Humanize(LetterCasing.Sentence)</label>
    </div>
    <div class="custom-control custom-checkbox">
        <input type="checkbox" name="Season.MatchTypes" value="@MatchType.Practice" class="custom-control-input" id="match-type-practice" checked="@Model.Season.MatchTypes.Contains(MatchType.Practice)" aria-describedby="match-types-validation" />
        <label for="match-type-practice" class="custom-control-label">@MatchType.Practice.ToString().Humanize(LetterCasing.Sentence)</label>
    </div>
    @Html.ValidationMessageFor(m => Model.Season.MatchTypes, null, new { id = "match-types-validation" })
</fieldset>

<div class="form-group">
    @Html.LabelFor(m => Model.Season.PlayersPerTeam, false, new { @class = "has-form-text" })
    @Html.TextBoxFor(m => Model.Season.PlayersPerTeam, new { @class = "form-control", aria_describedby = "players-per-team", type = "number" })
    @Html.ValidationMessageFor(m => Model.Season.PlayersPerTeam, null, new { id = "players-per-team" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.Season.Overs, false, new { @class = "has-form-text" })
    @Html.TextBoxFor(m => Model.Season.Overs, new { @class = "form-control", aria_describedby = "overs", type = "number" })
    @Html.ValidationMessageFor(m => Model.Season.Overs, null, new { id = "overs" })
</div>

<fieldset class="form-group">
    <legend>What happens when only one batter is left?</legend>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Season.EnableLastPlayerBatsOn, false, new { @class = "custom-control-input", @id = "last-player-not-out", aria_describedby= "last-player-validation" })
        <label for="last-player-not-out" class="custom-control-label">The team is out</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Season.EnableLastPlayerBatsOn, true, new { @class = "custom-control-input", @id = "last-player-bats-on", aria_describedby = "last-player-validation" })
        <label for="last-player-bats-on" class="custom-control-label">The last batter keeps batting, with a runner</label>
    </div>
    @Html.ValidationMessageFor(m => Model.Season.EnableLastPlayerBatsOn, null, new { id = "last-player-validation" })
</fieldset>

<fieldset class="form-group">
    <legend>Can bonus or penalty runs be awarded?</legend>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Season.EnableBonusOrPenaltyRuns, true, new { @class = "custom-control-input", @id = "bonus-or-penalty-runs-1", aria_describedby= "bonus-or-penalty-runs-validation" })
        <label for="bonus-or-penalty-runs-1" class="custom-control-label">Yes</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Season.EnableBonusOrPenaltyRuns, false, new { @class = "custom-control-input", @id = "bonus-or-penalty-runs-2", aria_describedby = "bonus-or-penalty-runs-validation" })
        <label for="bonus-or-penalty-runs-2" class="custom-control-label">No</label>
    </div>
    @Html.ValidationMessageFor(m => Model.Season.EnableBonusOrPenaltyRuns, null, new { id = "bonus-or-penalty-runs-validation" })
</fieldset>

<div class="form-group">
    @Html.LabelFor(m => Model.Season.Results)
    <p class="form-text" id="results-help"><small>Your results table is generated from your scorecards, but you could say who won if scorecards were not added, or how a tie was resolved in a league. Optional.</small></p>
    @Html.TextAreaFor(m => Model.Season.Results, new { @class = "form-control", aria_describedby = "results-validation results-help" })
    @Html.ValidationMessageFor(m => Model.Season.Results, null, new { id = "results-validation" })
</div>

<button class="btn btn-primary">Save season</button>
