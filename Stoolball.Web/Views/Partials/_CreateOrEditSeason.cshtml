@model SeasonViewModel
@using Humanizer
@using Stoolball.Competitions
@using Stoolball.Matches
@using Stoolball.Web.Competitions

<div class="form-group">
    @Html.LabelFor(m => Model.Season.Introduction)
    <p class="form-text" id="intro-help"><small>The introduction to the competition is displayed for all seasons. This is added just for this season.</small></p>
    @Html.TextAreaFor(m => Model.Season.Introduction, new { @class = "form-control", aria_describedby = "intro-validation intro-help" })
    @Html.ValidationMessageFor(m => Model.Season.Introduction, null, new { id = "intro-validation" })
</div>

<fieldset class="form-group">
    <legend>What matches can be listed?</legend>
    <div class="custom-control custom-checkbox">
        @Html.CheckBoxFor(m => Model.Season.EnableTournaments, new { @class = "custom-control-input" })
        @Html.LabelFor(m => Model.Season.EnableTournaments, "Tournament", new { @class = "custom-control-label" })
    </div>
    @{
        // MVC always includes the checked attribute for this one, so build the attribute manually (possibly to do with the enum == 0?)
        var leagueChecked = Model.Season.MatchTypes.Contains(MatchType.LeagueMatch) ? " checked=\"checked\"" : string.Empty;
    }
    <div class="custom-control custom-checkbox">
        <input type="checkbox" name="Season.MatchTypes" value="@MatchType.LeagueMatch" class="custom-control-input" id="match-type-league" @leagueChecked />
        <label for="match-type-league" class="custom-control-label">@MatchType.LeagueMatch.ToString().Humanize(LetterCasing.Sentence)</label>
    </div>
    <div class="custom-control custom-checkbox">
        <input type="checkbox" name="Season.MatchTypes" value="@MatchType.KnockoutMatch" class="custom-control-input" id="match-type-knockout" checked="@Model.Season.MatchTypes.Contains(MatchType.KnockoutMatch)" />
        <label for="match-type-knockout" class="custom-control-label">@MatchType.KnockoutMatch.ToString().Humanize(LetterCasing.Sentence)</label>
    </div>
    <div class="custom-control custom-checkbox">
        <input type="checkbox" name="Season.MatchTypes" value="@MatchType.FriendlyMatch" class="custom-control-input" id="match-type-friendly" checked="@Model.Season.MatchTypes.Contains(MatchType.FriendlyMatch)" />
        <label for="match-type-friendly" class="custom-control-label">@MatchType.FriendlyMatch.ToString().Humanize(LetterCasing.Sentence)</label>
    </div>
    <div class="custom-control custom-checkbox">
        <input type="checkbox" name="Season.MatchTypes" value="@MatchType.Practice" class="custom-control-input" id="match-type-practice" checked="@Model.Season.MatchTypes.Contains(MatchType.Practice)" />
        <label for="match-type-practice" class="custom-control-label">@MatchType.Practice.ToString().Humanize(LetterCasing.Sentence)</label>
    </div>
</fieldset>

<div class="form-group">
    @Html.LabelFor(m => Model.Season.PlayersPerTeam)
    @Html.TextBoxFor(m => Model.Season.PlayersPerTeam, new { @class = "form-control", aria_describedby = "players-per-team", type = "number" })
    @Html.ValidationMessageFor(m => Model.Season.PlayersPerTeam, null, new { id = "players-per-team" })
</div>

<div class="form-group">
    @Html.LabelFor(m => Model.Season.Overs)
    @Html.TextBoxFor(m => Model.Season.Overs, new { @class = "form-control", aria_describedby = "overs", type = "number" })
    @Html.ValidationMessageFor(m => Model.Season.Overs, null, new { id = "overs" })
</div>

<fieldset class="form-group">
    <legend>What happens when only one batter is left?</legend>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Season.EnableLastPlayerBatsOn, false, new { @class = "custom-control-input", @id = "last-player-not-out" })
        <label for="last-player-not-out" class="custom-control-label">the team is out</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Season.EnableLastPlayerBatsOn, true, new { @class = "custom-control-input", @id = "last-player-bats-on" })
        <label for="last-player-bats-on" class="custom-control-label">the last batter keeps batting, with a runner</label>
    </div>
    @Html.ValidationMessageFor(m => Model.Season.EnableLastPlayerBatsOn, null, new { id = "last-player-validation" })
</fieldset>

<div class="custom-control custom-checkbox">
    @Html.CheckBoxFor(m => Model.Season.EnableBonusOrPenaltyRuns, new { @class = "custom-control-input" })
    @Html.LabelFor(m => Model.Season.EnableBonusOrPenaltyRuns, "Bonus or penalty runs may be awarded", new { @class = "custom-control-label" })
</div>


<fieldset class="form-group">
    <legend>Results table</legend>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Season.ResultsTableType, ResultsTableType.None, new { @class = "custom-control-input", @id = ResultsTableType.None.ToString() })
        <label for="@ResultsTableType.None.ToString()" class="custom-control-label">@ResultsTableType.None.ToString()</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Season.ResultsTableType, ResultsTableType.LeagueTable, new { @class = "custom-control-input", @id = ResultsTableType.LeagueTable.ToString() })
        <label for="@ResultsTableType.LeagueTable.ToString()" class="custom-control-label">@ResultsTableType.LeagueTable.ToString().Humanize() (sorted by league points)</label>
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => Model.Season.ResultsTableType, ResultsTableType.NonLeagueResultsTable, new { @class = "custom-control-input", @id = ResultsTableType.NonLeagueResultsTable.ToString() })
        <label for="@ResultsTableType.NonLeagueResultsTable.ToString()" class="custom-control-label">@ResultsTableType.NonLeagueResultsTable.ToString().Humanize() (no points, sorted alphabetically)</label>
    </div>
    @Html.ValidationMessageFor(m => Model.Season.ResultsTableType, null, new { id = "table-type-validation" })

    <div class="form-group custom-control custom-checkbox">
        @Html.CheckBoxFor(m => Model.Season.EnableRunsScored, new { @class = "custom-control-input" })
        @Html.LabelFor(m => Model.Season.EnableRunsScored, "Show runs scored", new { @class = "custom-control-label" })
    </div>

    <div class="form-group custom-control custom-checkbox">
        @Html.CheckBoxFor(m => Model.Season.EnableRunsConceded, new { @class = "custom-control-input" })
        @Html.LabelFor(m => Model.Season.EnableRunsConceded, "Show runs conceded", new { @class = "custom-control-label" })
    </div>
</fieldset>

<div class="form-group">
    @Html.LabelFor(m => Model.Season.Results)
    <p class="form-text" id="results-help"><small>For example, say who won if scorecards were not added, or how a tie was resolved in a league.</small></p>
    @Html.TextAreaFor(m => Model.Season.Results, new { @class = "form-control", aria_describedby = "results-validation results-help" })
    @Html.ValidationMessageFor(m => Model.Season.Results, null, new { id = "results-validation" })
</div>

<button class="btn btn-primary">Save season</button>
