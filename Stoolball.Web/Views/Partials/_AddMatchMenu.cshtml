@model AddMatchMenuViewModel
@using Stoolball.Web.Matches
@using Stoolball.Matches
@using Humanizer
@{
    var matchTypes = Model.MatchTypes.Where(x => x != MatchType.TrainingSession).ToList(); // treated separately, because the wording is not "match"
    var enableTrainingSessions = Model.MatchTypes.Contains(MatchType.TrainingSession);
    var totalMatchTypesLarge = matchTypes.Count();
    var totalMatchTypesSmall = totalMatchTypesLarge + (Model.EnableTournaments ? 1 : 0) + (enableTrainingSessions ? 1 : 0);
    var maxButtons = ((totalMatchTypesLarge > 0 ? 1 : 0) + (Model.EnableTournaments ? 1 : 0) + (enableTrainingSessions ? 1 : 0));

    if (enableTrainingSessions)
    {
        <li class="nav-item nav-item-admin d-none d-md-flex nav-item-admin-md-first">
            <a href="@Model.BaseRoute/matches/add/training" class="nav-link nav-link-add">Add training session</a>
        </li>
    }
    if (totalMatchTypesSmall > 1 || maxButtons == 3)
    {
        var onlyWhenCombiningButtons = (totalMatchTypesLarge == 1) ? (maxButtons > 2) ? "d-lg-none" : "d-md-none" : string.Empty;
        var onlyWhenLast = (maxButtons > 2) ? "nav-item-admin-md-last" : "nav-item-admin-sm-last";
        <li class="nav-item nav-item-admin @onlyWhenLast @onlyWhenCombiningButtons">
            <div class="dropdown">
                <button class="btn nav-link nav-link-add" type="button" id="add-match-menu__button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Add match
                </button>
                <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="add-match-menu__button">
                    @if (enableTrainingSessions)
                    {
                        <li class="dropdown-item d-md-none">
                            <a href="@Model.BaseRoute/matches/add/training">Add training session</a>
                        </li>
                    }
                    @for (var i = 0; i < totalMatchTypesLarge; i++)
                    {
                        var lastChildClass = (i == totalMatchTypesLarge - 1 && Model.EnableTournaments) ? "last-child-md" : string.Empty;
                        <li class="dropdown-item @lastChildClass">
                            <a href="@Model.BaseRoute/matches/add/@matchTypes[i].ToString().ToLowerInvariant().Replace("match", string.Empty)">Add @matchTypes[i].Humanize(LetterCasing.LowerCase)</a>
                        </li>
                    }
                    @if (Model.EnableTournaments)
                    {
                        var combineTournamentsBelow = (maxButtons > 2) ? "d-lg-none" : "d-md-none";
                        <li class="dropdown-item @combineTournamentsBelow">
                            <a href="@Model.BaseRoute/matches/add/tournament">Add tournament</a>
                        </li>
                    }
                </ul>
            </div>
        </li>
    }
    if (totalMatchTypesLarge == 1)
    {
        var onlyWhenMenuIsHidden = (totalMatchTypesSmall > 1) ? (totalMatchTypesSmall > 2 ? "d-none d-lg-flex" : "d-none d-md-flex") : string.Empty;
        var andIsFirstAdminItem = (totalMatchTypesSmall > 1 && !enableTrainingSessions) ? " nav-item-admin-md-first" : string.Empty;

        <li class="nav-item nav-item-admin @onlyWhenMenuIsHidden@andIsFirstAdminItem">
            <a href="@Model.BaseRoute/matches/add/@matchTypes[0].ToString().ToLowerInvariant().Replace("match", string.Empty)" class="nav-link nav-link-add">Add match</a>
        </li>
    }
    if (Model.EnableTournaments)
    {
        <li class="nav-item nav-item-admin d-none @(maxButtons > 2 ? "d-lg-flex" : "d-md-flex")">
            <a href="@Model.BaseRoute/matches/add/tournament" class="nav-link nav-link-add">Add tournament</a>
        </li>
    }
}