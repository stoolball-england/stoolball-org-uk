@model AddMatchMenuViewModel
@using System.Collections.Generic
@using Stoolball.Web.Matches
@using Stoolball.Web.Matches.Models
@using Stoolball.Matches
@using Humanizer
@functions {
    private List<string> CreateClassList(AddMatchMenuButtonType buttonType)
    {
        var classList = new List<string>();
        if (Model.FirstButtonAtMedium == buttonType) { classList.Add("nav-item-admin-md-first"); }
        if (Model.FirstButtonAtLarge == buttonType) { classList.Add("nav-item-admin-lg-first"); }
        if (Model.LastButtonAtMedium == buttonType) { classList.Add("nav-item-admin-md-last"); }
        if (Model.LastButtonAtLarge == buttonType) { classList.Add("nav-item-admin-lg-last"); }
        if (Model.LastButtonAtMedium == buttonType && Model.LastButtonAtLarge != buttonType) { classList.Add("nav-item-admin-lg-reset-last"); }
        return classList;
    }
}
@{
    if (!Model.HasTrainingSessions && !Model.HasSingleMatchType && !Model.HasMultipleMatchTypes && !Model.HasTournaments)
    {
        return;
    }

    if (Model.HasTrainingSessions && !Model.TrainingIsInMenuAtLarge)
    {
        var classes = CreateClassList(AddMatchMenuButtonType.Training);
        if (Model.TrainingIsInMenuAtSmall || Model.TrainingIsInMenuAtMedium) { 
            classes.Add("d-none");
            classes.Add(Model.TrainingIsInMenuAtMedium ? "d-lg-flex" : "d-md-flex");
        }

        <li class="nav-item nav-item-admin @(string.Join(' ', classes.ToArray()))">
            <a href="@Model.BaseRoute/matches/add/training" class="nav-link nav-link-add">Add training session</a>
        </li>
    }
    if (Model.HasSingleMatchType && !Model.MatchIsInMenuAtLarge)
    {
        var classes = CreateClassList(AddMatchMenuButtonType.MatchType);
        if (Model.MatchIsInMenuAtSmall || Model.MatchIsInMenuAtMedium) { 
            classes.Add("d-none");
            classes.Add(Model.MatchIsInMenuAtMedium ? "d-lg-flex" : "d-md-flex");
        }

        <li class="nav-item nav-item-admin @(string.Join(' ', classes.ToArray()))">
            <a href="@Model.BaseRoute/matches/add/@Model.MatchTypes[0].ToString().ToLowerInvariant().Replace("match", string.Empty)" class="nav-link nav-link-add">Add match</a>
        </li>
    }
    if (Model.HasMenuAtSmall ||
        Model.HasMenuAtMedium ||
        Model.HasMenuAtLarge)
    {
        var listItemClasses = CreateClassList(AddMatchMenuButtonType.MatchType);
        if (!Model.TrainingIsInMenuAtMedium && !Model.MatchIsInMenuAtMedium && !Model.TournamentIsInMenuAtMedium) { listItemClasses.Add("d-md-none"); }
        if (!Model.MatchIsInMenuAtLarge) { listItemClasses.Add("d-lg-none"); }

        var trainingClass = Model.TrainingIsInMenuAtSmall ? Model.TrainingIsInMenuAtMedium ? Model.TrainingIsInMenuAtLarge ? string.Empty : "d-lg-none" : "d-md-none" : string.Empty;
        var tournamentsClass = Model.TournamentIsInMenuAtSmall ? Model.TournamentIsInMenuAtMedium ? "d-lg-none" : "d-md-none" : string.Empty;

        <li class="nav-item nav-item-admin nav-item-admin-sm-last @(string.Join(' ', listItemClasses.ToArray()))">
            <div class="dropdown">
                <button class="btn nav-link nav-link-add" type="button" id="add-match-menu__button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Add match
                </button>
                 <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="add-match-menu__button">
                     @if (Model.TrainingIsInMenuAtSmall) {
                        <li class="dropdown-item @trainingClass">
                            <a href="@Model.BaseRoute/matches/add/training">Add training session</a>
                        </li>
                     }
                     @if (Model.MatchIsInMenuAtSmall) {
                        for (var i = 0; i < Model.MatchTypes.Count; i++)
                        {
                            var lastChildClass = (i == Model.MatchTypes.Count - 1 && Model.HasTournaments) ? "last-child-md" : string.Empty;
                            <li class="dropdown-item @lastChildClass">
                                <a href="@Model.BaseRoute/matches/add/@Model.MatchTypes[i].ToString().ToLowerInvariant().Replace("match", string.Empty)">Add @Model.MatchTypes[i].Humanize(LetterCasing.LowerCase)</a>
                            </li>
                        }
                    }
                    @if (Model.TournamentIsInMenuAtSmall)
                    {
                       <li class="dropdown-item @tournamentsClass">
                            <a href="@Model.BaseRoute/matches/add/tournament">Add tournament</a>
                        </li> 
                    }
                </ul>
            </div>
        </li>
    }
    if (Model.HasTournaments)
    {
        var classes = CreateClassList(AddMatchMenuButtonType.Tournament);

        if (Model.TournamentIsInMenuAtSmall || Model.TournamentIsInMenuAtMedium) { 
            classes.Add("d-none");
            classes.Add(Model.TournamentIsInMenuAtMedium ? "d-lg-flex" : "d-md-flex");
        }

        <li class="nav-item nav-item-admin @(string.Join(' ', classes.ToArray()))">
            <a href="@Model.BaseRoute/matches/add/tournament" class="nav-link nav-link-add">Add tournament</a>
        </li>
    }
}