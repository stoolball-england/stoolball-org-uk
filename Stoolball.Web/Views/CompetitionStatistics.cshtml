@inherits Umbraco.Web.Mvc.UmbracoViewPage<StatisticsSummaryViewModel<Competition>>
@using ClientDependency.Core.Mvc
@using Stoolball.Web.Statistics
@using Stoolball.Competitions
@using Stoolball.Matches
@using Stoolball.Statistics
@using Stoolball.Web.Filtering
@{
    Html.RequiresCss("/statistics/statistics.min.css");
    Html.RequiresJs("/js/filter.js");
    Html.RequiresCss("/css/filter.min.css");

    var individualScores = new StatisticsViewModel<PlayerInnings>(Model, Services.UserService) { ShowCaption = true, ShowPlayerColumn = true, StatisticsFilter = Model.StatisticsFilter };
    individualScores.Results.AddRange(Model.PlayerInnings);
    var bowlingFigures = new StatisticsViewModel<BowlingFigures>(Model, Services.UserService) { ShowCaption = true, ShowPlayerColumn = true, StatisticsFilter = Model.StatisticsFilter };
    bowlingFigures.Results.AddRange(Model.BowlingFigures);
    var mostRuns = new StatisticsViewModel<BestStatistic>(Model, Services.UserService) { ShowCaption = true, ShowTeamsColumn = true, StatisticsFilter = Model.StatisticsFilter };
    mostRuns.Results.AddRange(Model.MostRuns);
    var mostWickets = new StatisticsViewModel<BestStatistic>(Model, Services.UserService) { ShowCaption = true, ShowTeamsColumn = true, StatisticsFilter = Model.StatisticsFilter };
    mostWickets.Results.AddRange(Model.MostWickets);
    var mostCatches = new StatisticsViewModel<BestStatistic>(Model, Services.UserService) { ShowCaption = true, ShowTeamsColumn = true, StatisticsFilter = Model.StatisticsFilter };
    mostCatches.Results.AddRange(Model.MostCatches);
}
<div class="container-xl">
    <h1>@Model.Context.CompetitionNameAndPlayerType()</h1>

    @if (Model.Context.UntilYear.HasValue)
    {
        <p class="alert alert-info"><strong>This competition isn't played any more.</strong></p>
    }

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@Model.Context.CompetitionRoute">Summary</a>
        </li>
        <li class="nav-item">
            <em class="nav-link active">Statistics</em>
        </li>
        <li class="nav-item nav-item-admin">
            <button type="button" class="nav-link nav-link-filter">Edit filter</button>
        </li>
    </ul>
    @Html.Partial("_Filters", new FilterViewModel
    {
      FilteredItemTypeSingular = "Statistics",
      FilteredItemTypePlural = "Statistics",
      FilterDescription = Model.FilterDescription,
      from = Model.StatisticsFilter.FromDate,
      to = Model.StatisticsFilter.UntilDate
    })

    @if (!Model.PlayerInnings.Any() && !Model.BowlingFigures.Any() && !Model.MostRuns.Any() && !Model.MostWickets.Any() && !Model.MostCatches.Any())
    {
        @Html.Partial("_NoData")
    }
    else
    {
        @Html.Partial("_IndividualScores", individualScores)
        @Html.Partial("_MostRuns", mostRuns)
        @Html.Partial("_BattingAverage", new StatisticsViewModel<BestStatistic>(Model, Services.UserService) { ShowLinkOnly = true })
        @Html.Partial("_BattingStrikeRate", new StatisticsViewModel<BestStatistic>(Model, Services.UserService) { ShowLinkOnly = true })
        @Html.Partial("_BowlingFigures", bowlingFigures)
        @Html.Partial("_MostWickets", mostWickets)
        @Html.Partial("_BowlingAverage", new StatisticsViewModel<BestStatistic>(Model, Services.UserService) { ShowLinkOnly = true })
        @Html.Partial("_EconomyRate", new StatisticsViewModel<BestStatistic>(Model, Services.UserService) { ShowLinkOnly = true })
        @Html.Partial("_BowlingStrikeRate", new StatisticsViewModel<BestStatistic>(Model, Services.UserService) { ShowLinkOnly = true })
        @Html.Partial("_MostCatches", mostCatches)
        @Html.Partial("_MostRunOuts", new StatisticsViewModel<BestStatistic>(Model, Services.UserService) { ShowLinkOnly = true })
    }
</div>