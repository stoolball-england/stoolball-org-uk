@inherits Umbraco.Web.Mvc.UmbracoViewPage<MatchListingViewModel>
@using ClientDependency.Core.Mvc
@using Stoolball.Matches
@using Stoolball.Web.Matches
@using Umbraco.Core.Composing
@section canonical {@Html.Partial("_CanonicalUrl", Array.Empty<string>())}
@{
    Html.RequiresJs("/js/filter.js");
    Html.RequiresCss("/css/filter.min.css");

    var serialiser = Current.Factory.GetInstance<IMatchFilterQueryStringSerializer>();
    var queryString = serialiser.Serialize(Model.AppliedMatchFilter, Model.DefaultMatchFilter);
}
<div class="container-xl">
    <h1>@Stoolball.Constants.Pages.Tournaments</h1>

    <ul class="nav nav-tabs nav-tabs-has-add">
        <li class="nav-item">
            <a href="/matches@(queryString)" class="nav-link">Matches</a>
        </li>
        <li class="nav-item">
            <em class="nav-link active">Tournaments</em>
        </li>
        <li class="nav-item nav-item-admin">
            <button type="button" class="nav-link nav-link-filter">Edit filter</button>
        </li>
    </ul>
    @Html.Partial("_MatchFilter", new MatchFilterViewModel
    {
        FilterDescription = Model.FilterDescription,
        from = Model.AppliedMatchFilter.FromDate,
        to = Model.AppliedMatchFilter.UntilDate
    })

    @if (Model.Matches.Count > 0)
    {
        @Html.Partial("_MatchList", Model)
    }
    else
    {
        <p>There are no tournaments matching this filter.</p>
        <p>Find out how to <a href="/organise/website/">add matches and results to our website</a>.</p>
    }

    @Html.Partial("_Paging", Model.AppliedMatchFilter.Paging)
    @Html.Partial("_MatchListSubscriptions", new MatchListSubscriptionsViewModel { MatchFilter = Model.AppliedMatchFilter })
</div>