@inherits Umbraco.Web.Mvc.UmbracoViewPage<EditTrainingSessionViewModel>
@using ClientDependency.Core.Mvc
@using Stoolball.Matches
@using Stoolball.Web.Matches
@using Stoolball.Security
@using Humanizer
@section head {
    <meta name="robots" content="noindex,follow" />
}
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("~/scripts/jquery.validate.min.js");
    Html.RequiresJs("~/scripts/jquery.validate.unobtrusive.min.js");

    Html.RequiresJs("~/js/libs/jquery.autocomplete.min.js", 50);
    Html.RequiresCss("~/css/autocomplete.min.css");

    Html.RequiresCss("~/css/related-items.min.css");
    Html.RequiresJs("~/js/related-items.js");
    Html.RequiresJs("~/js/related-item.js");

    Html.RequiresJs("/umbraco/lib/tinymce/tinymce.min.js", 90);
    Html.RequiresJs("/js/tinymce.js");
}
<div class="container-xl">
    <h1>Edit @Html.MatchFullName(Model.Match, x => Model.DateFormatter.FormatDate(x, false, false, false))</h1>

    @if (Model.IsAuthorized[AuthorizedAction.EditMatch])
    {
        using (Html.BeginUmbracoForm<EditTrainingSessionSurfaceController>
            ("UpdateMatch"))
        {
            @Html.Partial("_CreateOrEditTrainingSession")
            
            object noResultAttributes;
            if (Model.Match.MatchResultType.HasValue)
            {
                noResultAttributes = new { @class = "custom-control-input", @id = "MatchResultTypeYes" };
            }
            else
            {
                noResultAttributes = new { @class = "custom-control-input", @id = "MatchResultTypeYes", @checked = "checked" };
            }
            <fieldset class="form-group">
                <legend>@(Model.Match.StartTime >= DateTimeOffset.UtcNow ? "Will" : "Did") the training session happen?</legend>
                <div class="custom-control custom-radio">
                    @Html.RadioButtonFor(m => Model.Match.MatchResultType, -1, noResultAttributes)
                    <label for="MatchResultTypeYes" class="custom-control-label">The training session @(Model.Match.StartTime >= DateTimeOffset.UtcNow ? "will happen" : "happened")</label>
                </div>
                <div class="custom-control custom-radio">
                    @Html.RadioButtonFor(m => Model.Match.MatchResultType, MatchResultType.Cancelled, new { @class = "custom-control-input", @id = MatchResultType.Cancelled.ToString() })
                    <label for="@MatchResultType.Cancelled.ToString()" class="custom-control-label">No, it @(Model.Match.StartTime >= DateTimeOffset.UtcNow ? "is" : "was") @MatchResultType.Cancelled.ToString().Humanize(LetterCasing.LowerCase)</label>
                </div>
                @Html.ValidationMessageFor(m => Model.Match.MatchResultType, null, new { id = "result-type-validation" })
            </fieldset>
            <button class="btn btn-primary">Save training session</button>
        }
    }
    else
    {
    @Html.Partial("_Login")
    }
</div>