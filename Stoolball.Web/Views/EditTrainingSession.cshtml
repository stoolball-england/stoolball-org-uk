@inherits UmbracoViewPage<EditTrainingSessionViewModel>
@inject Stoolball.Dates.IDateTimeFormatter dateTimeFormatter
@using Stoolball.Matches
@using Stoolball.Web.Matches
@using Stoolball.Web.Matches.Models
@using Stoolball.Security
@using Humanizer
@section head {
    <meta name="robots" content="noindex,follow" />
}
@await Html.PartialAsync("_JQueryValidate")
@await Html.PartialAsync("_JQueryAutocomplete")
@await Html.PartialAsync("_RelatedItems")
@await Html.PartialAsync("_TinyMCE")
@{
    SmidgeHelper.RequiresJs(new JavaScriptFile("~/js/related-item.js") { Order = 100 });
}
<div class="container-xl">
    <h1>Edit @Html.MatchFullName(Model.Match!, x => dateTimeFormatter.FormatDate(x, false, false, false))</h1>

    @if (Model.Authorization.CurrentMemberIsAuthorized[AuthorizedAction.EditMatch])
    {
        using (Html.BeginUmbracoForm<EditTrainingSessionSurfaceController>(nameof(EditTrainingSessionSurfaceController.UpdateMatch)))
        {
            @await Html.PartialAsync("_CreateOrEditTrainingSession")
            
            <fieldset class="form-group">
                <legend>@(Model.Match!.StartTime >= DateTimeOffset.UtcNow ? "Will" : "Did") the training session happen?</legend>
                <div class="custom-control custom-radio">
                    <input class="custom-control-input" id="MatchResultTypeYes" name="@nameof(Model.Match).@nameof(Model.Match.MatchResultType)" type="radio" value="" @(Model.Match!.MatchResultType.HasValue ? string.Empty : " checked=\"checked\"") />
                    <label for="MatchResultTypeYes" class="custom-control-label">The training session @(Model.Match.StartTime >= DateTimeOffset.UtcNow ? "will happen" : "happened")</label>
                </div>
                <div class="custom-control custom-radio">
                    @Html.RadioButtonFor(m => Model.Match.MatchResultType, MatchResultType.Cancelled, new { @class = "custom-control-input", @id = MatchResultType.Cancelled.ToString() })
                    <label for="@MatchResultType.Cancelled.ToString()" class="custom-control-label">No, it @(Model.Match.StartTime >= DateTimeOffset.UtcNow ? "is" : "was") @MatchResultType.Cancelled.ToString().Humanize(LetterCasing.LowerCase)</label>
                </div>
                @Html.ValidationMessageFor(m => Model.Match.MatchResultType, null, new { id = "result-type-validation" })
            </fieldset>
            <button class="btn btn-primary">Save training session</button>
        }
    }
    else
    {
    @await Html.PartialAsync("_Login")
    }
</div>