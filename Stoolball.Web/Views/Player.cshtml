@inherits UmbracoViewPage<PlayerSummaryViewModel>
@inject IStatisticsFilterQueryStringSerializer serialiser
@inject IStatisticsFilterHumanizer filterHumanizer
@using Stoolball.Statistics
@using Stoolball.Web.Statistics
@using Stoolball.Web.Statistics.Models
@using Stoolball.Matches
@using Stoolball.Teams
@using Stoolball.Web.Filtering
@using Humanizer
@using System.Net.Http
@{
    SmidgeHelper.RequiresCss(new CssFile("/css/statistics.min.css") { Order = 100 });
    SmidgeHelper.RequiresJs(new JavaScriptFile("/js/filter.js") { Order = 100 });
    SmidgeHelper.RequiresCss(new CssFile("/css/filter.min.css") { Order = 100 });

    var queryString = serialiser.Serialize(Model.AppliedFilter, Model.DefaultFilter);

    var totalMatches = Model.Player!.PlayerIdentities.Sum(x => x.TotalMatches);
    var firstMatch = Model.Player!.PlayerIdentities.Min(x => x.FirstPlayed);
    var lastMatch = Model.Player!.PlayerIdentities.Max(x => x.LastPlayed);
    var matchYears = firstMatch.HasValue && lastMatch.HasValue ? (firstMatch.Value.Year == lastMatch.Value.Year) ? $"in {firstMatch.Value.Year}" : $"from {firstMatch.Value.Year} to {lastMatch.Value.Year}" : filterHumanizer.MatchingUserFilter(Model.AppliedFilter);
}
<div class="container-xl">
    @await Html.PartialAsync("_PlayerHeading", new PlayerHeadingViewModel { Heading = Model.Player.PlayerName(), AlternativeNames = Model.Player.AlternativeNames() })

    @if (Model.ShowPlayerLinkedToMemberConfirmation)
    {
        @await Html.PartialAsync("_StatisticsCacheWarning")
    }

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <em class="nav-link active">Summary</em>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Player?.PlayerRoute/batting@(queryString)">Batting</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Player?.PlayerRoute/bowling@(queryString)">Bowling</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@Model.Player?.PlayerRoute/fielding@(queryString)">Fielding</a>
        </li>
        <li class="nav-item nav-item-admin">
            <button type="button" class="nav-link nav-link-filter">Edit filter</button>
        </li>
    </ul>
    @await Html.PartialAsync("_Filters", new FilterViewModel
    {
        FilteredItemTypeSingular = "Statistics",
        FilteredItemTypePlural = "Statistics",
        FilterDescription = Model.FilterDescription,
        from = Model.AppliedFilter.FromDate,
        to = Model.AppliedFilter.UntilDate
    })

    <p class="lead">
        @(Model.Player!.PlayerName()) played <a href="@Model.Player.PlayerRoute/player-performances@(queryString)">@totalMatches
        @(totalMatches == 1 ? "match" : "matches")</a> for @Html.Raw(Model.Player!.PlayerIdentities.OrderByDescending(x => x.TotalMatches).Select(x => x.Team).ToList().Distinct(new TeamEqualityComparer()).Humanize(x => $"<a href=\"{Html.Encode(x.TeamRoute)}\">{Html.Encode(x.TeamName)}</a>")) @matchYears.
    </p>
    @if (Model.TotalPlayerOfTheMatchAwards > 0)
    {
        <p class="lead">Nominated <a href="@Model.Player.PlayerRoute/player-of-match@(queryString)">player of the match</a> @(Model.TotalPlayerOfTheMatchAwards == 1 ? "once" : Model.TotalPlayerOfTheMatchAwards + " times").</p>
    }

    <div class="statistics-pair">
        <p class="statistics-pair__statistic statistics-pair__primary statistics-pair__runs"><span class="statistics-pair__value">@Model.BattingStatistics.TotalRunsScored</span><span class="statistics-pair__label">@(Model.BattingStatistics.TotalRunsScored == 1 ? "run" : "runs")</span></p>
        <p class="statistics-pair__statistic statistics-pair__secondary"><span class="statistics-pair__value">@Model.BattingStatistics.BestInningsRunsScored@(Model.BattingStatistics.BestInningsWasDismissed == false ? "*" : string.Empty)</span><span class="statistics-pair__label">best</span></p>
    </div>
    <div class="statistics-pair">
        <p class="statistics-pair__statistic statistics-pair__primary statistics-pair__wickets"><span class="statistics-pair__value">@Model.BowlingStatistics.TotalWickets</span><span class="statistics-pair__label">@(Model.BowlingStatistics.TotalWickets == 1 ? "wicket" : "wickets")</span></p>
        <p class="statistics-pair__statistic statistics-pair__secondary"><span class="statistics-pair__value">@(Model.BowlingStatistics.BestInningsWickets.HasValue ? Model.BowlingStatistics.BestInningsWickets + "/" + (Model.BowlingStatistics.BestInningsRunsConceded.HasValue ? Model.BowlingStatistics.BestInningsRunsConceded.Value.ToString() : "–") : "–")</span><span class="statistics-pair__label">best</span></p>
    </div>
    <div class="statistics-pair">
        <p class="statistics-pair__statistic statistics-pair__primary statistics-pair__catches"><span class="statistics-pair__value">@Model.FieldingStatistics.TotalCatches</span><span class="statistics-pair__label">@(Model.FieldingStatistics.TotalCatches == 1 ? "catch" : "catches")</span></p>
        <p class="statistics-pair__statistic statistics-pair__secondary"><span class="statistics-pair__value">@Model.FieldingStatistics.TotalRunOuts</span><span class="statistics-pair__label">@(Model.FieldingStatistics.TotalRunOuts == 1 ? "run-out" : "run-outs")</span></p>
    </div>

    @if (!Model.Player.MemberKey.HasValue)
    {
        <hr />
        <p class="linked"><a href="@Model.Player.PlayerRoute/link-to-my-account">Link this player to my account</a></p>
    }
    else if (Model.IsCurrentMember)
    {
        <hr />
        <p class="linked">This player is linked to your account. See <a href="/account/linked-players">Players linked to my account</a>.</p>
    }
</div>
