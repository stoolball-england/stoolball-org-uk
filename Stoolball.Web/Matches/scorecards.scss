@import "../Content/bootstrap/_mixins.scss";
@import "../Content/bootstrap/_functions.scss";
@import "../Content/bootstrap/_variables.scss";
@import "../css/_mixins.scss";

$space-character-width: .25em;

/* View scorecards */
.batting-scorecard-base, .bowling-scorecard {
    margin-bottom: $spacer*2;
}

// Remove the default bottom-border since the final row is a totals row with a background colour
.batting-scorecard-base {
    border-bottom: none;
}

// The heading labels are all short, so customise the default width used by .table-as-cards and don't let them wrap
.batting-scorecard [data-label]::before,
.bowling-scorecard [data-label]::before {
    width: 6rem;
}

.batting-scorecard-base thead th,
.bowling-scorecard thead th {
  white-space: nowrap;
}

// Treat a row heading like the column headings hidden by .table-as-cards.
// Apply a standard width to the visually-dominant first column in .table-as-cards, ensuring a series of batting and bowling scorecards all line-up
.batting-scorecard th:first-child, .bowling-scorecard th:first-child {
    background: $table-dark-bg;
    color: $table-dark-color;
    width: 8rem;
}

.batting-scorecard th:first-child a:link, .batting-scorecard th:first-child a:visited,
.bowling-scorecard th:first-child a:link, .bowling-scorecard th:first-child a:visited {
    color: $table-dark-color;
    border-bottom-color: $table-dark-color;
}

// Because .table-as-cards is applied, each td is the last on its row. Its padding-right is therefore added to the padding-right of .container-xl,
// making wrapping more likely. Remove the extra one, but put it back in .scorecard__totals where there's a background colour that makes the lack of padding too obvious,
// and .scorecard__extras, which needs to align with .scorecard__totals in the minimal scorecard.
.batting-scorecard td {
    padding-right: 0;
}

.scorecard__extras td, .scorecard__totals td {
    padding-right: $table-cell-padding;
}

// eg for "caught (Jane Smith)", put the name on a separate line. Creates better wrapping behaviour, where the column does not get too wide and push left into the
// space taken by the ::before pseudo-element, breaking the alignment of the values in the column.
.batting-scorecard-base .dismissed-by {
    display: block;
}

// Show the runs scored in bold, to make them more prominent than the balls bowled
.batting-scorecard-base .runs {
    font-weight: bold;
}

// display: block removes the effect of colspan, which otherwise makes these rows wider than the previous rows that are using display: flex as part of .table-as-cards.
// Also make these header cells look a little different to differentiate them from the batter names above.
.scorecard__extras th {
    text-align: right;
    font-weight: normal;
    display: block;
}

.scorecard__totals th {
    text-align: right;
    display: block;
}

// Add a background to the totals rows so that they stand out.
.scorecard__totals {
  background: #ccc;
}

// Remove the flex-grow from .table-as-cards. It preserves the right-align of .numeric, but we do that with .scorecard__numeric-value
// which doesn't send the data so far off to the right away from its label.
.bowling-scorecard [data-label].numeric::before {
    flex-grow: initial;
}

.scorecard__numeric-value {
    display: inline-block;
    width: 2em;
    text-align: right;
}


@include media-breakpoint-up(sm) {
    // Set widths so that columns line up when there are multiple scorecards on a page. Do it above sm breakpoint so they don't interfere with .table-as-cards.
    .player-name, tbody th.player-name:first-child {
        width: 20%;
    }
    // Table flow will normally wrap the player names first, but it actually looks better if other things are allowed to wrap first
    .player-name {
        white-space: nowrap;
    }
    // Reset the reversed colour on the first column
    .table-as-cards-reset-sm tbody th:first-child {
        background: none;
        color: inherit;
    }

    .table-as-cards-reset-sm tbody th:first-child a:link, .table-as-cards-reset-sm tbody th:first-child a:visited {
        color: $link-color;
        border-bottom-color: $link-color;
    }
    // Reset to default - now the .table-as-cards flex layout is gone, wrapping works better
    .batting-scorecard .dismissed-by {
        display: inline;
    }
    // Undo the padding change above now that .table-as-cards does not apply and cells are not always the last in a row.
    .batting-scorecard td {
        padding-right: $table-cell-padding;
    }
    // Reset font-weight on runs scored. Balls-faced are now de-emphasised compared to runs by shrinking the font-size and adding brackets.
    .batting-scorecard .runs,
    .batting-scorecard .balls {
        width: 3rem;
        font-weight: normal;
    }

    .batting-scorecard .balls-faced-header {
        width: 1rem;
    }

    .batting-scorecard .balls-faced:before {
        content: "(";
    }

    .batting-scorecard .balls-faced {
        font-size: 0.8rem;
    }

    .batting-scorecard .balls-faced:after {
        content: ")";
    }
    // Reset display to re-enable the effect of the colspan attribute
    .batting-scorecard .scorecard__extras th, .batting-scorecard .scorecard__totals th {
        display: table-cell;
    }
}


/* Edit scorecards 

   .batting-scorecard-editor works similarly to .table-as-cards, but customises it heavily so does not use the standard class.
*/

// jQuery autocomplete suggestions for players should not be limited to the width of their input. Instead, show the whole content.
.player-suggestions {
    width: auto !important;
}

.batting-scorecard-editor thead {
    @include sr-only(); // Needs to remain in the accessibility tree for headers to be announced by screen readers
}

// Each cell gets transformed into a flex container, where the flex items are its label and its input (or div surrounding the input for those with labels that might wrap).
// This creates a miniature table row appearance, with the label as the row heading and the input as the data.
.batting-scorecard-editor__player-innings-field {
    display: flex;
    align-items: end;
}

// The label element is acting like a row heading cell, so style it like a heading.
// padding-right adds space between it and the original cell contents.
// Set a width that allows the labels to not wrap
.batting-scorecard-editor__label {
    content: attr(data-label);
    display: inline-block;
    font-weight: bold;
    width: 50%;
    text-align: left;
    margin-right: $table-cell-padding;
    width: 9rem;
}

// Allow the batter name to expand to make to most of whatever space is available at each breakpoint
.scorecard__batter-name {
    width: 100%;
}

// There's a space before this to allow wrapping. It doesn't wrap yet, so offset the space.
.batting-scorecard-editor__dismissed-by-label > .text-nowrap {
    margin-left: -$space-character-width;
}

// These rows need to have one column when the batter rows have every column stacked.
// This changes the display of the cells to flex-item rather than table-cell
.batting-scorecard-editor .scorecard__extras,
.batting-scorecard-editor .scorecard__totals {
    display: flex;
}

.batting-scorecard-editor .scorecard__extras th,
.batting-scorecard-editor .scorecard__totals th {
    flex-grow: 1;
}

.batting-scorecard-editor .scorecard__extras td,
.batting-scorecard-editor .scorecard__totals td {
    width: 7em;
}

// These cells are empty, in the balls column at full size,
// but they are an extra column when the others are stacked into one by flexbox
.batting-scorecard-editor .scorecard__extras td:last-child,
.batting-scorecard-editor .scorecard__totals td:last-child {
    display: none;
}

.batting-scorecard-editor__batter {
    background: $table-dark-bg;
    color: $table-dark-color;
}

@media (min-width:505px) {
    // Now some labels can wrap, because we can bring the column up sooner that way
    .batting-scorecard-editor__label {
        width: 5rem;
    }

    // Remove side padding from every cell, because they abut the gutter of .container-xl and don't need to duplicate it
    .batting-scorecard-editor__player-innings-field {
        padding: $table-cell-padding 0;
    }

    // The first column can now move out of the stack. 
    // Restore its padding to separate it from the stack, and stack the label instead.
    .batting-scorecard-editor__batter {
        display: table-cell;
        background: none;
        color: $black;
        padding-right: $table-cell-padding;
    }
    .batting-scorecard-editor__batter-label {
        display: block;
        width: auto;
    }

    // This wraps now, so remove the offset space.
    .batting-scorecard-editor__dismissed-by-label > .text-nowrap {
        margin-left: 0;
    }

    // Now we have two columns we can go back to showing these as two columns
    .batting-scorecard-editor .scorecard__extras, .batting-scorecard-editor .scorecard__totals {
        display: table-row;
    }
    // Move the 'Add batter' button into the spacer below the name of the batter above, to not interrupt the standard scorecard layout
    .batting-scorecard-editor__add-batter {
        height: 0;
        overflow: visible;
    }

    .batting-scorecard-editor__add-batter > td {
        padding: 0;
        border: 0;
    }

    .batting-scorecard-editor__add-batter button {
        position: absolute;
        margin-left: $spacer/4*3;
        margin-top: $spacer*-3;
    }
}

@media screen and (min-width: 675px) {
    // The second column can now move out of the stack.
    // Restore its padding to separate it from the stack, and stack the label instead.
    .batting-scorecard-editor__dismissal {
        display: table-cell;
        padding-right: $table-cell-padding;
    }
    .batting-scorecard-editor__dismissal-label {
        display: block;
        width: auto;
    }
}

@media screen and (min-width: 830px) {
    // The third column can now move out of the stack.
    // Restore its padding to separate it from the stack, and stack the label instead.
    .batting-scorecard-editor__dismissed-by {
        display: table-cell;
        padding-right: $table-cell-padding;
    }
    .batting-scorecard-editor__dismissed-by-label {
        display: block;
        width: auto;
    }

    // There's a space before this to allow wrapping. Now that it doesn't wrap, offset the space.
    .batting-scorecard-editor__dismissed-by-label > .text-nowrap {
        margin-left: -$space-character-width;
    }
    .batting-scorecard-editor__bowler-label,
    .batting-scorecard-editor__runs-label,
    .batting-scorecard-editor__balls-label {
        width: 3em;
    }
}

@media screen and (min-width: 925px) {
    // The fourth column can now move out of the stack.
    // Restore its padding to separate it from the stack, and start treating the remaining columns as .numeric
    .batting-scorecard-editor__bowler {
        display: table-cell;
        padding-right: $table-cell-padding;
    }

    .batting-scorecard-editor__runs,
    .batting-scorecard-editor__balls {
        @include numeric-value;
    }

    // The table header can now be revealed, but adjust the padding to match the cells below, and keep the last column hidden
    .batting-scorecard-editor thead {
        position: static; // undo .sr-only
    }

    .batting-scorecard-editor__header {
        padding-left: 0;
    }

    .batting-scorecard-editor__batter-header {
        padding-left: $table-cell-padding;
    }

    .batting-scorecard-editor thead th:last-child {
        display: none;
    }

    // Hide the labels which were acting as replacements for the table header, except for those still stacked
    .batting-scorecard-editor__label {
        display: none;
    }

    .batting-scorecard-editor__runs-label,
    .batting-scorecard-editor__balls-label {
        display: block;
        width: auto;
    }
}


@media screen and (min-width: 995px) {
    // Reset the remaining properties of the header so that it is displayed normally
    .batting-scorecard-editor thead th:last-child {
        display: table-cell;
    }

    // Ensure all the labels that took the place of the header row are now hidden
    .batting-scorecard-editor__label {
        display: none;
    }

    // The fifth column can now move out of the stack.
    // Restore its padding to separate it from the final column.
    .batting-scorecard-editor__runs {
        display: table-cell;
        padding-right: $table-cell-padding;
    }

    // The runs header finally can act like a .numeric as it no longer has stacked columns below it.
    .batting-scorecard-editor__runs-header {
        @include numeric-value;
    }

    // Only one column left in the stack, so restore the stack to an ordinary column.
    .batting-scorecard-editor__balls {
        display: table-cell;
    }

    // Reset to default - now the .table-as-cards flex layout is gone, wrapping works better
    .batting-scorecard-editor .dismissed-by {
        display: inline;
    }

    // Reset font-weight on runs scored. Balls-faced are now de-emphasised compared to runs by shrinking the font-size and adding brackets.
    .batting-scorecard-editor .runs,
    .batting-scorecard-editor .balls {
        width: 3rem;
        font-weight: normal;
    }

    // Reset display to re-enable the effect of the colspan attribute
    .batting-scorecard-editor .scorecard__extras th, .batting-scorecard-editor .scorecard__totals th,
    .batting-scorecard-editor .scorecard__extras td:last-child, .batting-scorecard-editor .scorecard__totals td:last-child {
        display: table-cell;
    }

    // Move the 'Add batter' button into the Byes row to not interrupt the standard scorecard layout
    .batting-scorecard-editor__add-batter button {
        position: absolute;
        margin-left: $spacer/4*3;
        margin-top: $spacer/2;
    }
}

@media screen and (min-width: 1060px) {
    // There's now enough room to restore the padding
    .batting-scorecard-editor__header, .batting-scorecard-editor__player-innings-field {
        padding: $table-cell-padding;
    }
    // And let all the player-name boxes take advantage of the width
    .batting-scorecard-editor .scorecard__player-name {
        width: 100%;
    }
}