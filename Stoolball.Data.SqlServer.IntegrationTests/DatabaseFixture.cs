using System;
using System.Data;
using System.Diagnostics;
using System.IO;
using Dapper;
using static Stoolball.Constants;

namespace Stoolball.Data.SqlServer.IntegrationTests
{
    public sealed class DatabaseFixture : IDisposable
    {
        private readonly string _databasePath;
        private readonly string _databaseLogPath;

        public IDatabaseConnectionFactory ConnectionFactory { get; private set; }

        public DatabaseFixture()
        {
            // Create a copy of the Umbraco database, complete with the current stoolball schema generated by migrations
            var databaseToCopy = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\..\..\Stoolball.Web\App_Data\Umbraco.mdf"));
            var databaseName = Guid.NewGuid().ToString();
            _databasePath = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, $@"{databaseName}.mdf"));
            _databaseLogPath = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, $@"{databaseName}_log.ldf"));

            try
            {

                File.Copy(databaseToCopy, _databasePath);
            }
            catch (IOException)
            {
                throw new InvalidOperationException("IIS Express must be stopped for integration tests to run.");
            }

            // Create a connection factory that connects to the database, and is accessible via a protected property by classes being tested
            ConnectionFactory = new IntegrationTestsDatabaseConnectionFactory(_databasePath);

            // Clear down any existing stoolball data so that there's a consistent baseline for each test run
            using (var connection = ConnectionFactory.CreateDatabaseConnection())
            {
                connection.Open();
                ClearStoolballData(connection);
            }
        }

        private static void ClearStoolballData(IDbConnection connection)
        {
            // This is the opposite of the order they're created in StoolballDataMigrationPlan
            var tablesInDependencyOrder = new string[] {
                        Tables.NotificationSubscription,
                        Tables.Audit,
                        Tables.StatisticsPlayerMatch,
                        Tables.Comment,
                        Tables.BowlingFigures,
                        Tables.Over,
                        Tables.FallOfWicket,
                        Tables.PlayerInnings,
                        Tables.AwardedTo,
                        Tables.MatchInnings,
                        Tables.MatchTeam,
                        Tables.Match,
                        Tables.TournamentSeason,
                        Tables.TournamentTeam,
                        Tables.Tournament,
                        Tables.SeasonPointsAdjustment,
                        Tables.SeasonTeam,
                        Tables.PlayerIdentity,
                        Tables.Player,
                        Tables.TeamMatchLocation,
                        Tables.TeamVersion,
                        Tables.Team,
                        Tables.SeasonPointsRule,
                        Tables.SeasonMatchType,
                        Tables.Season,
                        Tables.Competition,
                        Tables.MatchLocation,
                        Tables.SchoolVersion,
                        Tables.School,
                        Tables.ClubVersion,
                        Tables.Club,
                        Tables.Award
                    };

            foreach (var table in tablesInDependencyOrder)
            {
                connection.ExecuteAsync($"TRUNCATE TABLE {table}");
            }
        }

        public void Dispose()
        {
            // Delete the temporary database files, but to do that we have to release SQL Server's lock on them
            KillSqlServer();

            File.Delete(_databasePath);
            File.Delete(_databaseLogPath);
        }

        private static void KillSqlServer()
        {
            var sqlProcesses = Process.GetProcessesByName("sqlservr");
            foreach (var sqlProcess in sqlProcesses)
            {
                sqlProcess.Kill();
                sqlProcess.WaitForExit();
                sqlProcess.Dispose();
            }
        }
    }
}
